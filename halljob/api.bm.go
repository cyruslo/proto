// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathHallJobPing = "/hallJob.service.v1.hallJob/Ping"
var PathHallJobPushMsg = "/hallJob/Job/Push"
var PathHallJobUserOnline = "/hallJob/Job/UserOnline"
var PathHallJobUserOffline = "/hallJob/Job/UserOffline"

// HallJobBMServer is the server API for HallJob service.
type HallJobBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 推送消息
	PushMsg(ctx context.Context, req *PushMsgReq) (resp *PushMsgResp, err error)

	// 用户在线
	UserOnline(ctx context.Context, req *UserOlineReq) (resp *UserOlineResp, err error)

	// 用户离线
	UserOffline(ctx context.Context, req *UserOfflineReq) (resp *UserOfflineResp, err error)
}

var HallJobSvc HallJobBMServer

func hallJobPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallJobSvc.Ping(c, p)
	c.JSON(resp, err)
}

func hallJobPushMsg(c *bm.Context) {
	p := new(PushMsgReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallJobSvc.PushMsg(c, p)
	c.JSON(resp, err)
}

func hallJobUserOnline(c *bm.Context) {
	p := new(UserOlineReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallJobSvc.UserOnline(c, p)
	c.JSON(resp, err)
}

func hallJobUserOffline(c *bm.Context) {
	p := new(UserOfflineReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallJobSvc.UserOffline(c, p)
	c.JSON(resp, err)
}

// RegisterHallJobBMServer Register the blademaster route
func RegisterHallJobBMServer(e *bm.Engine, server HallJobBMServer) {
	HallJobSvc = server
	e.GET("/hallJob.service.v1.hallJob/Ping", hallJobPing)
	e.POST("/hallJob/Job/Push", hallJobPushMsg)
	e.POST("/hallJob/Job/UserOnline", hallJobUserOnline)
	e.POST("/hallJob/Job/UserOffline", hallJobUserOffline)
}
