// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" form:"name" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return m.Size()
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

func (m *HelloReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResp struct {
	Content              string   `protobuf:"bytes,1,opt,name=Content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResp) Reset()         { *m = HelloResp{} }
func (m *HelloResp) String() string { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()    {}
func (*HelloResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *HelloResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResp.Merge(m, src)
}
func (m *HelloResp) XXX_Size() int {
	return m.Size()
}
func (m *HelloResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResp.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResp proto.InternalMessageInfo

func (m *HelloResp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CommonRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRsp) Reset()         { *m = CommonRsp{} }
func (m *CommonRsp) String() string { return proto.CompactTextString(m) }
func (*CommonRsp) ProtoMessage()    {}
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *CommonRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRsp.Merge(m, src)
}
func (m *CommonRsp) XXX_Size() int {
	return m.Size()
}
func (m *CommonRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRsp proto.InternalMessageInfo

func (m *CommonRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CommonRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TriggerInfoReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	ActivityId           int32    `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	UserIDS              []int32  `protobuf:"varint,3,rep,packed,name=userIDS,proto3" json:"userIDS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TriggerInfoReq) Reset()         { *m = TriggerInfoReq{} }
func (m *TriggerInfoReq) String() string { return proto.CompactTextString(m) }
func (*TriggerInfoReq) ProtoMessage()    {}
func (*TriggerInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *TriggerInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TriggerInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TriggerInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerInfoReq.Merge(m, src)
}
func (m *TriggerInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *TriggerInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerInfoReq proto.InternalMessageInfo

func (m *TriggerInfoReq) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *TriggerInfoReq) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *TriggerInfoReq) GetUserIDS() []int32 {
	if m != nil {
		return m.UserIDS
	}
	return nil
}

type UserBoxInfo struct {
	UserID               int32    `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Box                  int32    `protobuf:"varint,2,opt,name=box,proto3" json:"box,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserBoxInfo) Reset()         { *m = UserBoxInfo{} }
func (m *UserBoxInfo) String() string { return proto.CompactTextString(m) }
func (*UserBoxInfo) ProtoMessage()    {}
func (*UserBoxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *UserBoxInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBoxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBoxInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBoxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBoxInfo.Merge(m, src)
}
func (m *UserBoxInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserBoxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBoxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserBoxInfo proto.InternalMessageInfo

func (m *UserBoxInfo) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UserBoxInfo) GetBox() int32 {
	if m != nil {
		return m.Box
	}
	return 0
}

type TriggerInfoRsp struct {
	Code                 int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UserBox              []*UserBoxInfo `protobuf:"bytes,3,rep,name=userBox,proto3" json:"userBox,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TriggerInfoRsp) Reset()         { *m = TriggerInfoRsp{} }
func (m *TriggerInfoRsp) String() string { return proto.CompactTextString(m) }
func (*TriggerInfoRsp) ProtoMessage()    {}
func (*TriggerInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *TriggerInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TriggerInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TriggerInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerInfoRsp.Merge(m, src)
}
func (m *TriggerInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *TriggerInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerInfoRsp proto.InternalMessageInfo

func (m *TriggerInfoRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TriggerInfoRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TriggerInfoRsp) GetUserBox() []*UserBoxInfo {
	if m != nil {
		return m.UserBox
	}
	return nil
}

// 宝箱查询请求
type QueryHBBoxNumMoneyReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	ActivityId           int32    `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	UserId               int32    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryHBBoxNumMoneyReq) Reset()         { *m = QueryHBBoxNumMoneyReq{} }
func (m *QueryHBBoxNumMoneyReq) String() string { return proto.CompactTextString(m) }
func (*QueryHBBoxNumMoneyReq) ProtoMessage()    {}
func (*QueryHBBoxNumMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *QueryHBBoxNumMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHBBoxNumMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHBBoxNumMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHBBoxNumMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHBBoxNumMoneyReq.Merge(m, src)
}
func (m *QueryHBBoxNumMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryHBBoxNumMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHBBoxNumMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHBBoxNumMoneyReq proto.InternalMessageInfo

func (m *QueryHBBoxNumMoneyReq) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *QueryHBBoxNumMoneyReq) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *QueryHBBoxNumMoneyReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 宝箱查询返回
type QueryHBBoxNumMoneyRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Display              int32    `protobuf:"varint,3,opt,name=display,proto3" json:"display,omitempty"`
	BoxNum               int32    `protobuf:"varint,4,opt,name=box_num,json=boxNum,proto3" json:"box_num,omitempty"`
	MoneyNum             int32    `protobuf:"varint,5,opt,name=money_num,json=moneyNum,proto3" json:"money_num,omitempty"`
	MoneyTotal           int32    `protobuf:"varint,6,opt,name=money_total,json=moneyTotal,proto3" json:"money_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryHBBoxNumMoneyRsp) Reset()         { *m = QueryHBBoxNumMoneyRsp{} }
func (m *QueryHBBoxNumMoneyRsp) String() string { return proto.CompactTextString(m) }
func (*QueryHBBoxNumMoneyRsp) ProtoMessage()    {}
func (*QueryHBBoxNumMoneyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *QueryHBBoxNumMoneyRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHBBoxNumMoneyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHBBoxNumMoneyRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHBBoxNumMoneyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHBBoxNumMoneyRsp.Merge(m, src)
}
func (m *QueryHBBoxNumMoneyRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryHBBoxNumMoneyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHBBoxNumMoneyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHBBoxNumMoneyRsp proto.InternalMessageInfo

func (m *QueryHBBoxNumMoneyRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QueryHBBoxNumMoneyRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHBBoxNumMoneyRsp) GetDisplay() int32 {
	if m != nil {
		return m.Display
	}
	return 0
}

func (m *QueryHBBoxNumMoneyRsp) GetBoxNum() int32 {
	if m != nil {
		return m.BoxNum
	}
	return 0
}

func (m *QueryHBBoxNumMoneyRsp) GetMoneyNum() int32 {
	if m != nil {
		return m.MoneyNum
	}
	return 0
}

func (m *QueryHBBoxNumMoneyRsp) GetMoneyTotal() int32 {
	if m != nil {
		return m.MoneyTotal
	}
	return 0
}

// 开宝箱请求
type QueryHBUserOpenBoxAddReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	ActivityId           int32    `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	UserId               int32    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryHBUserOpenBoxAddReq) Reset()         { *m = QueryHBUserOpenBoxAddReq{} }
func (m *QueryHBUserOpenBoxAddReq) String() string { return proto.CompactTextString(m) }
func (*QueryHBUserOpenBoxAddReq) ProtoMessage()    {}
func (*QueryHBUserOpenBoxAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *QueryHBUserOpenBoxAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHBUserOpenBoxAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHBUserOpenBoxAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHBUserOpenBoxAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHBUserOpenBoxAddReq.Merge(m, src)
}
func (m *QueryHBUserOpenBoxAddReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryHBUserOpenBoxAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHBUserOpenBoxAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHBUserOpenBoxAddReq proto.InternalMessageInfo

func (m *QueryHBUserOpenBoxAddReq) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *QueryHBUserOpenBoxAddReq) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *QueryHBUserOpenBoxAddReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 开宝箱返回
type QueryHBUserOpenBoxAddRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	GoodsType            int32    `protobuf:"varint,3,opt,name=goods_type,json=goodsType,proto3" json:"goods_type,omitempty"`
	GoodsId              int32    `protobuf:"varint,4,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	GoodsAmount          int32    `protobuf:"varint,5,opt,name=goods_amount,json=goodsAmount,proto3" json:"goods_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryHBUserOpenBoxAddRsp) Reset()         { *m = QueryHBUserOpenBoxAddRsp{} }
func (m *QueryHBUserOpenBoxAddRsp) String() string { return proto.CompactTextString(m) }
func (*QueryHBUserOpenBoxAddRsp) ProtoMessage()    {}
func (*QueryHBUserOpenBoxAddRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *QueryHBUserOpenBoxAddRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHBUserOpenBoxAddRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHBUserOpenBoxAddRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHBUserOpenBoxAddRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHBUserOpenBoxAddRsp.Merge(m, src)
}
func (m *QueryHBUserOpenBoxAddRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryHBUserOpenBoxAddRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHBUserOpenBoxAddRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHBUserOpenBoxAddRsp proto.InternalMessageInfo

func (m *QueryHBUserOpenBoxAddRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QueryHBUserOpenBoxAddRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryHBUserOpenBoxAddRsp) GetGoodsType() int32 {
	if m != nil {
		return m.GoodsType
	}
	return 0
}

func (m *QueryHBUserOpenBoxAddRsp) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *QueryHBUserOpenBoxAddRsp) GetGoodsAmount() int32 {
	if m != nil {
		return m.GoodsAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "boxActivity.service.v1.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "boxActivity.service.v1.HelloResp")
	proto.RegisterType((*CommonRsp)(nil), "boxActivity.service.v1.CommonRsp")
	proto.RegisterType((*TriggerInfoReq)(nil), "boxActivity.service.v1.TriggerInfoReq")
	proto.RegisterType((*UserBoxInfo)(nil), "boxActivity.service.v1.UserBoxInfo")
	proto.RegisterType((*TriggerInfoRsp)(nil), "boxActivity.service.v1.TriggerInfoRsp")
	proto.RegisterType((*QueryHBBoxNumMoneyReq)(nil), "boxActivity.service.v1.QueryHBBoxNumMoneyReq")
	proto.RegisterType((*QueryHBBoxNumMoneyRsp)(nil), "boxActivity.service.v1.QueryHBBoxNumMoneyRsp")
	proto.RegisterType((*QueryHBUserOpenBoxAddReq)(nil), "boxActivity.service.v1.QueryHBUserOpenBoxAddReq")
	proto.RegisterType((*QueryHBUserOpenBoxAddRsp)(nil), "boxActivity.service.v1.QueryHBUserOpenBoxAddRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x3f, 0x6f, 0xdb, 0x46,
	0x14, 0x2f, 0xad, 0xff, 0x8f, 0x46, 0x51, 0x1c, 0x50, 0x99, 0x92, 0x6b, 0x49, 0x3e, 0xc3, 0x85,
	0x17, 0x53, 0xad, 0x0b, 0xd4, 0xa8, 0x81, 0x0e, 0xa6, 0x5d, 0xc0, 0x02, 0xda, 0xaa, 0xa5, 0xed,
	0xa5, 0x8b, 0x70, 0x12, 0xcf, 0x34, 0x5b, 0xf1, 0x8e, 0xe6, 0x91, 0x02, 0x39, 0x74, 0x48, 0xd6,
	0x0c, 0x19, 0xb2, 0xe4, 0x0b, 0x64, 0xc9, 0x07, 0xc8, 0x67, 0xf0, 0x18, 0x20, 0xbb, 0x91, 0x38,
	0x99, 0x32, 0xe6, 0x13, 0x04, 0x3c, 0x92, 0x89, 0xec, 0x58, 0xb0, 0x85, 0x20, 0xdb, 0xbd, 0xf7,
	0x7b, 0xf7, 0xfb, 0xfd, 0xee, 0xe1, 0xdd, 0x83, 0x1a, 0xf1, 0x1c, 0xdd, 0xf3, 0x79, 0xc0, 0x51,
	0x7d, 0xc8, 0xa3, 0xdd, 0x51, 0xe0, 0x4c, 0x9c, 0x20, 0xd6, 0x05, 0xf5, 0x27, 0xce, 0x88, 0xea,
	0x93, 0x1f, 0x9b, 0x9b, 0xb6, 0x13, 0x9c, 0x86, 0x43, 0x7d, 0xc4, 0xdd, 0xae, 0xcd, 0x6d, 0xde,
	0x95, 0xe5, 0xc3, 0xf0, 0x44, 0x46, 0x32, 0x90, 0xa7, 0x94, 0xa6, 0xb9, 0x6c, 0x73, 0x6e, 0x8f,
	0xe9, 0xc7, 0x2a, 0xea, 0x7a, 0x41, 0x9c, 0x81, 0xdf, 0x65, 0x20, 0xf1, 0x9c, 0x2e, 0x61, 0x8c,
	0x07, 0x24, 0x70, 0x38, 0x13, 0x29, 0x8a, 0xf7, 0xa0, 0x7a, 0x40, 0xc7, 0x63, 0x6e, 0xd2, 0x33,
	0xb4, 0x0d, 0x45, 0x46, 0x5c, 0xaa, 0x29, 0x1d, 0x65, 0xa3, 0x66, 0xac, 0xbd, 0xbb, 0x68, 0xb7,
	0x4f, 0xb8, 0xef, 0xee, 0xe0, 0x24, 0x8b, 0x3b, 0x13, 0x32, 0x76, 0x2c, 0x12, 0xd0, 0x1d, 0xec,
	0xd3, 0xb3, 0xd0, 0xf1, 0xa9, 0x85, 0x4d, 0x79, 0x01, 0x6f, 0x41, 0x2d, 0x23, 0x11, 0x1e, 0x5a,
	0x87, 0xca, 0x1e, 0x67, 0x01, 0x65, 0x41, 0x46, 0xa4, 0xbe, 0xbd, 0x68, 0x57, 0x46, 0x69, 0xca,
	0xcc, 0x31, 0xfc, 0x0b, 0xd4, 0xf6, 0xb8, 0xeb, 0x72, 0x66, 0x0a, 0x0f, 0x21, 0x28, 0x8e, 0xb8,
	0x95, 0x2a, 0x97, 0x4c, 0x79, 0x46, 0x1a, 0x54, 0x5c, 0x2a, 0x04, 0xb1, 0xa9, 0xb6, 0x90, 0xf0,
	0x98, 0x79, 0x88, 0x2d, 0xf8, 0xfa, 0xc8, 0x77, 0x6c, 0x9b, 0xfa, 0x3d, 0x76, 0x22, 0x9d, 0x2f,
	0x41, 0xc5, 0x26, 0x2e, 0x1d, 0x38, 0x56, 0x46, 0x51, 0x4e, 0xc2, 0x9e, 0x85, 0xda, 0xa0, 0x92,
	0xac, 0xbf, 0x09, 0xb8, 0x20, 0x41, 0xc8, 0x53, 0x3d, 0x2b, 0x51, 0x09, 0x05, 0xf5, 0x7b, 0xfb,
	0x87, 0x5a, 0xa1, 0x53, 0xd8, 0x28, 0x99, 0x79, 0x88, 0xb7, 0x41, 0x3d, 0x16, 0xd4, 0x37, 0x78,
	0x94, 0xa8, 0xa0, 0x3a, 0x94, 0x53, 0x24, 0x57, 0x48, 0x23, 0xf4, 0x0d, 0x14, 0x86, 0x3c, 0xca,
	0x98, 0x93, 0x23, 0xfe, 0xff, 0xaa, 0xbd, 0x79, 0x9f, 0x87, 0x7e, 0x4d, 0x2d, 0x19, 0x3c, 0x92,
	0x96, 0xd4, 0xad, 0x35, 0xfd, 0xe6, 0x31, 0xd1, 0xa7, 0xfc, 0x99, 0xf9, 0x1d, 0xfc, 0x2f, 0x7c,
	0xfb, 0x77, 0x48, 0xfd, 0xf8, 0xc0, 0x30, 0x78, 0xf4, 0x67, 0xe8, 0xfe, 0xc1, 0x19, 0x8d, 0x3f,
	0xaf, 0x49, 0x4b, 0xa9, 0xa3, 0x04, 0x2c, 0x4c, 0x3d, 0xde, 0xc2, 0xcf, 0x94, 0x1b, 0xc5, 0xe6,
	0x7e, 0xb2, 0x06, 0x15, 0xcb, 0x11, 0xde, 0x98, 0xc4, 0x99, 0x40, 0x1e, 0x26, 0xd2, 0x43, 0x1e,
	0x0d, 0x58, 0xe8, 0x6a, 0xc5, 0x54, 0x7a, 0x28, 0x85, 0xd0, 0x32, 0xd4, 0xdc, 0x44, 0x4c, 0x42,
	0x25, 0x09, 0x55, 0x65, 0x22, 0x01, 0xdb, 0xa0, 0xa6, 0x60, 0xc0, 0x03, 0x32, 0xd6, 0xca, 0xe9,
	0x8b, 0x64, 0xea, 0x28, 0xc9, 0x60, 0x17, 0xb4, 0xcc, 0x77, 0xd2, 0xc3, 0xbe, 0x47, 0x99, 0xc1,
	0xa3, 0x5d, 0xcb, 0xfa, 0x42, 0x7d, 0x7a, 0xa2, 0xcc, 0xd2, 0x9b, 0xbb, 0x55, 0x2b, 0x00, 0x36,
	0xe7, 0x96, 0x18, 0x04, 0xb1, 0x47, 0x33, 0x99, 0x9a, 0xcc, 0x1c, 0xc5, 0x1e, 0x45, 0x0d, 0xa8,
	0xa6, 0xb0, 0x63, 0x65, 0x0d, 0xab, 0xc8, 0xb8, 0x67, 0xa1, 0x55, 0x58, 0x4c, 0x21, 0xe2, 0xf2,
	0x90, 0x05, 0x59, 0xd3, 0x54, 0x99, 0xdb, 0x95, 0xa9, 0xad, 0xa7, 0x25, 0x50, 0xa7, 0x66, 0x0d,
	0xfd, 0x0c, 0xc5, 0xbf, 0x1c, 0x66, 0xa3, 0xba, 0x9e, 0x2e, 0x11, 0x3d, 0xdf, 0x30, 0xfa, 0x6f,
	0xc9, 0x86, 0x69, 0xce, 0xc8, 0xa3, 0x7d, 0xa8, 0x1e, 0x92, 0x58, 0xee, 0x04, 0xd4, 0x99, 0x35,
	0xbd, 0xf9, 0xde, 0x99, 0xc9, 0x12, 0x83, 0x9a, 0xb3, 0x1c, 0x9b, 0xbf, 0xdf, 0x81, 0x68, 0xf5,
	0x96, 0x0a, 0xe1, 0xe1, 0xf5, 0xfb, 0x2f, 0xde, 0x3c, 0x5a, 0x68, 0xe3, 0x95, 0xee, 0x7f, 0x3e,
	0x09, 0xb8, 0xd8, 0x9c, 0xba, 0xd1, 0x15, 0x24, 0x1e, 0x9c, 0x4a, 0xd3, 0xf7, 0x14, 0x58, 0xec,
	0xb3, 0xec, 0x1b, 0x1b, 0x3c, 0x42, 0xdf, 0xcf, 0xa2, 0xbe, 0xba, 0x89, 0x9a, 0x77, 0xaa, 0x13,
	0x1e, 0x5e, 0x95, 0x3e, 0x96, 0x71, 0xa3, 0x3b, 0x6d, 0xe0, 0x8a, 0xe4, 0x03, 0x05, 0xa0, 0xcf,
	0xe4, 0xd8, 0x24, 0xe1, 0xe6, 0x2c, 0xe6, 0x1b, 0x7f, 0x7b, 0x73, 0x9e, 0x72, 0xe1, 0xe1, 0xb6,
	0xf4, 0xd3, 0xc0, 0x4b, 0xd7, 0xfc, 0x7c, 0x90, 0x7f, 0xa8, 0x40, 0xad, 0xcf, 0xb2, 0xc9, 0x45,
	0x3f, 0xdc, 0xc2, 0xfe, 0xc9, 0xaf, 0x6a, 0xce, 0x79, 0x43, 0x78, 0xb8, 0x25, 0x2d, 0x69, 0xb8,
	0x7e, 0xcd, 0x52, 0x56, 0x65, 0x34, 0xce, 0x5f, 0xb5, 0x94, 0xf3, 0xcb, 0x96, 0xf2, 0xfc, 0xb2,
	0xa5, 0xbc, 0xbc, 0x6c, 0x29, 0x8f, 0x5f, 0xb7, 0xbe, 0xfa, 0xa7, 0x40, 0x3c, 0x67, 0x58, 0x96,
	0x93, 0xf4, 0xd3, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xa0, 0xa1, 0x04, 0x6b, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BoxActivityClient is the client API for BoxActivity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BoxActivityClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	//获得宝箱（打旋亲友房触发）
	OnTriggerBox(ctx context.Context, in *TriggerInfoReq, opts ...grpc.CallOption) (*TriggerInfoRsp, error)
	//
	//客户端请求 查询宝箱接口
	//QueryHBBoxNumMoneyReq = 10711, --宝箱查询请求
	//QueryHBBoxNumMoneyRsp = 10712, --宝箱查询返回
	OnQueryBox(ctx context.Context, in *QueryHBBoxNumMoneyReq, opts ...grpc.CallOption) (*QueryHBBoxNumMoneyRsp, error)
	OnOpenBox(ctx context.Context, in *QueryHBUserOpenBoxAddReq, opts ...grpc.CallOption) (*QueryHBUserOpenBoxAddRsp, error)
}

type boxActivityClient struct {
	cc *grpc.ClientConn
}

func NewBoxActivityClient(cc *grpc.ClientConn) BoxActivityClient {
	return &boxActivityClient{cc}
}

func (c *boxActivityClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/boxActivity.service.v1.boxActivity/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxActivityClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/boxActivity.service.v1.boxActivity/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxActivityClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/boxActivity.service.v1.boxActivity/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxActivityClient) OnTriggerBox(ctx context.Context, in *TriggerInfoReq, opts ...grpc.CallOption) (*TriggerInfoRsp, error) {
	out := new(TriggerInfoRsp)
	err := c.cc.Invoke(ctx, "/boxActivity.service.v1.boxActivity/OnTriggerBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxActivityClient) OnQueryBox(ctx context.Context, in *QueryHBBoxNumMoneyReq, opts ...grpc.CallOption) (*QueryHBBoxNumMoneyRsp, error) {
	out := new(QueryHBBoxNumMoneyRsp)
	err := c.cc.Invoke(ctx, "/boxActivity.service.v1.boxActivity/OnQueryBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxActivityClient) OnOpenBox(ctx context.Context, in *QueryHBUserOpenBoxAddReq, opts ...grpc.CallOption) (*QueryHBUserOpenBoxAddRsp, error) {
	out := new(QueryHBUserOpenBoxAddRsp)
	err := c.cc.Invoke(ctx, "/boxActivity.service.v1.boxActivity/OnOpenBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxActivityServer is the server API for BoxActivity service.
type BoxActivityServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	SayHello(context.Context, *HelloReq) (*empty.Empty, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	//获得宝箱（打旋亲友房触发）
	OnTriggerBox(context.Context, *TriggerInfoReq) (*TriggerInfoRsp, error)
	//
	//客户端请求 查询宝箱接口
	//QueryHBBoxNumMoneyReq = 10711, --宝箱查询请求
	//QueryHBBoxNumMoneyRsp = 10712, --宝箱查询返回
	OnQueryBox(context.Context, *QueryHBBoxNumMoneyReq) (*QueryHBBoxNumMoneyRsp, error)
	OnOpenBox(context.Context, *QueryHBUserOpenBoxAddReq) (*QueryHBUserOpenBoxAddRsp, error)
}

// UnimplementedBoxActivityServer can be embedded to have forward compatible implementations.
type UnimplementedBoxActivityServer struct {
}

func (*UnimplementedBoxActivityServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedBoxActivityServer) SayHello(ctx context.Context, req *HelloReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedBoxActivityServer) SayHelloURL(ctx context.Context, req *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (*UnimplementedBoxActivityServer) OnTriggerBox(ctx context.Context, req *TriggerInfoReq) (*TriggerInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTriggerBox not implemented")
}
func (*UnimplementedBoxActivityServer) OnQueryBox(ctx context.Context, req *QueryHBBoxNumMoneyReq) (*QueryHBBoxNumMoneyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnQueryBox not implemented")
}
func (*UnimplementedBoxActivityServer) OnOpenBox(ctx context.Context, req *QueryHBUserOpenBoxAddReq) (*QueryHBUserOpenBoxAddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnOpenBox not implemented")
}

func RegisterBoxActivityServer(s *grpc.Server, srv BoxActivityServer) {
	s.RegisterService(&_BoxActivity_serviceDesc, srv)
}

func _BoxActivity_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxActivityServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boxActivity.service.v1.boxActivity/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxActivityServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxActivity_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxActivityServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boxActivity.service.v1.boxActivity/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxActivityServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxActivity_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxActivityServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boxActivity.service.v1.boxActivity/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxActivityServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxActivity_OnTriggerBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxActivityServer).OnTriggerBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boxActivity.service.v1.boxActivity/OnTriggerBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxActivityServer).OnTriggerBox(ctx, req.(*TriggerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxActivity_OnQueryBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHBBoxNumMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxActivityServer).OnQueryBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boxActivity.service.v1.boxActivity/OnQueryBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxActivityServer).OnQueryBox(ctx, req.(*QueryHBBoxNumMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxActivity_OnOpenBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHBUserOpenBoxAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxActivityServer).OnOpenBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boxActivity.service.v1.boxActivity/OnOpenBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxActivityServer).OnOpenBox(ctx, req.(*QueryHBUserOpenBoxAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BoxActivity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "boxActivity.service.v1.boxActivity",
	HandlerType: (*BoxActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BoxActivity_Ping_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _BoxActivity_SayHello_Handler,
		},
		{
			MethodName: "SayHelloURL",
			Handler:    _BoxActivity_SayHelloURL_Handler,
		},
		{
			MethodName: "OnTriggerBox",
			Handler:    _BoxActivity_OnTriggerBox_Handler,
		},
		{
			MethodName: "OnQueryBox",
			Handler:    _BoxActivity_OnQueryBox_Handler,
		},
		{
			MethodName: "OnOpenBox",
			Handler:    _BoxActivity_OnOpenBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *HelloReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TriggerInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TriggerInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserIDS) > 0 {
		dAtA2 := make([]byte, len(m.UserIDS)*10)
		var j1 int
		for _, num1 := range m.UserIDS {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserBoxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBoxInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBoxInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Box != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Box))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TriggerInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TriggerInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserBox) > 0 {
		for iNdEx := len(m.UserBox) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserBox[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHBBoxNumMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHBBoxNumMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHBBoxNumMoneyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHBBoxNumMoneyRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHBBoxNumMoneyRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHBBoxNumMoneyRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MoneyTotal != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MoneyTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.MoneyNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MoneyNum))
		i--
		dAtA[i] = 0x28
	}
	if m.BoxNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BoxNum))
		i--
		dAtA[i] = 0x20
	}
	if m.Display != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Display))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHBUserOpenBoxAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHBUserOpenBoxAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHBUserOpenBoxAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHBUserOpenBoxAddRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHBUserOpenBoxAddRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHBUserOpenBoxAddRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoodsAmount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.GoodsId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x20
	}
	if m.GoodsType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelloResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TriggerInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if len(m.UserIDS) > 0 {
		l = 0
		for _, e := range m.UserIDS {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserBoxInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.Box != 0 {
		n += 1 + sovApi(uint64(m.Box))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TriggerInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UserBox) > 0 {
		for _, e := range m.UserBox {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryHBBoxNumMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryHBBoxNumMoneyRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Display != 0 {
		n += 1 + sovApi(uint64(m.Display))
	}
	if m.BoxNum != 0 {
		n += 1 + sovApi(uint64(m.BoxNum))
	}
	if m.MoneyNum != 0 {
		n += 1 + sovApi(uint64(m.MoneyNum))
	}
	if m.MoneyTotal != 0 {
		n += 1 + sovApi(uint64(m.MoneyTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryHBUserOpenBoxAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryHBUserOpenBoxAddRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GoodsType != 0 {
		n += 1 + sovApi(uint64(m.GoodsType))
	}
	if m.GoodsId != 0 {
		n += 1 + sovApi(uint64(m.GoodsId))
	}
	if m.GoodsAmount != 0 {
		n += 1 + sovApi(uint64(m.GoodsAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDS = append(m.UserIDS, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDS) == 0 {
					m.UserIDS = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDS = append(m.UserIDS, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDS", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBoxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBoxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBoxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Box", wireType)
			}
			m.Box = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Box |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBox = append(m.UserBox, &UserBoxInfo{})
			if err := m.UserBox[len(m.UserBox)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHBBoxNumMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHBBoxNumMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHBBoxNumMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHBBoxNumMoneyRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHBBoxNumMoneyRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHBBoxNumMoneyRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			m.Display = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Display |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxNum", wireType)
			}
			m.BoxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoneyNum", wireType)
			}
			m.MoneyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoneyNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoneyTotal", wireType)
			}
			m.MoneyTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoneyTotal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHBUserOpenBoxAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHBUserOpenBoxAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHBUserOpenBoxAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHBUserOpenBoxAddRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHBUserOpenBoxAddRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHBUserOpenBoxAddRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsType", wireType)
			}
			m.GoodsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsAmount", wireType)
			}
			m.GoodsAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
