// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathGameJobServiceOnLogin = "/gamejobservice/onlogin"
var PathGameJobServiceOnLogout = "/gamejobservice/onlogout"
var PathGameJobServiceSendToUser = "/gamejobservice/sendtouser"
var PathGameJobServiceSendToGameServer = "/gamejobservice/sendtogameserver"
var PathGameJobServiceBroadcastToAllGameServer = "/gamejobservice/broadcasttoallgameserver"

// GameJobServiceBMServer is the server API for GameJobService service.
type GameJobServiceBMServer interface {
	// 玩家登录游戏 grpc
	OnLogin(ctx context.Context, req *LoginOutReq) (resp *CommonResp, err error)

	// 玩家退出游戏 grpc
	OnLogout(ctx context.Context, req *LoginOutReq) (resp *CommonResp, err error)

	// 给指定用户发送消息
	SendToUser(ctx context.Context, req *UserOpReq) (resp *CommonResp, err error)

	// 给指定服务器发送消息
	SendToGameServer(ctx context.Context, req *ServerOpReq) (resp *CommonResp, err error)

	// 给指定服务器发送消息
	BroadcastToAllGameServer(ctx context.Context, req *ServerOpReq) (resp *CommonResp, err error)
}

var GameJobServiceSvc GameJobServiceBMServer

func gameJobServiceOnLogin(c *bm.Context) {
	p := new(LoginOutReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GameJobServiceSvc.OnLogin(c, p)
	c.JSON(resp, err)
}

func gameJobServiceOnLogout(c *bm.Context) {
	p := new(LoginOutReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GameJobServiceSvc.OnLogout(c, p)
	c.JSON(resp, err)
}

func gameJobServiceSendToUser(c *bm.Context) {
	p := new(UserOpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GameJobServiceSvc.SendToUser(c, p)
	c.JSON(resp, err)
}

func gameJobServiceSendToGameServer(c *bm.Context) {
	p := new(ServerOpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GameJobServiceSvc.SendToGameServer(c, p)
	c.JSON(resp, err)
}

func gameJobServiceBroadcastToAllGameServer(c *bm.Context) {
	p := new(ServerOpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GameJobServiceSvc.BroadcastToAllGameServer(c, p)
	c.JSON(resp, err)
}

// RegisterGameJobServiceBMServer Register the blademaster route
func RegisterGameJobServiceBMServer(e *bm.Engine, server GameJobServiceBMServer) {
	GameJobServiceSvc = server
	e.POST("/gamejobservice/onlogin", gameJobServiceOnLogin)
	e.POST("/gamejobservice/onlogout", gameJobServiceOnLogout)
	e.POST("/gamejobservice/sendtouser", gameJobServiceSendToUser)
	e.POST("/gamejobservice/sendtogameserver", gameJobServiceSendToGameServer)
	e.POST("/gamejobservice/broadcasttoallgameserver", gameJobServiceBroadcastToAllGameServer)
}
