// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 游戏服玩家登录、退出通用请求
type LoginOutReq struct {
	UserID               int64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	GroupID              int32    `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	RoomID               string   `protobuf:"bytes,4,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
	Hostname             string   `protobuf:"bytes,5,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginOutReq) Reset()         { *m = LoginOutReq{} }
func (m *LoginOutReq) String() string { return proto.CompactTextString(m) }
func (*LoginOutReq) ProtoMessage()    {}
func (*LoginOutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *LoginOutReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginOutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginOutReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginOutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginOutReq.Merge(m, src)
}
func (m *LoginOutReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginOutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginOutReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginOutReq proto.InternalMessageInfo

type CommonResp struct {
	Result               int32    `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResp) Reset()         { *m = CommonResp{} }
func (m *CommonResp) String() string { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()    {}
func (*CommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *CommonResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResp.Merge(m, src)
}
func (m *CommonResp) XXX_Size() int {
	return m.Size()
}
func (m *CommonResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResp proto.InternalMessageInfo

type UserOpReq struct {
	UserID               int64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Ops                  int32    `protobuf:"varint,2,opt,name=Ops,proto3" json:"Ops,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
	GameID               int32    `protobuf:"varint,4,opt,name=GameID,proto3" json:"GameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserOpReq) Reset()         { *m = UserOpReq{} }
func (m *UserOpReq) String() string { return proto.CompactTextString(m) }
func (*UserOpReq) ProtoMessage()    {}
func (*UserOpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *UserOpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserOpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOpReq.Merge(m, src)
}
func (m *UserOpReq) XXX_Size() int {
	return m.Size()
}
func (m *UserOpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOpReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserOpReq proto.InternalMessageInfo

type ServerOpReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              int32    `protobuf:"varint,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             int32    `protobuf:"varint,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	Ops                  int32    `protobuf:"varint,4,opt,name=Ops,proto3" json:"Ops,omitempty"`
	Payload              []byte   `protobuf:"bytes,5,opt,name=Payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerOpReq) Reset()         { *m = ServerOpReq{} }
func (m *ServerOpReq) String() string { return proto.CompactTextString(m) }
func (*ServerOpReq) ProtoMessage()    {}
func (*ServerOpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ServerOpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerOpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerOpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerOpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerOpReq.Merge(m, src)
}
func (m *ServerOpReq) XXX_Size() int {
	return m.Size()
}
func (m *ServerOpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerOpReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServerOpReq proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LoginOutReq)(nil), "gamejob.service.v1.LoginOutReq")
	proto.RegisterType((*CommonResp)(nil), "gamejob.service.v1.CommonResp")
	proto.RegisterType((*UserOpReq)(nil), "gamejob.service.v1.UserOpReq")
	proto.RegisterType((*ServerOpReq)(nil), "gamejob.service.v1.ServerOpReq")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x3d, 0x6f, 0xd4, 0x30,
	0x18, 0xc7, 0xeb, 0xde, 0x5d, 0xdb, 0x73, 0x11, 0xaa, 0x32, 0x40, 0x1a, 0x95, 0xf4, 0xe4, 0x29,
	0x42, 0x22, 0xe1, 0xe5, 0x13, 0xb4, 0x1c, 0x2a, 0x87, 0x40, 0x87, 0xd2, 0xb2, 0x74, 0x73, 0xee,
	0x4c, 0x08, 0x24, 0x7e, 0x82, 0xed, 0x9c, 0xc4, 0xc0, 0xc2, 0xc2, 0x80, 0x98, 0x58, 0xf8, 0x48,
	0x1d, 0x91, 0xf8, 0x02, 0x70, 0x30, 0xf2, 0x21, 0x90, 0x9d, 0x97, 0x86, 0x23, 0xd0, 0x01, 0x36,
	0xff, 0xed, 0x27, 0xcf, 0xef, 0xff, 0xbc, 0x28, 0x78, 0x48, 0xf3, 0xc4, 0xcf, 0x05, 0x28, 0xb0,
	0xac, 0x98, 0x66, 0xec, 0x39, 0x44, 0xbe, 0x64, 0x62, 0x91, 0xcc, 0x98, 0xbf, 0xb8, 0xe5, 0xdc,
	0x88, 0x13, 0xf5, 0xac, 0x88, 0xfc, 0x19, 0x64, 0x41, 0x0c, 0x31, 0x04, 0x26, 0x34, 0x2a, 0x9e,
	0x1a, 0x65, 0x84, 0x39, 0x95, 0x29, 0x9c, 0xbd, 0x18, 0x20, 0x4e, 0x59, 0x40, 0xf3, 0x24, 0xa0,
	0x9c, 0x83, 0xa2, 0x2a, 0x01, 0x2e, 0xcb, 0x57, 0xf2, 0x0e, 0xe1, 0xed, 0x87, 0x10, 0x27, 0x7c,
	0x5a, 0xa8, 0x90, 0xbd, 0xb4, 0xae, 0xe0, 0x8d, 0x27, 0x92, 0x89, 0xc9, 0xd8, 0x46, 0x23, 0xe4,
	0xf5, 0xc2, 0x4a, 0xe9, 0xfb, 0x23, 0x9a, 0xb1, 0xc9, 0xd8, 0x5e, 0x1f, 0x21, 0x6f, 0x10, 0x56,
	0xca, 0xb2, 0xf1, 0xe6, 0x91, 0x80, 0x22, 0x9f, 0x8c, 0xed, 0x9e, 0x79, 0xa8, 0xa5, 0xfe, 0x22,
	0x04, 0xc8, 0x26, 0x63, 0xbb, 0x3f, 0x42, 0xde, 0x30, 0xac, 0x94, 0xe5, 0xe0, 0xad, 0xfb, 0x20,
	0x15, 0xa7, 0x19, 0xb3, 0x07, 0xe6, 0xa5, 0xd1, 0xe4, 0x14, 0xe3, 0xbb, 0x90, 0x65, 0xc0, 0x43,
	0x26, 0x73, 0x93, 0x81, 0xc9, 0x22, 0x55, 0xc6, 0xcb, 0x20, 0xac, 0x94, 0xce, 0x70, 0x4f, 0x08,
	0x10, 0x8f, 0x64, 0x6c, 0xdc, 0x0c, 0xc3, 0x46, 0x6b, 0x3f, 0x8f, 0xe9, 0xab, 0x14, 0xe8, 0xdc,
	0xf8, 0xb9, 0x14, 0xd6, 0x92, 0xc4, 0x78, 0xa8, 0x6b, 0x99, 0xe6, 0x7f, 0x2b, 0x73, 0x07, 0xf7,
	0xa6, 0xb9, 0xac, 0x6a, 0xd4, 0xc7, 0x3f, 0x27, 0x6c, 0xb5, 0xa4, 0xdf, 0x6e, 0x09, 0x79, 0x8b,
	0xf0, 0xf6, 0x31, 0x13, 0x8b, 0x16, 0xab, 0x8a, 0x43, 0xab, 0xad, 0x3b, 0x10, 0x8c, 0xd3, 0xa6,
	0xa7, 0xb5, 0xd4, 0x05, 0x96, 0x09, 0x9a, 0xae, 0x36, 0xba, 0x76, 0xd8, 0xef, 0x74, 0x38, 0xf8,
	0xc5, 0xe1, 0xed, 0x1f, 0x7d, 0x7c, 0x59, 0xc3, 0x1e, 0x40, 0x74, 0x5c, 0xee, 0x8f, 0xf5, 0x02,
	0x6f, 0x4e, 0xb9, 0x19, 0xb8, 0xb5, 0xef, 0xff, 0xbe, 0x5c, 0x7e, 0x6b, 0x17, 0x1c, 0xb7, 0x2b,
	0xe0, 0x7c, 0x3e, 0x64, 0xff, 0xcd, 0xe7, 0xef, 0x1f, 0xd6, 0x77, 0xc9, 0xd5, 0xa0, 0x8a, 0xab,
	0xc2, 0x02, 0xe0, 0xa9, 0x21, 0x64, 0x78, 0xcb, 0xc0, 0xa0, 0x50, 0xff, 0x4e, 0x1b, 0x19, 0x9a,
	0x43, 0xec, 0x4e, 0x9a, 0x46, 0x00, 0xc6, 0xc7, 0x8c, 0xcf, 0x4f, 0x40, 0x0f, 0xd3, 0xba, 0xd6,
	0x95, 0xaf, 0xd9, 0x80, 0x0b, 0x71, 0xc4, 0xe0, 0xf6, 0x88, 0xb3, 0x8a, 0x93, 0x8c, 0xcf, 0x15,
	0x14, 0x1a, 0xf1, 0x1a, 0xef, 0x94, 0x40, 0xdd, 0xe4, 0x72, 0x42, 0xdd, 0x75, 0xb6, 0xd6, 0xe1,
	0x42, 0xb0, 0x67, 0xc0, 0x84, 0x8c, 0xba, 0xc1, 0xfa, 0x52, 0x96, 0xa8, 0xf7, 0x08, 0xdb, 0x87,
	0x02, 0xe8, 0x7c, 0x46, 0xa5, 0x3a, 0x81, 0x83, 0x34, 0xfd, 0x9f, 0x3e, 0x6e, 0x1a, 0x1f, 0xd7,
	0x89, 0xb7, 0xea, 0x23, 0xaa, 0x91, 0x0a, 0x68, 0x9a, 0x9e, 0xfb, 0x39, 0xdc, 0x3d, 0xfb, 0xea,
	0xae, 0x9d, 0x2d, 0x5d, 0xf4, 0x69, 0xe9, 0xa2, 0x2f, 0x4b, 0x17, 0x7d, 0xfc, 0xe6, 0xae, 0x9d,
	0xf6, 0x68, 0x9e, 0x44, 0x1b, 0xe6, 0x6f, 0x73, 0xe7, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b,
	0x47, 0x9c, 0x0d, 0xdb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameJobServiceClient is the client API for GameJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameJobServiceClient interface {
	// 玩家登录游戏 grpc
	OnLogin(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 玩家退出游戏 grpc
	OnLogout(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 给指定用户发送消息
	SendToUser(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 给指定服务器发送消息
	SendToGameServer(ctx context.Context, in *ServerOpReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 给指定服务器发送消息
	BroadcastToAllGameServer(ctx context.Context, in *ServerOpReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type gameJobServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameJobServiceClient(cc *grpc.ClientConn) GameJobServiceClient {
	return &gameJobServiceClient{cc}
}

func (c *gameJobServiceClient) OnLogin(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/gamejob.service.v1.GameJobService/OnLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameJobServiceClient) OnLogout(ctx context.Context, in *LoginOutReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/gamejob.service.v1.GameJobService/OnLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameJobServiceClient) SendToUser(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/gamejob.service.v1.GameJobService/SendToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameJobServiceClient) SendToGameServer(ctx context.Context, in *ServerOpReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/gamejob.service.v1.GameJobService/SendToGameServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameJobServiceClient) BroadcastToAllGameServer(ctx context.Context, in *ServerOpReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/gamejob.service.v1.GameJobService/BroadcastToAllGameServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameJobServiceServer is the server API for GameJobService service.
type GameJobServiceServer interface {
	// 玩家登录游戏 grpc
	OnLogin(context.Context, *LoginOutReq) (*CommonResp, error)
	// 玩家退出游戏 grpc
	OnLogout(context.Context, *LoginOutReq) (*CommonResp, error)
	// 给指定用户发送消息
	SendToUser(context.Context, *UserOpReq) (*CommonResp, error)
	// 给指定服务器发送消息
	SendToGameServer(context.Context, *ServerOpReq) (*CommonResp, error)
	// 给指定服务器发送消息
	BroadcastToAllGameServer(context.Context, *ServerOpReq) (*CommonResp, error)
}

// UnimplementedGameJobServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameJobServiceServer struct {
}

func (*UnimplementedGameJobServiceServer) OnLogin(ctx context.Context, req *LoginOutReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLogin not implemented")
}
func (*UnimplementedGameJobServiceServer) OnLogout(ctx context.Context, req *LoginOutReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLogout not implemented")
}
func (*UnimplementedGameJobServiceServer) SendToUser(ctx context.Context, req *UserOpReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToUser not implemented")
}
func (*UnimplementedGameJobServiceServer) SendToGameServer(ctx context.Context, req *ServerOpReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToGameServer not implemented")
}
func (*UnimplementedGameJobServiceServer) BroadcastToAllGameServer(ctx context.Context, req *ServerOpReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastToAllGameServer not implemented")
}

func RegisterGameJobServiceServer(s *grpc.Server, srv GameJobServiceServer) {
	s.RegisterService(&_GameJobService_serviceDesc, srv)
}

func _GameJobService_OnLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameJobServiceServer).OnLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamejob.service.v1.GameJobService/OnLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameJobServiceServer).OnLogin(ctx, req.(*LoginOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameJobService_OnLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameJobServiceServer).OnLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamejob.service.v1.GameJobService/OnLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameJobServiceServer).OnLogout(ctx, req.(*LoginOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameJobService_SendToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameJobServiceServer).SendToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamejob.service.v1.GameJobService/SendToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameJobServiceServer).SendToUser(ctx, req.(*UserOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameJobService_SendToGameServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameJobServiceServer).SendToGameServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamejob.service.v1.GameJobService/SendToGameServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameJobServiceServer).SendToGameServer(ctx, req.(*ServerOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameJobService_BroadcastToAllGameServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameJobServiceServer).BroadcastToAllGameServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamejob.service.v1.GameJobService/BroadcastToAllGameServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameJobServiceServer).BroadcastToAllGameServer(ctx, req.(*ServerOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameJobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gamejob.service.v1.GameJobService",
	HandlerType: (*GameJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnLogin",
			Handler:    _GameJobService_OnLogin_Handler,
		},
		{
			MethodName: "OnLogout",
			Handler:    _GameJobService_OnLogout_Handler,
		},
		{
			MethodName: "SendToUser",
			Handler:    _GameJobService_SendToUser_Handler,
		},
		{
			MethodName: "SendToGameServer",
			Handler:    _GameJobService_SendToGameServer_Handler,
		},
		{
			MethodName: "BroadcastToAllGameServer",
			Handler:    _GameJobService_BroadcastToAllGameServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *LoginOutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginOutReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginOutReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RoomID) > 0 {
		i -= len(m.RoomID)
		copy(dAtA[i:], m.RoomID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomID)))
		i--
		dAtA[i] = 0x22
	}
	if m.GroupID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserOpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserOpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ops != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ops))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerOpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerOpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerOpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ops != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ops))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x18
	}
	if m.ArenaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginOutReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.GroupID != 0 {
		n += 1 + sovApi(uint64(m.GroupID))
	}
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserOpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.Ops != 0 {
		n += 1 + sovApi(uint64(m.Ops))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerOpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.ServerID != 0 {
		n += 1 + sovApi(uint64(m.ServerID))
	}
	if m.Ops != 0 {
		n += 1 + sovApi(uint64(m.Ops))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginOutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginOutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginOutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			m.Ops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ops |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerOpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerOpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerOpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			m.Ops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ops |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
