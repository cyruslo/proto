// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api/api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathTaskGameEnd = "/task/GameEnd"
var PathTaskSpecialAction = "/task/SpecialAction"
var PathTaskBuyProps = "/task/BuyProps"
var PathTaskPayMoney = "/task/PayMoney"
var PathTaskGetTaskList = "/task/GetTaskList"
var PathTaskGetRandTaskList = "/task/GetRandTaskList"
var PathTaskGetTaskReward = "/task/GetTaskReward"
var PathTaskGetActivityReward = "/task/GetActivityReward"
var PathTaskGetRandReward = "/task/GetRandReward"
var PathTaskPushOnLineStatus = "/task/PushOnLineStatus"
var PathTaskGetHallTaskList = "/task/GetHallTaskList"
var PathTaskGetHallTaskReward = "/task/GetHallTaskReward"
var PathTaskListHallMissions = "/task/ListHallMissions"
var PathTaskReceiveHallMissionReward = "/task/ReceiveHallMissionReward"
var PathTaskReportedRequirement = "/task/ReportedRequirement"

// TaskBMServer is the server API for Task service.
type TaskBMServer interface {
	// 一局结束上报
	GameEnd(ctx context.Context, req *GameEndReq) (resp *CommonResp, err error)

	// 特殊动作上报 ， 棋牌打出 飞机 连队等 捕鱼 捕获特定的鱼等
	SpecialAction(ctx context.Context, req *SpecialActionReq) (resp *SpecialActionResp, err error)

	// 购买道具上报
	BuyProps(ctx context.Context, req *BuyPropsReq) (resp *CommonResp, err error)

	// 充值上报
	PayMoney(ctx context.Context, req *PayMoneyReq) (resp *CommonResp, err error)

	// 获取任务列表
	GetTaskList(ctx context.Context, req *QueryTaskReq) (resp *QueryTaskResp, err error)

	// 获取随机任务列表，目前海外地鼠在用
	GetRandTaskList(ctx context.Context, req *QueryTaskReq) (resp *QueryTaskResp, err error)

	// 获取普通任务奖励
	GetTaskReward(ctx context.Context, req *GetTaskRewardReq) (resp *RewardResp, err error)

	// 获取活跃度奖励
	GetActivityReward(ctx context.Context, req *GetActivityRewardReq) (resp *RewardResp, err error)

	// 获取随机任务奖励，通过根据权重抽取
	GetRandReward(ctx context.Context, req *GetRandRewardReq) (resp *RewardResp, err error)

	// 在线时长 推送用户上下线
	PushOnLineStatus(ctx context.Context, req *PushOnLineStatusReq) (resp *CommonResp, err error)

	// 大厅任务列表获取
	GetHallTaskList(ctx context.Context, req *GetHallTaskReq) (resp *HallTaskListResp, err error)

	// 大厅任务奖励获取
	GetHallTaskReward(ctx context.Context, req *HallTaskRewardReq) (resp *RewardResp, err error)

	ListHallMissions(ctx context.Context, req *ListHallMissionsReq) (resp *ListHallMissionsResp, err error)

	ReceiveHallMissionReward(ctx context.Context, req *ReceiveHallMissionRewardReq) (resp *ReceiveHallMissionRewardResp, err error)

	ReportedRequirement(ctx context.Context, req *ReportedRequirementReq) (resp *ReportedRequirementResp, err error)
}

var TaskSvc TaskBMServer

func taskGameEnd(c *bm.Context) {
	p := new(GameEndReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GameEnd(c, p)
	c.JSON(resp, err)
}

func taskSpecialAction(c *bm.Context) {
	p := new(SpecialActionReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.SpecialAction(c, p)
	c.JSON(resp, err)
}

func taskBuyProps(c *bm.Context) {
	p := new(BuyPropsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.BuyProps(c, p)
	c.JSON(resp, err)
}

func taskPayMoney(c *bm.Context) {
	p := new(PayMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.PayMoney(c, p)
	c.JSON(resp, err)
}

func taskGetTaskList(c *bm.Context) {
	p := new(QueryTaskReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GetTaskList(c, p)
	c.JSON(resp, err)
}

func taskGetRandTaskList(c *bm.Context) {
	p := new(QueryTaskReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GetRandTaskList(c, p)
	c.JSON(resp, err)
}

func taskGetTaskReward(c *bm.Context) {
	p := new(GetTaskRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GetTaskReward(c, p)
	c.JSON(resp, err)
}

func taskGetActivityReward(c *bm.Context) {
	p := new(GetActivityRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GetActivityReward(c, p)
	c.JSON(resp, err)
}

func taskGetRandReward(c *bm.Context) {
	p := new(GetRandRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GetRandReward(c, p)
	c.JSON(resp, err)
}

func taskPushOnLineStatus(c *bm.Context) {
	p := new(PushOnLineStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.PushOnLineStatus(c, p)
	c.JSON(resp, err)
}

func taskGetHallTaskList(c *bm.Context) {
	p := new(GetHallTaskReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GetHallTaskList(c, p)
	c.JSON(resp, err)
}

func taskGetHallTaskReward(c *bm.Context) {
	p := new(HallTaskRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.GetHallTaskReward(c, p)
	c.JSON(resp, err)
}

func taskListHallMissions(c *bm.Context) {
	p := new(ListHallMissionsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.ListHallMissions(c, p)
	c.JSON(resp, err)
}

func taskReceiveHallMissionReward(c *bm.Context) {
	p := new(ReceiveHallMissionRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.ReceiveHallMissionReward(c, p)
	c.JSON(resp, err)
}

func taskReportedRequirement(c *bm.Context) {
	p := new(ReportedRequirementReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TaskSvc.ReportedRequirement(c, p)
	c.JSON(resp, err)
}

// RegisterTaskBMServer Register the blademaster route
func RegisterTaskBMServer(e *bm.Engine, server TaskBMServer) {
	TaskSvc = server
	e.POST("/task/GameEnd", taskGameEnd)
	e.POST("/task/SpecialAction", taskSpecialAction)
	e.POST("/task/BuyProps", taskBuyProps)
	e.POST("/task/PayMoney", taskPayMoney)
	e.POST("/task/GetTaskList", taskGetTaskList)
	e.POST("/task/GetRandTaskList", taskGetRandTaskList)
	e.POST("/task/GetTaskReward", taskGetTaskReward)
	e.POST("/task/GetActivityReward", taskGetActivityReward)
	e.POST("/task/GetRandReward", taskGetRandReward)
	e.POST("/task/PushOnLineStatus", taskPushOnLineStatus)
	e.POST("/task/GetHallTaskList", taskGetHallTaskList)
	e.POST("/task/GetHallTaskReward", taskGetHallTaskReward)
	e.POST("/task/ListHallMissions", taskListHallMissions)
	e.POST("/task/ReceiveHallMissionReward", taskReceiveHallMissionReward)
	e.POST("/task/ReportedRequirement", taskReportedRequirement)
}
