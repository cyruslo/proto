// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathArenaServerOnMatchList = "/arenaServer/onMatchList"
var PathArenaServerOnSignUp = "/arenaServer/onSignUp"
var PathArenaServerOnRankList = "/arenaServer/onRankList"
var PathArenaServerOnMatchStatus = "/arenaServer/onMatchStatus"
var PathArenaServerOnWeekRecord = "/arenaServer/onWeekRecord"
var PathArenaServerOnAwardList = "/arenaServer/onAwardList"
var PathArenaServerOnAwardCount = "/arenaServer/onAwardCount"
var PathArenaServerOnAward = "/arenaServer/onAward"
var PathArenaServerOnGetFamousList = "/arenaServer/onGetFamousList"
var PathArenaServerOnGetDailyTask = "/arenaServer/onGetDailyTask"
var PathArenaServerOnGetTaskFish = "/arenaServer/onGetTaskFish"
var PathArenaServerOnUpdateTaskFish = "/arenaServer/onUpdateTaskFish"
var PathArenaServerOnReportStatusRequest = "/arenaServer/onReportStatusRequest"

// ArenaServerBMServer is the server API for ArenaServer service.
type ArenaServerBMServer interface {
	OnMatchList(ctx context.Context, req *GMatchDetailsReq) (resp *GMatchDetailsRsp, err error)

	OnSignUp(ctx context.Context, req *GSignUpReq) (resp *GSignUpRsp, err error)

	OnRankList(ctx context.Context, req *GRankListReq) (resp *GRankListRsp, err error)

	OnMatchStatus(ctx context.Context, req *MatchStatusReq) (resp *MatchStatusRsp, err error)

	OnWeekRecord(ctx context.Context, req *GWeekRecordReq) (resp *GWeekRecordRsp, err error)

	OnAwardList(ctx context.Context, req *GAwardListReq) (resp *GAwardListRsp, err error)

	OnAwardCount(ctx context.Context, req *AwardCountReq) (resp *AwardCountRsp, err error)

	OnAward(ctx context.Context, req *GGetAwardReq) (resp *GGetAwardRsp, err error)

	OnGetFamousList(ctx context.Context, req *GFamousListReq) (resp *GFamousListRsp, err error)

	OnGetDailyTask(ctx context.Context, req *GDailyTaskReq) (resp *GDailyTaskRsp, err error)

	OnGetTaskFish(ctx context.Context, req *RewardTaskGetReq) (resp *RewardTaskGetRsp, err error)

	OnUpdateTaskFish(ctx context.Context, req *RewardTaskUpdateReq) (resp *CommonResp, err error)

	OnReportStatusRequest(ctx context.Context, req *ReportStatusReqV2) (resp *CommonResp, err error)
}

var ArenaServerSvc ArenaServerBMServer

func arenaServerOnMatchList(c *bm.Context) {
	p := new(GMatchDetailsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnMatchList(c, p)
	c.JSON(resp, err)
}

func arenaServerOnSignUp(c *bm.Context) {
	p := new(GSignUpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnSignUp(c, p)
	c.JSON(resp, err)
}

func arenaServerOnRankList(c *bm.Context) {
	p := new(GRankListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnRankList(c, p)
	c.JSON(resp, err)
}

func arenaServerOnMatchStatus(c *bm.Context) {
	p := new(MatchStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnMatchStatus(c, p)
	c.JSON(resp, err)
}

func arenaServerOnWeekRecord(c *bm.Context) {
	p := new(GWeekRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnWeekRecord(c, p)
	c.JSON(resp, err)
}

func arenaServerOnAwardList(c *bm.Context) {
	p := new(GAwardListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnAwardList(c, p)
	c.JSON(resp, err)
}

func arenaServerOnAwardCount(c *bm.Context) {
	p := new(AwardCountReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnAwardCount(c, p)
	c.JSON(resp, err)
}

func arenaServerOnAward(c *bm.Context) {
	p := new(GGetAwardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnAward(c, p)
	c.JSON(resp, err)
}

func arenaServerOnGetFamousList(c *bm.Context) {
	p := new(GFamousListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnGetFamousList(c, p)
	c.JSON(resp, err)
}

func arenaServerOnGetDailyTask(c *bm.Context) {
	p := new(GDailyTaskReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnGetDailyTask(c, p)
	c.JSON(resp, err)
}

func arenaServerOnGetTaskFish(c *bm.Context) {
	p := new(RewardTaskGetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnGetTaskFish(c, p)
	c.JSON(resp, err)
}

func arenaServerOnUpdateTaskFish(c *bm.Context) {
	p := new(RewardTaskUpdateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnUpdateTaskFish(c, p)
	c.JSON(resp, err)
}

func arenaServerOnReportStatusRequest(c *bm.Context) {
	p := new(ReportStatusReqV2)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := ArenaServerSvc.OnReportStatusRequest(c, p)
	c.JSON(resp, err)
}

// RegisterArenaServerBMServer Register the blademaster route
func RegisterArenaServerBMServer(e *bm.Engine, server ArenaServerBMServer) {
	ArenaServerSvc = server
	e.POST("/arenaServer/onMatchList", arenaServerOnMatchList)
	e.POST("/arenaServer/onSignUp", arenaServerOnSignUp)
	e.POST("/arenaServer/onRankList", arenaServerOnRankList)
	e.POST("/arenaServer/onMatchStatus", arenaServerOnMatchStatus)
	e.POST("/arenaServer/onWeekRecord", arenaServerOnWeekRecord)
	e.POST("/arenaServer/onAwardList", arenaServerOnAwardList)
	e.POST("/arenaServer/onAwardCount", arenaServerOnAwardCount)
	e.POST("/arenaServer/onAward", arenaServerOnAward)
	e.POST("/arenaServer/onGetFamousList", arenaServerOnGetFamousList)
	e.POST("/arenaServer/onGetDailyTask", arenaServerOnGetDailyTask)
	e.POST("/arenaServer/onGetTaskFish", arenaServerOnGetTaskFish)
	e.POST("/arenaServer/onUpdateTaskFish", arenaServerOnUpdateTaskFish)
	e.POST("/arenaServer/onReportStatusRequest", arenaServerOnReportStatusRequest)
}
