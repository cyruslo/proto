// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathGsOnUpdateKeyValues = "/gs/OnUpdateKeyValues"
var PathGsOnLoadValues = "/gs/OnLoadValues"
var PathGsOnSetPlayerIP = "/gs/OnSetPlayerIP"
var PathGsOnGetPlayerIP = "/gs/OnGetPlayerIP"
var PathGsOnTurntableRecord = "/gs/OnTurntableRecord"
var PathGsOnTurntableRecordLog = "/gs/OnTurntableRecordLog"
var PathGsOnTurntableRecordInster = "/gs/OnTurntableRecordInster"

// GsBMServer is the server API for Gs service.
type GsBMServer interface {
	OnUpdateKeyValues(ctx context.Context, req *UpdateKeyValues) (resp *CommonResp, err error)

	OnLoadValues(ctx context.Context, req *LoadValues) (resp *LoadValuesResp, err error)

	OnSetPlayerIP(ctx context.Context, req *SetPlayerIP) (resp *CommonResp, err error)

	OnGetPlayerIP(ctx context.Context, req *GetPlayerIP) (resp *GetPlayerIPResp, err error)

	OnTurntableRecord(ctx context.Context, req *TurntableRecordReq) (resp *TurntableRecordRsp, err error)

	OnTurntableRecordLog(ctx context.Context, req *TurntableRecordLogReq) (resp *CommonResp, err error)

	OnTurntableRecordInster(ctx context.Context, req *TurntableRecordInsterReq) (resp *CommonResp, err error)
}

var GsSvc GsBMServer

func gsOnUpdateKeyValues(c *bm.Context) {
	p := new(UpdateKeyValues)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GsSvc.OnUpdateKeyValues(c, p)
	c.JSON(resp, err)
}

func gsOnLoadValues(c *bm.Context) {
	p := new(LoadValues)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GsSvc.OnLoadValues(c, p)
	c.JSON(resp, err)
}

func gsOnSetPlayerIP(c *bm.Context) {
	p := new(SetPlayerIP)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GsSvc.OnSetPlayerIP(c, p)
	c.JSON(resp, err)
}

func gsOnGetPlayerIP(c *bm.Context) {
	p := new(GetPlayerIP)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GsSvc.OnGetPlayerIP(c, p)
	c.JSON(resp, err)
}

func gsOnTurntableRecord(c *bm.Context) {
	p := new(TurntableRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GsSvc.OnTurntableRecord(c, p)
	c.JSON(resp, err)
}

func gsOnTurntableRecordLog(c *bm.Context) {
	p := new(TurntableRecordLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GsSvc.OnTurntableRecordLog(c, p)
	c.JSON(resp, err)
}

func gsOnTurntableRecordInster(c *bm.Context) {
	p := new(TurntableRecordInsterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GsSvc.OnTurntableRecordInster(c, p)
	c.JSON(resp, err)
}

// RegisterGsBMServer Register the blademaster route
func RegisterGsBMServer(e *bm.Engine, server GsBMServer) {
	GsSvc = server
	e.POST("/gs/OnUpdateKeyValues", gsOnUpdateKeyValues)
	e.POST("/gs/OnLoadValues", gsOnLoadValues)
	e.POST("/gs/OnSetPlayerIP", gsOnSetPlayerIP)
	e.POST("/gs/OnGetPlayerIP", gsOnGetPlayerIP)
	e.GET("/gs/OnTurntableRecord", gsOnTurntableRecord)
	e.GET("/gs/OnTurntableRecordLog", gsOnTurntableRecordLog)
	e.GET("/gs/OnTurntableRecordInster", gsOnTurntableRecordInster)
}
