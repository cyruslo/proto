// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HangUpErrCode int32

const (
	HangUpErrCode_ThingNotModify           HangUpErrCode = 0
	HangUpErrCode_SetLoginInfoFail         HangUpErrCode = 30001
	HangUpErrCode_UserNotHangUp            HangUpErrCode = 30002
	HangUpErrCode_PushOffOnline            HangUpErrCode = 30003
	HangUpErrCode_OffOnline                HangUpErrCode = 30004
	HangUpErrCode_GetLockFail              HangUpErrCode = 30005
	HangUpErrCode_GetConfigFail            HangUpErrCode = 30006
	HangUpErrCode_GetRewardFail            HangUpErrCode = 30007
	HangUpErrCode_ClientGetHangupIPFail    HangUpErrCode = 30008
	HangUpErrCode_HangupWorkOrNotGetReward HangUpErrCode = 30009
	HangUpErrCode_RewardHaveGet            HangUpErrCode = 30010
	HangUpErrCode_FinishHangUpFail         HangUpErrCode = 30012
)

var HangUpErrCode_name = map[int32]string{
	0:     "ThingNotModify",
	30001: "SetLoginInfoFail",
	30002: "UserNotHangUp",
	30003: "PushOffOnline",
	30004: "OffOnline",
	30005: "GetLockFail",
	30006: "GetConfigFail",
	30007: "GetRewardFail",
	30008: "ClientGetHangupIPFail",
	30009: "HangupWorkOrNotGetReward",
	30010: "RewardHaveGet",
	30012: "FinishHangUpFail",
}

var HangUpErrCode_value = map[string]int32{
	"ThingNotModify":           0,
	"SetLoginInfoFail":         30001,
	"UserNotHangUp":            30002,
	"PushOffOnline":            30003,
	"OffOnline":                30004,
	"GetLockFail":              30005,
	"GetConfigFail":            30006,
	"GetRewardFail":            30007,
	"ClientGetHangupIPFail":    30008,
	"HangupWorkOrNotGetReward": 30009,
	"RewardHaveGet":            30010,
	"FinishHangUpFail":         30012,
}

func (x HangUpErrCode) String() string {
	return proto.EnumName(HangUpErrCode_name, int32(x))
}

func (HangUpErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type HangUpStatusCode int32

const (
	HangUpStatusCode_HangUpStatusInitCode HangUpStatusCode = 0
	HangUpStatusCode_HangUpNot            HangUpStatusCode = 1
	HangUpStatusCode_HangUpWork           HangUpStatusCode = 2
	HangUpStatusCode_HangUpFinish         HangUpStatusCode = 3
	HangUpStatusCode_HangUpEnd            HangUpStatusCode = 4
)

var HangUpStatusCode_name = map[int32]string{
	0: "HangUpStatusInitCode",
	1: "HangUpNot",
	2: "HangUpWork",
	3: "HangUpFinish",
	4: "HangUpEnd",
}

var HangUpStatusCode_value = map[string]int32{
	"HangUpStatusInitCode": 0,
	"HangUpNot":            1,
	"HangUpWork":           2,
	"HangUpFinish":         3,
	"HangUpEnd":            4,
}

func (x HangUpStatusCode) String() string {
	return proto.EnumName(HangUpStatusCode_name, int32(x))
}

func (HangUpStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type PlayerLoginReq struct {
	PlayerID             int64    `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	GroupID              int32    `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID" form:"GroupID" validate:"required"`
	ServerID             int32    `protobuf:"varint,4,opt,name=ServerID,proto3" json:"ServerID" form:"ServerID" validate:"required"`
	IP                   string   `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP" form:"IP" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerLoginReq) Reset()         { *m = PlayerLoginReq{} }
func (m *PlayerLoginReq) String() string { return proto.CompactTextString(m) }
func (*PlayerLoginReq) ProtoMessage()    {}
func (*PlayerLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *PlayerLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerLoginReq.Merge(m, src)
}
func (m *PlayerLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayerLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerLoginReq proto.InternalMessageInfo

type PlayerLoginRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerLoginRsp) Reset()         { *m = PlayerLoginRsp{} }
func (m *PlayerLoginRsp) String() string { return proto.CompactTextString(m) }
func (*PlayerLoginRsp) ProtoMessage()    {}
func (*PlayerLoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *PlayerLoginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerLoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerLoginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerLoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerLoginRsp.Merge(m, src)
}
func (m *PlayerLoginRsp) XXX_Size() int {
	return m.Size()
}
func (m *PlayerLoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerLoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerLoginRsp proto.InternalMessageInfo

type OffOnlineReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	Ratio                int32    `protobuf:"varint,3,opt,name=Ratio,proto3" json:"Ratio" form:"Ratio" validate:"required"`
	LongTime             int64    `protobuf:"varint,4,opt,name=LongTime,proto3" json:"LongTime" form:"LongTime" validate:"required"`
	Money                int64    `protobuf:"varint,5,opt,name=Money,proto3" json:"Money" form:"Money" validate:"required"`
	IslandID             int32    `protobuf:"varint,6,opt,name=IslandID,proto3" json:"IslandID" form:"IslandID" validate:"required"`
	WinLimit             int64    `protobuf:"varint,7,opt,name=WinLimit,proto3" json:"WinLimit" form:"WinLimit"`
	LoseLimit            int64    `protobuf:"varint,8,opt,name=LoseLimit,proto3" json:"LoseLimit" form:"LoseLimit"`
	MouseID              []int32  `protobuf:"varint,9,rep,packed,name=MouseID,proto3" json:"MouseID" form:"MouseID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OffOnlineReq) Reset()         { *m = OffOnlineReq{} }
func (m *OffOnlineReq) String() string { return proto.CompactTextString(m) }
func (*OffOnlineReq) ProtoMessage()    {}
func (*OffOnlineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *OffOnlineReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffOnlineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffOnlineReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffOnlineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffOnlineReq.Merge(m, src)
}
func (m *OffOnlineReq) XXX_Size() int {
	return m.Size()
}
func (m *OffOnlineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OffOnlineReq.DiscardUnknown(m)
}

var xxx_messageInfo_OffOnlineReq proto.InternalMessageInfo

type OffOnlineRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OffOnlineRsp) Reset()         { *m = OffOnlineRsp{} }
func (m *OffOnlineRsp) String() string { return proto.CompactTextString(m) }
func (*OffOnlineRsp) ProtoMessage()    {}
func (*OffOnlineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *OffOnlineRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffOnlineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffOnlineRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffOnlineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffOnlineRsp.Merge(m, src)
}
func (m *OffOnlineRsp) XXX_Size() int {
	return m.Size()
}
func (m *OffOnlineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_OffOnlineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_OffOnlineRsp proto.InternalMessageInfo

type QueryHangupDataReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryHangupDataReq) Reset()         { *m = QueryHangupDataReq{} }
func (m *QueryHangupDataReq) String() string { return proto.CompactTextString(m) }
func (*QueryHangupDataReq) ProtoMessage()    {}
func (*QueryHangupDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *QueryHangupDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHangupDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHangupDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHangupDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHangupDataReq.Merge(m, src)
}
func (m *QueryHangupDataReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryHangupDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHangupDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHangupDataReq proto.InternalMessageInfo

type QueryHangupDataRsp struct {
	IslandDataList       []*IslandData   `protobuf:"bytes,1,rep,name=IslandDataList,proto3" json:"IslandDataList" form:"IslandDataList" `
	IslandStatusList     []*IslandStatus `protobuf:"bytes,2,rep,name=IslandStatusList,proto3" json:"IslandStatusList" form:"IslandStatusList" `
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryHangupDataRsp) Reset()         { *m = QueryHangupDataRsp{} }
func (m *QueryHangupDataRsp) String() string { return proto.CompactTextString(m) }
func (*QueryHangupDataRsp) ProtoMessage()    {}
func (*QueryHangupDataRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *QueryHangupDataRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHangupDataRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHangupDataRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHangupDataRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHangupDataRsp.Merge(m, src)
}
func (m *QueryHangupDataRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryHangupDataRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHangupDataRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHangupDataRsp proto.InternalMessageInfo

type IslandData struct {
	IslandID             int32    `protobuf:"varint,1,opt,name=IslandID,proto3" json:"IslandID" form:"IslandID"`
	LongTimeMin          int64    `protobuf:"varint,2,opt,name=LongTimeMin,proto3" json:"LongTimeMin" form:"LongTimeMin"`
	LongTimeMax          int64    `protobuf:"varint,3,opt,name=LongTimeMax,proto3" json:"LongTimeMax" form:"LongTimeMax" `
	GoldMin              int64    `protobuf:"varint,4,opt,name=GoldMin,proto3" json:"GoldMin" form:"GoldMin" `
	GoldMax              int64    `protobuf:"varint,5,opt,name=GoldMax,proto3" json:"GoldMax" form:"GoldMax" `
	RatioList            []int32  `protobuf:"varint,6,rep,packed,name=RatioList,proto3" json:"RatioList" form:"RatioList" `
	MouseID              []int32  `protobuf:"varint,7,rep,packed,name=MouseID,proto3" json:"MouseID" form:"MouseID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IslandData) Reset()         { *m = IslandData{} }
func (m *IslandData) String() string { return proto.CompactTextString(m) }
func (*IslandData) ProtoMessage()    {}
func (*IslandData) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *IslandData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IslandData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IslandData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IslandData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IslandData.Merge(m, src)
}
func (m *IslandData) XXX_Size() int {
	return m.Size()
}
func (m *IslandData) XXX_DiscardUnknown() {
	xxx_messageInfo_IslandData.DiscardUnknown(m)
}

var xxx_messageInfo_IslandData proto.InternalMessageInfo

type EndOffOnlineReq struct {
	GameID               int32         `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	GroupID              int32         `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID" form:"GroupID" validate:"required"`
	ServerID             int32         `protobuf:"varint,3,opt,name=ServerID,proto3" json:"ServerID" form:"ServerID" validate:"required"`
	PlayerID             int64         `protobuf:"varint,4,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	Ratio                int32         `protobuf:"varint,5,opt,name=Ratio,proto3" json:"Ratio" form:"Ratio" validate:"required"`
	OffTime              int64         `protobuf:"varint,6,opt,name=OffTime,proto3" json:"OffTime" form:"OffTime"`
	Money                int64         `protobuf:"varint,7,opt,name=Money,proto3" json:"Money" form:"Money"`
	Consume              int64         `protobuf:"varint,8,opt,name=Consume,proto3" json:"Consume" form:"Consume"`
	Income               int64         `protobuf:"varint,9,opt,name=Income,proto3" json:"Income" form:"Income"`
	MouserInfo           []*DetailInfo `protobuf:"bytes,10,rep,name=MouserInfo,proto3" json:"MouserInfo" form:"MouserInfo"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EndOffOnlineReq) Reset()         { *m = EndOffOnlineReq{} }
func (m *EndOffOnlineReq) String() string { return proto.CompactTextString(m) }
func (*EndOffOnlineReq) ProtoMessage()    {}
func (*EndOffOnlineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *EndOffOnlineReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndOffOnlineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndOffOnlineReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndOffOnlineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndOffOnlineReq.Merge(m, src)
}
func (m *EndOffOnlineReq) XXX_Size() int {
	return m.Size()
}
func (m *EndOffOnlineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EndOffOnlineReq.DiscardUnknown(m)
}

var xxx_messageInfo_EndOffOnlineReq proto.InternalMessageInfo

type EndOffOnlineRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndOffOnlineRsp) Reset()         { *m = EndOffOnlineRsp{} }
func (m *EndOffOnlineRsp) String() string { return proto.CompactTextString(m) }
func (*EndOffOnlineRsp) ProtoMessage()    {}
func (*EndOffOnlineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *EndOffOnlineRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndOffOnlineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndOffOnlineRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndOffOnlineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndOffOnlineRsp.Merge(m, src)
}
func (m *EndOffOnlineRsp) XXX_Size() int {
	return m.Size()
}
func (m *EndOffOnlineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EndOffOnlineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EndOffOnlineRsp proto.InternalMessageInfo

type DetailInfo struct {
	MonsterID            int32    `protobuf:"varint,1,opt,name=MonsterID,proto3" json:"MonsterID" form:"MonsterID"`
	IncomeMoney          int64    `protobuf:"varint,2,opt,name=IncomeMoney,proto3" json:"IncomeMoney" form:"IncomeMoney"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetailInfo) Reset()         { *m = DetailInfo{} }
func (m *DetailInfo) String() string { return proto.CompactTextString(m) }
func (*DetailInfo) ProtoMessage()    {}
func (*DetailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *DetailInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetailInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetailInfo.Merge(m, src)
}
func (m *DetailInfo) XXX_Size() int {
	return m.Size()
}
func (m *DetailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DetailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DetailInfo proto.InternalMessageInfo

type GetAwardReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	IslandID             int32    `protobuf:"varint,3,opt,name=IslandID,proto3" json:"IslandID" form:"IslandID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAwardReq) Reset()         { *m = GetAwardReq{} }
func (m *GetAwardReq) String() string { return proto.CompactTextString(m) }
func (*GetAwardReq) ProtoMessage()    {}
func (*GetAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *GetAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAwardReq.Merge(m, src)
}
func (m *GetAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAwardReq proto.InternalMessageInfo

type GetAwardRsp struct {
	PlayerID             int64    `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID"`
	Ratio                int32    `protobuf:"varint,2,opt,name=Ratio,proto3" json:"Ratio" form:"Ratio"`
	OffTime              int64    `protobuf:"varint,3,opt,name=OffTime,proto3" json:"OffTime" form:"OffTime"`
	Money                int64    `protobuf:"varint,4,opt,name=Money,proto3" json:"Money" form:"Money" `
	Consume              int64    `protobuf:"varint,5,opt,name=Consume,proto3" json:"Consume" form:"Consume" `
	Income               int64    `protobuf:"varint,6,opt,name=Income,proto3" json:"Income" form:"Income" `
	BetAmount            int64    `protobuf:"varint,7,opt,name=BetAmount,proto3" json:"BetAmount" form:"BetAmount" `
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAwardRsp) Reset()         { *m = GetAwardRsp{} }
func (m *GetAwardRsp) String() string { return proto.CompactTextString(m) }
func (*GetAwardRsp) ProtoMessage()    {}
func (*GetAwardRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *GetAwardRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAwardRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAwardRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAwardRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAwardRsp.Merge(m, src)
}
func (m *GetAwardRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetAwardRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAwardRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAwardRsp proto.InternalMessageInfo

type FinishHangUpReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	IslandID             int32    `protobuf:"varint,3,opt,name=IslandID,proto3" json:"IslandID" form:"IslandID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishHangUpReq) Reset()         { *m = FinishHangUpReq{} }
func (m *FinishHangUpReq) String() string { return proto.CompactTextString(m) }
func (*FinishHangUpReq) ProtoMessage()    {}
func (*FinishHangUpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *FinishHangUpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishHangUpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishHangUpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishHangUpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishHangUpReq.Merge(m, src)
}
func (m *FinishHangUpReq) XXX_Size() int {
	return m.Size()
}
func (m *FinishHangUpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishHangUpReq.DiscardUnknown(m)
}

var xxx_messageInfo_FinishHangUpReq proto.InternalMessageInfo

type FinishHangUpRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishHangUpRsp) Reset()         { *m = FinishHangUpRsp{} }
func (m *FinishHangUpRsp) String() string { return proto.CompactTextString(m) }
func (*FinishHangUpRsp) ProtoMessage()    {}
func (*FinishHangUpRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *FinishHangUpRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishHangUpRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishHangUpRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishHangUpRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishHangUpRsp.Merge(m, src)
}
func (m *FinishHangUpRsp) XXX_Size() int {
	return m.Size()
}
func (m *FinishHangUpRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishHangUpRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FinishHangUpRsp proto.InternalMessageInfo

type QueryIslandStatusReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryIslandStatusReq) Reset()         { *m = QueryIslandStatusReq{} }
func (m *QueryIslandStatusReq) String() string { return proto.CompactTextString(m) }
func (*QueryIslandStatusReq) ProtoMessage()    {}
func (*QueryIslandStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *QueryIslandStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIslandStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIslandStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIslandStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIslandStatusReq.Merge(m, src)
}
func (m *QueryIslandStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryIslandStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIslandStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIslandStatusReq proto.InternalMessageInfo

type QueryIslandStatusRsp struct {
	IslandStatusList     []*IslandStatus `protobuf:"bytes,1,rep,name=IslandStatusList,proto3" json:"IslandStatusList"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryIslandStatusRsp) Reset()         { *m = QueryIslandStatusRsp{} }
func (m *QueryIslandStatusRsp) String() string { return proto.CompactTextString(m) }
func (*QueryIslandStatusRsp) ProtoMessage()    {}
func (*QueryIslandStatusRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *QueryIslandStatusRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIslandStatusRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIslandStatusRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIslandStatusRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIslandStatusRsp.Merge(m, src)
}
func (m *QueryIslandStatusRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryIslandStatusRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIslandStatusRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIslandStatusRsp proto.InternalMessageInfo

type IslandStatus struct {
	IslandID             int32            `protobuf:"varint,1,opt,name=IslandID,proto3" json:"IslandID"`
	IslandStatus         HangUpStatusCode `protobuf:"varint,2,opt,name=IslandStatus,proto3,enum=hangup.service.v1.HangUpStatusCode" json:"IslandStatus"`
	HangupIP             string           `protobuf:"bytes,3,opt,name=HangupIP,proto3" json:"HangupIP"`
	HangupTime           int64            `protobuf:"varint,4,opt,name=HangupTime,proto3" json:"HangupTime"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IslandStatus) Reset()         { *m = IslandStatus{} }
func (m *IslandStatus) String() string { return proto.CompactTextString(m) }
func (*IslandStatus) ProtoMessage()    {}
func (*IslandStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *IslandStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IslandStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IslandStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IslandStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IslandStatus.Merge(m, src)
}
func (m *IslandStatus) XXX_Size() int {
	return m.Size()
}
func (m *IslandStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IslandStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IslandStatus proto.InternalMessageInfo

type GetHangupResultReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID" validate:"required"`
	IslandID             int32    `protobuf:"varint,3,opt,name=IslandID,proto3" json:"IslandID" form:"IslandID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHangupResultReq) Reset()         { *m = GetHangupResultReq{} }
func (m *GetHangupResultReq) String() string { return proto.CompactTextString(m) }
func (*GetHangupResultReq) ProtoMessage()    {}
func (*GetHangupResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *GetHangupResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHangupResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHangupResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHangupResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHangupResultReq.Merge(m, src)
}
func (m *GetHangupResultReq) XXX_Size() int {
	return m.Size()
}
func (m *GetHangupResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHangupResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetHangupResultReq proto.InternalMessageInfo

type GetHangupResultRsp struct {
	PlayerID             int64    `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID" form:"PlayerID"`
	Ratio                int32    `protobuf:"varint,2,opt,name=Ratio,proto3" json:"Ratio" form:"Ratio"`
	OffTime              int64    `protobuf:"varint,3,opt,name=OffTime,proto3" json:"OffTime" form:"OffTime"`
	Money                int64    `protobuf:"varint,4,opt,name=Money,proto3" json:"Money" form:"Money" `
	Consume              int64    `protobuf:"varint,5,opt,name=Consume,proto3" json:"Consume" form:"Consume" `
	Income               int64    `protobuf:"varint,6,opt,name=Income,proto3" json:"Income" form:"Income" `
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHangupResultRsp) Reset()         { *m = GetHangupResultRsp{} }
func (m *GetHangupResultRsp) String() string { return proto.CompactTextString(m) }
func (*GetHangupResultRsp) ProtoMessage()    {}
func (*GetHangupResultRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *GetHangupResultRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHangupResultRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHangupResultRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHangupResultRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHangupResultRsp.Merge(m, src)
}
func (m *GetHangupResultRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetHangupResultRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHangupResultRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetHangupResultRsp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("hangup.service.v1.HangUpErrCode", HangUpErrCode_name, HangUpErrCode_value)
	proto.RegisterEnum("hangup.service.v1.HangUpStatusCode", HangUpStatusCode_name, HangUpStatusCode_value)
	proto.RegisterType((*PlayerLoginReq)(nil), "hangup.service.v1.PlayerLoginReq")
	proto.RegisterType((*PlayerLoginRsp)(nil), "hangup.service.v1.PlayerLoginRsp")
	proto.RegisterType((*OffOnlineReq)(nil), "hangup.service.v1.OffOnlineReq")
	proto.RegisterType((*OffOnlineRsp)(nil), "hangup.service.v1.OffOnlineRsp")
	proto.RegisterType((*QueryHangupDataReq)(nil), "hangup.service.v1.QueryHangupDataReq")
	proto.RegisterType((*QueryHangupDataRsp)(nil), "hangup.service.v1.QueryHangupDataRsp")
	proto.RegisterType((*IslandData)(nil), "hangup.service.v1.IslandData")
	proto.RegisterType((*EndOffOnlineReq)(nil), "hangup.service.v1.EndOffOnlineReq")
	proto.RegisterType((*EndOffOnlineRsp)(nil), "hangup.service.v1.EndOffOnlineRsp")
	proto.RegisterType((*DetailInfo)(nil), "hangup.service.v1.DetailInfo")
	proto.RegisterType((*GetAwardReq)(nil), "hangup.service.v1.GetAwardReq")
	proto.RegisterType((*GetAwardRsp)(nil), "hangup.service.v1.GetAwardRsp")
	proto.RegisterType((*FinishHangUpReq)(nil), "hangup.service.v1.FinishHangUpReq")
	proto.RegisterType((*FinishHangUpRsp)(nil), "hangup.service.v1.FinishHangUpRsp")
	proto.RegisterType((*QueryIslandStatusReq)(nil), "hangup.service.v1.QueryIslandStatusReq")
	proto.RegisterType((*QueryIslandStatusRsp)(nil), "hangup.service.v1.QueryIslandStatusRsp")
	proto.RegisterType((*IslandStatus)(nil), "hangup.service.v1.IslandStatus")
	proto.RegisterType((*GetHangupResultReq)(nil), "hangup.service.v1.GetHangupResultReq")
	proto.RegisterType((*GetHangupResultRsp)(nil), "hangup.service.v1.GetHangupResultRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0xdb, 0xc6,
	0x12, 0x37, 0x25, 0x7f, 0x69, 0x23, 0x4b, 0xf4, 0xc6, 0xcf, 0x4f, 0x96, 0x13, 0x51, 0xd9, 0x20,
	0x2f, 0x46, 0xf0, 0x22, 0xe5, 0xe3, 0xe1, 0x39, 0xc8, 0x3b, 0xbc, 0x44, 0xb6, 0xa3, 0x08, 0xb5,
	0x63, 0x95, 0x49, 0x10, 0xb4, 0x37, 0xda, 0x5a, 0xc9, 0x44, 0x24, 0x92, 0x11, 0x29, 0xd7, 0x3e,
	0x14, 0x68, 0x7b, 0xca, 0xa5, 0xa7, 0x02, 0x45, 0x2e, 0x45, 0xff, 0x83, 0xa2, 0xdf, 0x5f, 0xe8,
	0x1f, 0x10, 0xb4, 0x97, 0x02, 0x3d, 0x97, 0x68, 0xd3, 0x9e, 0x08, 0xf4, 0xa2, 0x53, 0x0f, 0x05,
	0x5a, 0x70, 0x97, 0xcb, 0x5d, 0x51, 0x54, 0xe2, 0x22, 0x2e, 0x10, 0x20, 0xbd, 0x89, 0xbf, 0x99,
	0x9d, 0x99, 0xe5, 0xcc, 0x6f, 0x66, 0x44, 0x90, 0xd2, 0x2c, 0xbd, 0x64, 0x75, 0x4d, 0xc7, 0x84,
	0xb3, 0x3b, 0x9a, 0xd1, 0xea, 0x59, 0x25, 0x1b, 0x77, 0x77, 0xf5, 0x6d, 0x5c, 0xda, 0x3d, 0x9f,
	0x3f, 0xdb, 0xd2, 0x9d, 0x9d, 0xde, 0x56, 0x69, 0xdb, 0xec, 0x94, 0x5b, 0x66, 0xcb, 0x2c, 0x13,
	0xcd, 0xad, 0x5e, 0x93, 0x3c, 0x91, 0x07, 0xf2, 0x8b, 0x5a, 0xc8, 0x1f, 0x6b, 0x99, 0x66, 0xab,
	0x8d, 0xcb, 0x9a, 0xa5, 0x97, 0x35, 0xc3, 0x30, 0x1d, 0xcd, 0xd1, 0x4d, 0xc3, 0x0e, 0xa4, 0x8b,
	0x81, 0x34, 0xb4, 0x81, 0x3b, 0x96, 0xb3, 0x4f, 0x85, 0xe8, 0xf5, 0x24, 0xc8, 0xd4, 0xdb, 0xda,
	0x3e, 0xee, 0xae, 0x9b, 0x2d, 0xdd, 0x50, 0xf1, 0x3d, 0xb8, 0x09, 0xa6, 0x29, 0x52, 0x5b, 0xcd,
	0x49, 0x45, 0x69, 0x29, 0x59, 0xb9, 0xe8, 0xb9, 0x4a, 0x88, 0xf5, 0x5d, 0xe5, 0x64, 0xd3, 0xec,
	0x76, 0x2e, 0x23, 0x86, 0xa0, 0xe2, 0xae, 0xd6, 0xd6, 0x1b, 0x9a, 0x83, 0x2f, 0xa3, 0x2e, 0xbe,
	0xd7, 0xd3, 0xbb, 0xb8, 0x81, 0xd4, 0xf0, 0x00, 0xac, 0x82, 0xc9, 0xaa, 0xd6, 0xc1, 0xb5, 0xd5,
	0x5c, 0xa2, 0x28, 0x2d, 0x4d, 0x54, 0xca, 0x9e, 0xab, 0x04, 0x48, 0xdf, 0x55, 0x4e, 0x50, 0x63,
	0xf4, 0x39, 0xde, 0x54, 0xa0, 0x0c, 0x5f, 0x00, 0x53, 0xd5, 0xae, 0xd9, 0xb3, 0x6a, 0xab, 0xb9,
	0x24, 0xb1, 0x74, 0xde, 0x73, 0x15, 0x06, 0xf5, 0x5d, 0x05, 0x05, 0xa6, 0x28, 0x10, 0x6f, 0x8b,
	0xa9, 0xfb, 0xd7, 0xbc, 0x89, 0xbb, 0xbb, 0xe4, 0x9a, 0xe3, 0xc4, 0x1a, 0xb9, 0x26, 0xc3, 0xf8,
	0x35, 0x19, 0x32, 0xe2, 0x9a, 0x4c, 0x0c, 0x97, 0x41, 0xa2, 0x56, 0xcf, 0x4d, 0x14, 0xa5, 0xa5,
	0x54, 0xe5, 0xb4, 0xe7, 0x2a, 0x89, 0x5a, 0xbd, 0xef, 0x2a, 0xc7, 0xa9, 0x91, 0x5a, 0x3d, 0xfe,
	0x78, 0xa2, 0x56, 0x47, 0xf2, 0x60, 0x0a, 0x6c, 0x0b, 0xbd, 0x3b, 0x01, 0xd2, 0x9b, 0xcd, 0xe6,
	0xa6, 0xd1, 0xd6, 0x0d, 0xec, 0xe7, 0x84, 0xbf, 0x42, 0xe9, 0xe9, 0x5e, 0xa1, 0x98, 0xdc, 0xc4,
	0x61, 0x24, 0x77, 0x05, 0x4c, 0xa8, 0x7e, 0xb9, 0x05, 0x19, 0x39, 0xeb, 0xb9, 0x0a, 0x05, 0xfa,
	0xae, 0x52, 0xa4, 0xa6, 0xc8, 0x63, 0xbc, 0x1d, 0xaa, 0xea, 0x47, 0xb5, 0x6e, 0x1a, 0xad, 0x5b,
	0x7a, 0x07, 0x93, 0x5c, 0x04, 0x51, 0x31, 0x8c, 0x47, 0xc5, 0x90, 0x11, 0x51, 0x31, 0xb1, 0x1f,
	0xd5, 0x86, 0x69, 0xe0, 0x7d, 0x92, 0x8e, 0x24, 0x8d, 0x8a, 0x00, 0x3c, 0x2a, 0xf2, 0x38, 0x22,
	0x2a, 0x22, 0xf3, 0xa3, 0xaa, 0xd9, 0x6d, 0xcd, 0x68, 0xd4, 0x56, 0x73, 0x93, 0xbc, 0x42, 0x18,
	0xc6, 0xa3, 0x62, 0xc8, 0x88, 0xa8, 0x98, 0x18, 0xfe, 0x0f, 0x4c, 0xdf, 0xd1, 0x8d, 0x75, 0xbd,
	0xa3, 0x3b, 0xb9, 0x29, 0x12, 0x98, 0xe2, 0x1b, 0x64, 0x58, 0xdf, 0x55, 0xb2, 0xd4, 0x20, 0x43,
	0x90, 0x1a, 0x0a, 0xe1, 0xff, 0x41, 0x6a, 0xdd, 0xb4, 0x31, 0x3d, 0x3d, 0x4d, 0x4e, 0x9f, 0xf0,
	0x5c, 0x85, 0x83, 0x7d, 0x57, 0x91, 0xd9, 0x5b, 0x0a, 0x20, 0xa4, 0x72, 0xb1, 0xcf, 0x9e, 0x0d,
	0xb3, 0x67, 0xfb, 0x45, 0x94, 0x2a, 0x26, 0x19, 0x7b, 0x02, 0x88, 0xb3, 0x27, 0x00, 0x46, 0xb0,
	0x87, 0x49, 0x33, 0x62, 0x81, 0xda, 0x16, 0x7a, 0x4f, 0x02, 0xf0, 0xc5, 0x1e, 0xee, 0xee, 0x5f,
	0x27, 0xcd, 0x6c, 0x55, 0x73, 0xb4, 0x67, 0xba, 0x6e, 0xd1, 0xfd, 0xc4, 0x70, 0xc0, 0xb6, 0x05,
	0x6d, 0x90, 0xa1, 0xe9, 0xf2, 0x81, 0x75, 0xdd, 0x76, 0x72, 0x52, 0x31, 0xb9, 0x74, 0xe4, 0xc2,
	0xf1, 0xd2, 0x50, 0x97, 0x2e, 0x71, 0xc5, 0xca, 0xbf, 0x3d, 0x57, 0x89, 0x1c, 0xec, 0xbb, 0xca,
	0xbc, 0x58, 0x1e, 0x0c, 0x47, 0x45, 0x35, 0xa2, 0x09, 0x5f, 0x05, 0x32, 0x45, 0x6e, 0x3a, 0x9a,
	0xd3, 0xb3, 0x89, 0xdb, 0x04, 0x71, 0xab, 0x8c, 0x74, 0x4b, 0x55, 0x2b, 0xe7, 0x3c, 0x57, 0x19,
	0x3a, 0xdc, 0x77, 0x95, 0x9c, 0xe8, 0x9a, 0x4b, 0x50, 0x51, 0x1d, 0xd2, 0x46, 0xdf, 0x24, 0x01,
	0xe0, 0x11, 0xf9, 0x55, 0x1a, 0x96, 0x3d, 0xcd, 0x9a, 0x12, 0x29, 0xfb, 0x6c, 0xa4, 0xec, 0x85,
	0x12, 0xaf, 0x82, 0x23, 0x8c, 0x84, 0x1b, 0xba, 0x11, 0xa4, 0xea, 0x94, 0xe7, 0x2a, 0x22, 0xdc,
	0x77, 0x15, 0x38, 0xc8, 0xe7, 0x0d, 0xdd, 0x40, 0xaa, 0xa8, 0x02, 0xaf, 0x0b, 0x86, 0xb4, 0x3d,
	0xd2, 0x5d, 0x92, 0x95, 0x7f, 0x0d, 0x18, 0xd2, 0xf6, 0xfa, 0xae, 0x72, 0x34, 0x62, 0x48, 0xdb,
	0x43, 0x45, 0x55, 0xd4, 0x81, 0x97, 0xc0, 0x54, 0xd5, 0x6c, 0x37, 0xfc, 0x70, 0x68, 0x6f, 0x29,
	0x90, 0xa9, 0x41, 0x21, 0x7e, 0x9b, 0x00, 0x40, 0x45, 0x95, 0xc9, 0xc2, 0x93, 0xda, 0x5e, 0xd0,
	0x47, 0xf8, 0x49, 0xe2, 0x5b, 0x3c, 0x49, 0xfc, 0x32, 0x19, 0xbc, 0x02, 0x52, 0xa4, 0xb3, 0x91,
	0x54, 0x4e, 0x12, 0xb6, 0x21, 0x9f, 0xac, 0x21, 0xd8, 0x77, 0x95, 0x59, 0xa1, 0x3b, 0x06, 0xb9,
	0xe1, 0x72, 0xb8, 0xcc, 0xd9, 0x3a, 0x45, 0xce, 0x1f, 0x1f, 0x64, 0x6b, 0x66, 0x90, 0xad, 0x9c,
	0x99, 0x5f, 0x4f, 0x80, 0xec, 0x9a, 0xd1, 0xf8, 0x6b, 0xc6, 0x87, 0x30, 0x81, 0x13, 0x87, 0x3a,
	0x81, 0x93, 0x87, 0x31, 0x81, 0xc5, 0x26, 0x31, 0x7e, 0xa8, 0xc3, 0x6d, 0xe2, 0x29, 0x86, 0xdb,
	0x32, 0x98, 0xda, 0x6c, 0x36, 0xc9, 0x6c, 0x9b, 0x24, 0x41, 0x91, 0x4c, 0x06, 0x10, 0xcf, 0x64,
	0x00, 0x20, 0x95, 0x89, 0x60, 0x99, 0x0d, 0x31, 0x3a, 0x2b, 0x16, 0xc4, 0x21, 0x96, 0x16, 0x87,
	0x18, 0x1b, 0x58, 0xcb, 0x60, 0x6a, 0xc5, 0x34, 0xec, 0x5e, 0x07, 0x07, 0x03, 0x82, 0x78, 0x0a,
	0x20, 0xee, 0x29, 0x00, 0x90, 0xca, 0x44, 0xf0, 0x22, 0x98, 0xac, 0x19, 0xdb, 0x66, 0x07, 0xe7,
	0x52, 0xe4, 0xdc, 0xa2, 0x5f, 0x1f, 0x14, 0xe9, 0xbb, 0xca, 0x4c, 0x40, 0x77, 0xf2, 0x8c, 0xd4,
	0x40, 0x00, 0xb7, 0x00, 0x20, 0x35, 0xd7, 0xad, 0x19, 0x4d, 0x33, 0x07, 0x46, 0xb6, 0xc9, 0x55,
	0xec, 0x68, 0x7a, 0xdb, 0x57, 0xaa, 0x9c, 0xf4, 0x5c, 0x45, 0x38, 0xc4, 0x49, 0xc0, 0x31, 0xa4,
	0x0a, 0x0a, 0x68, 0x36, 0x52, 0xcb, 0xb6, 0x85, 0xde, 0x96, 0x00, 0xe0, 0x26, 0xfd, 0xb1, 0xb8,
	0x61, 0x1a, 0xb6, 0x13, 0xae, 0xab, 0x13, 0x74, 0x2c, 0x86, 0x20, 0x1f, 0x8b, 0x21, 0x84, 0x54,
	0x2e, 0xf6, 0x3b, 0x16, 0xbd, 0x10, 0x7d, 0xd7, 0x42, 0xc7, 0x12, 0x60, 0xde, 0xb1, 0x04, 0x10,
	0xa9, 0xa2, 0x0a, 0xfa, 0x55, 0x02, 0x47, 0xaa, 0xd8, 0xb9, 0xfa, 0x8a, 0xd6, 0x6d, 0x3c, 0xdb,
	0x3b, 0x9b, 0xb8, 0xd8, 0x24, 0x0f, 0x61, 0xb1, 0x41, 0x0f, 0x92, 0xc2, 0xd5, 0x6d, 0xcb, 0x1f,
	0x21, 0x91, 0xbf, 0x10, 0x4a, 0x24, 0xe2, 0x6c, 0x24, 0x62, 0x21, 0xba, 0x32, 0x23, 0x1d, 0xed,
	0x30, 0x0b, 0x22, 0xe9, 0xd2, 0x22, 0xe9, 0x62, 0x08, 0x96, 0xfc, 0x53, 0x04, 0x3b, 0xc7, 0x08,
	0x46, 0x9b, 0x45, 0x5e, 0x24, 0xd8, 0xcc, 0xc0, 0x96, 0xc8, 0x18, 0x76, 0x89, 0x33, 0x4c, 0x98,
	0x08, 0x9c, 0x61, 0xd9, 0x41, 0x86, 0x15, 0x39, 0xc5, 0xfe, 0x13, 0x52, 0x8c, 0x36, 0x81, 0x63,
	0x03, 0x14, 0xcb, 0x0c, 0x50, 0xac, 0x18, 0x72, 0xec, 0x0a, 0x48, 0x55, 0xb0, 0x73, 0xb5, 0x63,
	0xf6, 0x0c, 0xb6, 0x32, 0x92, 0x39, 0x12, 0x82, 0x9c, 0x42, 0x21, 0xe4, 0xcf, 0x11, 0xfe, 0xf0,
	0x9b, 0x04, 0xb2, 0xd7, 0x74, 0x43, 0xb7, 0x77, 0xfc, 0x45, 0xe7, 0xb6, 0xf5, 0x9c, 0x55, 0xe6,
	0x6c, 0xe4, 0xf6, 0xb6, 0x85, 0xde, 0x97, 0xc0, 0x1c, 0xd9, 0xfc, 0xc4, 0x45, 0xe8, 0xd9, 0x5e,
	0x56, 0xf7, 0xe3, 0x22, 0xb6, 0x2d, 0xa8, 0xc5, 0x2c, 0x8e, 0xd2, 0xc1, 0x16, 0xc7, 0xb9, 0xb8,
	0xc5, 0x31, 0x66, 0x39, 0xfc, 0x45, 0x02, 0x69, 0x11, 0x84, 0x4b, 0x43, 0xeb, 0x61, 0x5a, 0x4c,
	0x91, 0xb0, 0x0b, 0xbe, 0x34, 0x78, 0x92, 0xbc, 0x8a, 0xcc, 0x85, 0x93, 0x31, 0x91, 0xd1, 0xe4,
	0x50, 0xb5, 0x15, 0xb3, 0x81, 0x2b, 0xb2, 0xe7, 0x2a, 0x03, 0x87, 0xd5, 0xa1, 0x20, 0xe8, 0xde,
	0x5e, 0xab, 0x93, 0x3a, 0x49, 0xd1, 0x20, 0x18, 0xa6, 0x86, 0xbf, 0x60, 0x09, 0x00, 0xfa, 0x5b,
	0xf8, 0x73, 0x99, 0xf1, 0xc7, 0x10, 0x47, 0x55, 0xe1, 0x37, 0xfa, 0x5d, 0x02, 0xb0, 0x8a, 0x1d,
	0x8a, 0xa8, 0xd8, 0xee, 0xb5, 0x9d, 0xe7, 0x8c, 0x32, 0xdf, 0x27, 0x86, 0xdf, 0xc0, 0xdf, 0x3d,
	0xfd, 0xd0, 0x7a, 0xfa, 0x99, 0x77, 0x12, 0x60, 0x86, 0x16, 0xfc, 0x5a, 0xb7, 0xeb, 0x57, 0x3b,
	0x84, 0x20, 0x73, 0x6b, 0x47, 0x37, 0x5a, 0x37, 0x4c, 0x67, 0xc3, 0x6c, 0xe8, 0xcd, 0x7d, 0x79,
	0x0c, 0xce, 0x03, 0xf9, 0x26, 0x76, 0xc8, 0x17, 0x21, 0x7f, 0xcf, 0xb9, 0xa6, 0xe9, 0x6d, 0xf9,
	0x03, 0x4f, 0x82, 0x47, 0xc1, 0xcc, 0x6d, 0x1b, 0x77, 0x6f, 0x98, 0x0e, 0xb5, 0x21, 0x7f, 0x48,
	0xc1, 0x7a, 0xcf, 0xde, 0x09, 0xf7, 0x24, 0xf9, 0x23, 0x4f, 0x82, 0x59, 0x90, 0xe2, 0xc0, 0xc7,
	0x9e, 0x04, 0x67, 0xc9, 0x90, 0x5e, 0x37, 0xb7, 0xef, 0x12, 0x6b, 0x9f, 0xd0, 0x83, 0x55, 0xec,
	0xac, 0x98, 0x46, 0x53, 0x6f, 0x11, 0xf0, 0xd3, 0x10, 0x54, 0xb1, 0x3f, 0xcd, 0x09, 0xf8, 0x99,
	0x27, 0xc1, 0x45, 0xf0, 0x8f, 0x95, 0xb6, 0x8e, 0x0d, 0x27, 0x2c, 0x8d, 0x5a, 0x9d, 0x08, 0x3f,
	0xf7, 0x24, 0x58, 0x00, 0x39, 0x8a, 0xdd, 0x31, 0xbb, 0x77, 0x37, 0xfd, 0xe0, 0x42, 0x03, 0xf2,
	0x17, 0xd4, 0x22, 0x7d, 0xba, 0xae, 0xed, 0xe2, 0x2a, 0x76, 0xe4, 0x2f, 0x3d, 0xc9, 0xbf, 0xa1,
	0xd8, 0x9a, 0x89, 0xb1, 0xaf, 0x3c, 0xe9, 0x4c, 0x1b, 0xc8, 0xd1, 0x7e, 0x00, 0x73, 0x60, 0x4e,
	0xc4, 0x6a, 0x86, 0xee, 0xf8, 0xb8, 0x3c, 0x06, 0x67, 0x40, 0x8a, 0x4a, 0x6e, 0x98, 0x8e, 0x2c,
	0xc1, 0x0c, 0xa5, 0xfb, 0x6d, 0x12, 0x89, 0x9c, 0x80, 0x32, 0x48, 0x07, 0xe6, 0x89, 0x2b, 0x39,
	0xc9, 0x0f, 0xac, 0x19, 0x0d, 0x79, 0xfc, 0xc2, 0x9b, 0x53, 0x60, 0x92, 0x36, 0x24, 0xf8, 0x5f,
	0x30, 0x5e, 0xd7, 0x8d, 0x16, 0x9c, 0x2f, 0xd1, 0x2f, 0xa6, 0x25, 0xf6, 0xc5, 0xb4, 0xb4, 0xd6,
	0xb1, 0x9c, 0xfd, 0xfc, 0x08, 0x1c, 0xee, 0x08, 0x2f, 0x1a, 0xc6, 0x35, 0x5e, 0xf1, 0xbf, 0x58,
	0xfe, 0xf1, 0x0a, 0xb6, 0x85, 0x16, 0xde, 0xf8, 0xee, 0xe7, 0xb7, 0x12, 0x47, 0xd1, 0x6c, 0x99,
	0x2a, 0x96, 0xb9, 0xf1, 0xd7, 0x24, 0x90, 0x8d, 0x7c, 0xb4, 0x80, 0xa7, 0x62, 0xec, 0x0d, 0x7f,
	0x89, 0xc9, 0x1f, 0x44, 0xcd, 0xb6, 0x90, 0x42, 0x9c, 0x2f, 0xa0, 0x7f, 0x32, 0xe7, 0x51, 0x77,
	0x0e, 0x48, 0x8b, 0x1b, 0x39, 0x44, 0x31, 0x76, 0x23, 0x7f, 0x3f, 0xf3, 0x4f, 0xd4, 0xb1, 0x2d,
	0x74, 0x8c, 0x38, 0x9e, 0x47, 0x73, 0xcc, 0xf1, 0x80, 0x97, 0x06, 0x98, 0x66, 0xfb, 0x25, 0x2c,
	0xc4, 0x58, 0x13, 0xf6, 0xee, 0xfc, 0x63, 0xe5, 0xb6, 0x85, 0x72, 0xc4, 0x13, 0x44, 0x32, 0xf3,
	0x14, 0x5a, 0x76, 0x40, 0x5a, 0xac, 0xc8, 0xd8, 0xbb, 0x45, 0x76, 0xa9, 0xfc, 0x13, 0x75, 0xe2,
	0xee, 0x36, 0xe0, 0xe5, 0xbe, 0x04, 0x66, 0x87, 0xa6, 0x3b, 0x3c, 0x3d, 0x2a, 0x5f, 0x91, 0xad,
	0x25, 0x7f, 0x30, 0x45, 0xdb, 0x42, 0x27, 0x48, 0x14, 0x8b, 0x68, 0x61, 0x20, 0xb5, 0x03, 0x4e,
	0xfd, 0xfa, 0x8a, 0xb4, 0xfe, 0xd8, 0xfa, 0x1a, 0x1e, 0x90, 0xf9, 0x83, 0xa8, 0xc5, 0xd5, 0x57,
	0x44, 0xa7, 0xb2, 0xf0, 0xf0, 0xc7, 0xc2, 0xd8, 0xc3, 0x47, 0x05, 0xe9, 0xdb, 0x47, 0x05, 0xe9,
	0x87, 0x47, 0x05, 0xe9, 0xc1, 0x4f, 0x85, 0xb1, 0x97, 0x93, 0x9a, 0xa5, 0x6f, 0x4d, 0x12, 0xde,
	0x5d, 0xfc, 0x23, 0x00, 0x00, 0xff, 0xff, 0x55, 0xe8, 0xe1, 0x1d, 0x3c, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HangupClient is the client API for Hangup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HangupClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	OffOnline(ctx context.Context, in *OffOnlineReq, opts ...grpc.CallOption) (*OffOnlineRsp, error)
	QueryHangupData(ctx context.Context, in *QueryHangupDataReq, opts ...grpc.CallOption) (*QueryHangupDataRsp, error)
	EndOffOnline(ctx context.Context, in *EndOffOnlineReq, opts ...grpc.CallOption) (*EndOffOnlineRsp, error)
	GetAward(ctx context.Context, in *GetAwardReq, opts ...grpc.CallOption) (*GetAwardRsp, error)
	FinishHangUp(ctx context.Context, in *FinishHangUpReq, opts ...grpc.CallOption) (*FinishHangUpRsp, error)
	QueryIslandStatus(ctx context.Context, in *QueryIslandStatusReq, opts ...grpc.CallOption) (*QueryIslandStatusRsp, error)
	GetHangupResult(ctx context.Context, in *GetHangupResultReq, opts ...grpc.CallOption) (*GetHangupResultRsp, error)
}

type hangupClient struct {
	cc *grpc.ClientConn
}

func NewHangupClient(cc *grpc.ClientConn) HangupClient {
	return &hangupClient{cc}
}

func (c *hangupClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangupClient) OffOnline(ctx context.Context, in *OffOnlineReq, opts ...grpc.CallOption) (*OffOnlineRsp, error) {
	out := new(OffOnlineRsp)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/OffOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangupClient) QueryHangupData(ctx context.Context, in *QueryHangupDataReq, opts ...grpc.CallOption) (*QueryHangupDataRsp, error) {
	out := new(QueryHangupDataRsp)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/QueryHangupData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangupClient) EndOffOnline(ctx context.Context, in *EndOffOnlineReq, opts ...grpc.CallOption) (*EndOffOnlineRsp, error) {
	out := new(EndOffOnlineRsp)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/EndOffOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangupClient) GetAward(ctx context.Context, in *GetAwardReq, opts ...grpc.CallOption) (*GetAwardRsp, error) {
	out := new(GetAwardRsp)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/GetAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangupClient) FinishHangUp(ctx context.Context, in *FinishHangUpReq, opts ...grpc.CallOption) (*FinishHangUpRsp, error) {
	out := new(FinishHangUpRsp)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/FinishHangUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangupClient) QueryIslandStatus(ctx context.Context, in *QueryIslandStatusReq, opts ...grpc.CallOption) (*QueryIslandStatusRsp, error) {
	out := new(QueryIslandStatusRsp)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/QueryIslandStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangupClient) GetHangupResult(ctx context.Context, in *GetHangupResultReq, opts ...grpc.CallOption) (*GetHangupResultRsp, error) {
	out := new(GetHangupResultRsp)
	err := c.cc.Invoke(ctx, "/hangup.service.v1.hangup/GetHangupResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HangupServer is the server API for Hangup service.
type HangupServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	OffOnline(context.Context, *OffOnlineReq) (*OffOnlineRsp, error)
	QueryHangupData(context.Context, *QueryHangupDataReq) (*QueryHangupDataRsp, error)
	EndOffOnline(context.Context, *EndOffOnlineReq) (*EndOffOnlineRsp, error)
	GetAward(context.Context, *GetAwardReq) (*GetAwardRsp, error)
	FinishHangUp(context.Context, *FinishHangUpReq) (*FinishHangUpRsp, error)
	QueryIslandStatus(context.Context, *QueryIslandStatusReq) (*QueryIslandStatusRsp, error)
	GetHangupResult(context.Context, *GetHangupResultReq) (*GetHangupResultRsp, error)
}

// UnimplementedHangupServer can be embedded to have forward compatible implementations.
type UnimplementedHangupServer struct {
}

func (*UnimplementedHangupServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedHangupServer) OffOnline(ctx context.Context, req *OffOnlineReq) (*OffOnlineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffOnline not implemented")
}
func (*UnimplementedHangupServer) QueryHangupData(ctx context.Context, req *QueryHangupDataReq) (*QueryHangupDataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHangupData not implemented")
}
func (*UnimplementedHangupServer) EndOffOnline(ctx context.Context, req *EndOffOnlineReq) (*EndOffOnlineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndOffOnline not implemented")
}
func (*UnimplementedHangupServer) GetAward(ctx context.Context, req *GetAwardReq) (*GetAwardRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAward not implemented")
}
func (*UnimplementedHangupServer) FinishHangUp(ctx context.Context, req *FinishHangUpReq) (*FinishHangUpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishHangUp not implemented")
}
func (*UnimplementedHangupServer) QueryIslandStatus(ctx context.Context, req *QueryIslandStatusReq) (*QueryIslandStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIslandStatus not implemented")
}
func (*UnimplementedHangupServer) GetHangupResult(ctx context.Context, req *GetHangupResultReq) (*GetHangupResultRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHangupResult not implemented")
}

func RegisterHangupServer(s *grpc.Server, srv HangupServer) {
	s.RegisterService(&_Hangup_serviceDesc, srv)
}

func _Hangup_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangup_OffOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).OffOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/OffOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).OffOnline(ctx, req.(*OffOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangup_QueryHangupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHangupDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).QueryHangupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/QueryHangupData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).QueryHangupData(ctx, req.(*QueryHangupDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangup_EndOffOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndOffOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).EndOffOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/EndOffOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).EndOffOnline(ctx, req.(*EndOffOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangup_GetAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).GetAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/GetAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).GetAward(ctx, req.(*GetAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangup_FinishHangUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishHangUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).FinishHangUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/FinishHangUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).FinishHangUp(ctx, req.(*FinishHangUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangup_QueryIslandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIslandStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).QueryIslandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/QueryIslandStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).QueryIslandStatus(ctx, req.(*QueryIslandStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangup_GetHangupResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHangupResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangupServer).GetHangupResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hangup.service.v1.hangup/GetHangupResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangupServer).GetHangupResult(ctx, req.(*GetHangupResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hangup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hangup.service.v1.hangup",
	HandlerType: (*HangupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hangup_Ping_Handler,
		},
		{
			MethodName: "OffOnline",
			Handler:    _Hangup_OffOnline_Handler,
		},
		{
			MethodName: "QueryHangupData",
			Handler:    _Hangup_QueryHangupData_Handler,
		},
		{
			MethodName: "EndOffOnline",
			Handler:    _Hangup_EndOffOnline_Handler,
		},
		{
			MethodName: "GetAward",
			Handler:    _Hangup_GetAward_Handler,
		},
		{
			MethodName: "FinishHangUp",
			Handler:    _Hangup_FinishHangUp_Handler,
		},
		{
			MethodName: "QueryIslandStatus",
			Handler:    _Hangup_QueryIslandStatus_Handler,
		},
		{
			MethodName: "GetHangupResult",
			Handler:    _Hangup_GetHangupResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *PlayerLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ServerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x20
	}
	if m.GroupID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerLoginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerLoginRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerLoginRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *OffOnlineReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffOnlineReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffOnlineReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MouseID) > 0 {
		dAtA2 := make([]byte, len(m.MouseID)*10)
		var j1 int
		for _, num1 := range m.MouseID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if m.LoseLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoseLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.WinLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WinLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.IslandID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IslandID))
		i--
		dAtA[i] = 0x30
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x28
	}
	if m.LongTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LongTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Ratio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OffOnlineRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffOnlineRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffOnlineRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *QueryHangupDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHangupDataReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHangupDataReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHangupDataRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHangupDataRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHangupDataRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IslandStatusList) > 0 {
		for iNdEx := len(m.IslandStatusList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IslandStatusList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IslandDataList) > 0 {
		for iNdEx := len(m.IslandDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IslandDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IslandData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IslandData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IslandData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MouseID) > 0 {
		dAtA4 := make([]byte, len(m.MouseID)*10)
		var j3 int
		for _, num1 := range m.MouseID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RatioList) > 0 {
		dAtA6 := make([]byte, len(m.RatioList)*10)
		var j5 int
		for _, num1 := range m.RatioList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if m.GoldMax != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldMax))
		i--
		dAtA[i] = 0x28
	}
	if m.GoldMin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldMin))
		i--
		dAtA[i] = 0x20
	}
	if m.LongTimeMax != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LongTimeMax))
		i--
		dAtA[i] = 0x18
	}
	if m.LongTimeMin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LongTimeMin))
		i--
		dAtA[i] = 0x10
	}
	if m.IslandID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IslandID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndOffOnlineReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndOffOnlineReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndOffOnlineReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MouserInfo) > 0 {
		for iNdEx := len(m.MouserInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MouserInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Income != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Income))
		i--
		dAtA[i] = 0x48
	}
	if m.Consume != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Consume))
		i--
		dAtA[i] = 0x40
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x38
	}
	if m.OffTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OffTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Ratio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndOffOnlineRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndOffOnlineRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndOffOnlineRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DetailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetailInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IncomeMoney != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IncomeMoney))
		i--
		dAtA[i] = 0x10
	}
	if m.MonsterID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MonsterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IslandID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IslandID))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAwardRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAwardRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAwardRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BetAmount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BetAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.Income != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Income))
		i--
		dAtA[i] = 0x30
	}
	if m.Consume != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Consume))
		i--
		dAtA[i] = 0x28
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x20
	}
	if m.OffTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OffTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Ratio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FinishHangUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishHangUpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishHangUpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IslandID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IslandID))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FinishHangUpRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishHangUpRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishHangUpRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *QueryIslandStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIslandStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIslandStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIslandStatusRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIslandStatusRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIslandStatusRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IslandStatusList) > 0 {
		for iNdEx := len(m.IslandStatusList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IslandStatusList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IslandStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IslandStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IslandStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HangupTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HangupTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HangupIP) > 0 {
		i -= len(m.HangupIP)
		copy(dAtA[i:], m.HangupIP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HangupIP)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IslandStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IslandStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.IslandID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IslandID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHangupResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHangupResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHangupResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IslandID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IslandID))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHangupResultRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHangupResultRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHangupResultRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Income != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Income))
		i--
		dAtA[i] = 0x30
	}
	if m.Consume != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Consume))
		i--
		dAtA[i] = 0x28
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x20
	}
	if m.OffTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OffTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Ratio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.GroupID != 0 {
		n += 1 + sovApi(uint64(m.GroupID))
	}
	if m.ServerID != 0 {
		n += 1 + sovApi(uint64(m.ServerID))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerLoginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OffOnlineReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.Ratio != 0 {
		n += 1 + sovApi(uint64(m.Ratio))
	}
	if m.LongTime != 0 {
		n += 1 + sovApi(uint64(m.LongTime))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.IslandID != 0 {
		n += 1 + sovApi(uint64(m.IslandID))
	}
	if m.WinLimit != 0 {
		n += 1 + sovApi(uint64(m.WinLimit))
	}
	if m.LoseLimit != 0 {
		n += 1 + sovApi(uint64(m.LoseLimit))
	}
	if len(m.MouseID) > 0 {
		l = 0
		for _, e := range m.MouseID {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OffOnlineRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryHangupDataReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryHangupDataRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IslandDataList) > 0 {
		for _, e := range m.IslandDataList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.IslandStatusList) > 0 {
		for _, e := range m.IslandStatusList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IslandData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IslandID != 0 {
		n += 1 + sovApi(uint64(m.IslandID))
	}
	if m.LongTimeMin != 0 {
		n += 1 + sovApi(uint64(m.LongTimeMin))
	}
	if m.LongTimeMax != 0 {
		n += 1 + sovApi(uint64(m.LongTimeMax))
	}
	if m.GoldMin != 0 {
		n += 1 + sovApi(uint64(m.GoldMin))
	}
	if m.GoldMax != 0 {
		n += 1 + sovApi(uint64(m.GoldMax))
	}
	if len(m.RatioList) > 0 {
		l = 0
		for _, e := range m.RatioList {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.MouseID) > 0 {
		l = 0
		for _, e := range m.MouseID {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndOffOnlineReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.GroupID != 0 {
		n += 1 + sovApi(uint64(m.GroupID))
	}
	if m.ServerID != 0 {
		n += 1 + sovApi(uint64(m.ServerID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.Ratio != 0 {
		n += 1 + sovApi(uint64(m.Ratio))
	}
	if m.OffTime != 0 {
		n += 1 + sovApi(uint64(m.OffTime))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.Consume != 0 {
		n += 1 + sovApi(uint64(m.Consume))
	}
	if m.Income != 0 {
		n += 1 + sovApi(uint64(m.Income))
	}
	if len(m.MouserInfo) > 0 {
		for _, e := range m.MouserInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndOffOnlineRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DetailInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonsterID != 0 {
		n += 1 + sovApi(uint64(m.MonsterID))
	}
	if m.IncomeMoney != 0 {
		n += 1 + sovApi(uint64(m.IncomeMoney))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.IslandID != 0 {
		n += 1 + sovApi(uint64(m.IslandID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAwardRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.Ratio != 0 {
		n += 1 + sovApi(uint64(m.Ratio))
	}
	if m.OffTime != 0 {
		n += 1 + sovApi(uint64(m.OffTime))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.Consume != 0 {
		n += 1 + sovApi(uint64(m.Consume))
	}
	if m.Income != 0 {
		n += 1 + sovApi(uint64(m.Income))
	}
	if m.BetAmount != 0 {
		n += 1 + sovApi(uint64(m.BetAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FinishHangUpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.IslandID != 0 {
		n += 1 + sovApi(uint64(m.IslandID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FinishHangUpRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryIslandStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryIslandStatusRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IslandStatusList) > 0 {
		for _, e := range m.IslandStatusList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IslandStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IslandID != 0 {
		n += 1 + sovApi(uint64(m.IslandID))
	}
	if m.IslandStatus != 0 {
		n += 1 + sovApi(uint64(m.IslandStatus))
	}
	l = len(m.HangupIP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HangupTime != 0 {
		n += 1 + sovApi(uint64(m.HangupTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHangupResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.IslandID != 0 {
		n += 1 + sovApi(uint64(m.IslandID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHangupResultRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.Ratio != 0 {
		n += 1 + sovApi(uint64(m.Ratio))
	}
	if m.OffTime != 0 {
		n += 1 + sovApi(uint64(m.OffTime))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.Consume != 0 {
		n += 1 + sovApi(uint64(m.Consume))
	}
	if m.Income != 0 {
		n += 1 + sovApi(uint64(m.Income))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerLoginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerLoginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerLoginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffOnlineReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffOnlineReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffOnlineReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTime", wireType)
			}
			m.LongTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandID", wireType)
			}
			m.IslandID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IslandID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinLimit", wireType)
			}
			m.WinLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseLimit", wireType)
			}
			m.LoseLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MouseID = append(m.MouseID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MouseID) == 0 {
					m.MouseID = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MouseID = append(m.MouseID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MouseID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffOnlineRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffOnlineRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffOnlineRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHangupDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHangupDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHangupDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHangupDataRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHangupDataRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHangupDataRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IslandDataList = append(m.IslandDataList, &IslandData{})
			if err := m.IslandDataList[len(m.IslandDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandStatusList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IslandStatusList = append(m.IslandStatusList, &IslandStatus{})
			if err := m.IslandStatusList[len(m.IslandStatusList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IslandData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IslandData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IslandData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandID", wireType)
			}
			m.IslandID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IslandID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTimeMin", wireType)
			}
			m.LongTimeMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongTimeMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTimeMax", wireType)
			}
			m.LongTimeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongTimeMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldMin", wireType)
			}
			m.GoldMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldMax", wireType)
			}
			m.GoldMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RatioList = append(m.RatioList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RatioList) == 0 {
					m.RatioList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RatioList = append(m.RatioList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RatioList", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MouseID = append(m.MouseID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MouseID) == 0 {
					m.MouseID = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MouseID = append(m.MouseID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MouseID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndOffOnlineReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndOffOnlineReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndOffOnlineReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffTime", wireType)
			}
			m.OffTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consume", wireType)
			}
			m.Consume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Income", wireType)
			}
			m.Income = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Income |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MouserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MouserInfo = append(m.MouserInfo, &DetailInfo{})
			if err := m.MouserInfo[len(m.MouserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndOffOnlineRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndOffOnlineRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndOffOnlineRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterID", wireType)
			}
			m.MonsterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeMoney", wireType)
			}
			m.IncomeMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomeMoney |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandID", wireType)
			}
			m.IslandID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IslandID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAwardRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAwardRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAwardRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffTime", wireType)
			}
			m.OffTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consume", wireType)
			}
			m.Consume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Income", wireType)
			}
			m.Income = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Income |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			m.BetAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BetAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishHangUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishHangUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishHangUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandID", wireType)
			}
			m.IslandID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IslandID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishHangUpRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishHangUpRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishHangUpRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIslandStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIslandStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIslandStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIslandStatusRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIslandStatusRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIslandStatusRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandStatusList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IslandStatusList = append(m.IslandStatusList, &IslandStatus{})
			if err := m.IslandStatusList[len(m.IslandStatusList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IslandStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IslandStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IslandStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandID", wireType)
			}
			m.IslandID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IslandID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandStatus", wireType)
			}
			m.IslandStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IslandStatus |= HangUpStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HangupIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupTime", wireType)
			}
			m.HangupTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HangupTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHangupResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHangupResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHangupResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IslandID", wireType)
			}
			m.IslandID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IslandID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHangupResultRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHangupResultRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHangupResultRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffTime", wireType)
			}
			m.OffTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consume", wireType)
			}
			m.Consume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Income", wireType)
			}
			m.Income = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Income |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
