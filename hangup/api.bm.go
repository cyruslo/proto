// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathHangupPing = "/hangup.service.v1.hangup/Ping"
var PathHangupOffOnline = "/hangup/OffOnline"
var PathHangupQueryHangupData = "/hangup/QueryHangupData"
var PathHangupEndOffOnline = "/hangup/EndOffOnline"
var PathHangupGetAward = "/hangup/GetAward"
var PathHangupFinishHangUp = "/hangup/FinishHangUp"
var PathHangupQueryIslandStatus = "/hangup/QueryIslandStatus"
var PathHangupGetHangupResult = "/hangup/GetHangupResult"

// HangupBMServer is the server API for Hangup service.
type HangupBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	OffOnline(ctx context.Context, req *OffOnlineReq) (resp *OffOnlineRsp, err error)

	QueryHangupData(ctx context.Context, req *QueryHangupDataReq) (resp *QueryHangupDataRsp, err error)

	EndOffOnline(ctx context.Context, req *EndOffOnlineReq) (resp *EndOffOnlineRsp, err error)

	GetAward(ctx context.Context, req *GetAwardReq) (resp *GetAwardRsp, err error)

	FinishHangUp(ctx context.Context, req *FinishHangUpReq) (resp *FinishHangUpRsp, err error)

	QueryIslandStatus(ctx context.Context, req *QueryIslandStatusReq) (resp *QueryIslandStatusRsp, err error)

	GetHangupResult(ctx context.Context, req *GetHangupResultReq) (resp *GetHangupResultRsp, err error)
}

var HangupSvc HangupBMServer

func hangupPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.Ping(c, p)
	c.JSON(resp, err)
}

func hangupOffOnline(c *bm.Context) {
	p := new(OffOnlineReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.OffOnline(c, p)
	c.JSON(resp, err)
}

func hangupQueryHangupData(c *bm.Context) {
	p := new(QueryHangupDataReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.QueryHangupData(c, p)
	c.JSON(resp, err)
}

func hangupEndOffOnline(c *bm.Context) {
	p := new(EndOffOnlineReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.EndOffOnline(c, p)
	c.JSON(resp, err)
}

func hangupGetAward(c *bm.Context) {
	p := new(GetAwardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.GetAward(c, p)
	c.JSON(resp, err)
}

func hangupFinishHangUp(c *bm.Context) {
	p := new(FinishHangUpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.FinishHangUp(c, p)
	c.JSON(resp, err)
}

func hangupQueryIslandStatus(c *bm.Context) {
	p := new(QueryIslandStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.QueryIslandStatus(c, p)
	c.JSON(resp, err)
}

func hangupGetHangupResult(c *bm.Context) {
	p := new(GetHangupResultReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HangupSvc.GetHangupResult(c, p)
	c.JSON(resp, err)
}

// RegisterHangupBMServer Register the blademaster route
func RegisterHangupBMServer(e *bm.Engine, server HangupBMServer) {
	HangupSvc = server
	e.GET("/hangup.service.v1.hangup/Ping", hangupPing)
	e.POST("/hangup/OffOnline", hangupOffOnline)
	e.POST("/hangup/QueryHangupData", hangupQueryHangupData)
	e.POST("/hangup/EndOffOnline", hangupEndOffOnline)
	e.POST("/hangup/GetAward", hangupGetAward)
	e.POST("/hangup/FinishHangUp", hangupFinishHangUp)
	e.POST("/hangup/QueryIslandStatus", hangupQueryIslandStatus)
	e.POST("/hangup/GetHangupResult", hangupGetHangupResult)
}
