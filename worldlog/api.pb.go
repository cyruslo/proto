// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResp) Reset()         { *m = CommonResp{} }
func (m *CommonResp) String() string { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()    {}
func (*CommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CommonResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResp.Merge(m, src)
}
func (m *CommonResp) XXX_Size() int {
	return m.Size()
}
func (m *CommonResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResp proto.InternalMessageInfo

// 每局日志
type EveryGameLogReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	TableID              string   `protobuf:"bytes,5,opt,name=TableID,proto3" json:"TableID,omitempty"`
	Money                string   `protobuf:"bytes,6,opt,name=Money,proto3" json:"Money,omitempty"`
	Gameno               string   `protobuf:"bytes,7,opt,name=Gameno,proto3" json:"Gameno,omitempty"`
	Chairno              string   `protobuf:"bytes,8,opt,name=Chairno,proto3" json:"Chairno,omitempty"`
	Tax                  string   `protobuf:"bytes,9,opt,name=Tax,proto3" json:"Tax,omitempty"`
	Balance              string   `protobuf:"bytes,10,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Iscoingame           string   `protobuf:"bytes,11,opt,name=Iscoingame,proto3" json:"Iscoingame,omitempty"`
	BIsTrusteeship       string   `protobuf:"bytes,12,opt,name=BIsTrusteeship,proto3" json:"BIsTrusteeship,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EveryGameLogReq) Reset()         { *m = EveryGameLogReq{} }
func (m *EveryGameLogReq) String() string { return proto.CompactTextString(m) }
func (*EveryGameLogReq) ProtoMessage()    {}
func (*EveryGameLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *EveryGameLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EveryGameLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EveryGameLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EveryGameLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EveryGameLogReq.Merge(m, src)
}
func (m *EveryGameLogReq) XXX_Size() int {
	return m.Size()
}
func (m *EveryGameLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EveryGameLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_EveryGameLogReq proto.InternalMessageInfo

//
type RemoveUserLastMoneyReq struct {
	PlayerID             string   `protobuf:"bytes,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveUserLastMoneyReq) Reset()         { *m = RemoveUserLastMoneyReq{} }
func (m *RemoveUserLastMoneyReq) String() string { return proto.CompactTextString(m) }
func (*RemoveUserLastMoneyReq) ProtoMessage()    {}
func (*RemoveUserLastMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *RemoveUserLastMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveUserLastMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveUserLastMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveUserLastMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUserLastMoneyReq.Merge(m, src)
}
func (m *RemoveUserLastMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveUserLastMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUserLastMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUserLastMoneyReq proto.InternalMessageInfo

// vip点
type SaveVipPointReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Score                string   `protobuf:"bytes,5,opt,name=Score,proto3" json:"Score,omitempty"`
	IP                   string   `protobuf:"bytes,6,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveVipPointReq) Reset()         { *m = SaveVipPointReq{} }
func (m *SaveVipPointReq) String() string { return proto.CompactTextString(m) }
func (*SaveVipPointReq) ProtoMessage()    {}
func (*SaveVipPointReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *SaveVipPointReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveVipPointReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveVipPointReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveVipPointReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveVipPointReq.Merge(m, src)
}
func (m *SaveVipPointReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveVipPointReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveVipPointReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveVipPointReq proto.InternalMessageInfo

// vip
type GetVipInfoReq struct {
	PlayerID             string   `protobuf:"bytes,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVipInfoReq) Reset()         { *m = GetVipInfoReq{} }
func (m *GetVipInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetVipInfoReq) ProtoMessage()    {}
func (*GetVipInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GetVipInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVipInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVipInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVipInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVipInfoReq.Merge(m, src)
}
func (m *GetVipInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVipInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVipInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVipInfoReq proto.InternalMessageInfo

type GetVipInfoRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Grade                int32    `protobuf:"varint,3,opt,name=grade,proto3" json:"grade,omitempty"`
	Score                float64  `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
	FrequenterScore      float64  `protobuf:"fixed64,5,opt,name=frequenterScore,proto3" json:"frequenterScore,omitempty"`
	AdvDays              int32    `protobuf:"varint,6,opt,name=advDays,proto3" json:"advDays,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVipInfoRsp) Reset()         { *m = GetVipInfoRsp{} }
func (m *GetVipInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GetVipInfoRsp) ProtoMessage()    {}
func (*GetVipInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetVipInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVipInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVipInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVipInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVipInfoRsp.Merge(m, src)
}
func (m *GetVipInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetVipInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVipInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetVipInfoRsp proto.InternalMessageInfo

type UserInfoVipGetReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfoVipGetReq) Reset()         { *m = UserInfoVipGetReq{} }
func (m *UserInfoVipGetReq) String() string { return proto.CompactTextString(m) }
func (*UserInfoVipGetReq) ProtoMessage()    {}
func (*UserInfoVipGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *UserInfoVipGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoVipGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoVipGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoVipGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoVipGetReq.Merge(m, src)
}
func (m *UserInfoVipGetReq) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoVipGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoVipGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoVipGetReq proto.InternalMessageInfo

type UserInfoVipGetRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SupuserID            int32    `protobuf:"varint,3,opt,name=supuserID,proto3" json:"supuserID,omitempty"`
	SupsuserID           int32    `protobuf:"varint,4,opt,name=supsuserID,proto3" json:"supsuserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfoVipGetRsp) Reset()         { *m = UserInfoVipGetRsp{} }
func (m *UserInfoVipGetRsp) String() string { return proto.CompactTextString(m) }
func (*UserInfoVipGetRsp) ProtoMessage()    {}
func (*UserInfoVipGetRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *UserInfoVipGetRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoVipGetRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoVipGetRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoVipGetRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoVipGetRsp.Merge(m, src)
}
func (m *UserInfoVipGetRsp) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoVipGetRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoVipGetRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoVipGetRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonResp)(nil), "worldlog.service.v1.CommonResp")
	proto.RegisterType((*EveryGameLogReq)(nil), "worldlog.service.v1.EveryGameLogReq")
	proto.RegisterType((*RemoveUserLastMoneyReq)(nil), "worldlog.service.v1.RemoveUserLastMoneyReq")
	proto.RegisterType((*SaveVipPointReq)(nil), "worldlog.service.v1.SaveVipPointReq")
	proto.RegisterType((*GetVipInfoReq)(nil), "worldlog.service.v1.GetVipInfoReq")
	proto.RegisterType((*GetVipInfoRsp)(nil), "worldlog.service.v1.GetVipInfoRsp")
	proto.RegisterType((*UserInfoVipGetReq)(nil), "worldlog.service.v1.UserInfoVipGetReq")
	proto.RegisterType((*UserInfoVipGetRsp)(nil), "worldlog.service.v1.UserInfoVipGetRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xae, 0xd3, 0x3a, 0x6d, 0xe6, 0xd7, 0x5f, 0x5b, 0x96, 0x12, 0x19, 0xab, 0x4a, 0x8b, 0x85,
	0x4a, 0xa5, 0x8a, 0x44, 0xfc, 0x39, 0x71, 0xa3, 0x0d, 0xaa, 0x2c, 0x15, 0x25, 0x72, 0x4b, 0x91,
	0xb8, 0x6d, 0x92, 0xa9, 0x6b, 0x29, 0xd9, 0x75, 0x77, 0x1d, 0x43, 0x4e, 0x48, 0x1c, 0x38, 0x72,
	0x80, 0x0b, 0x57, 0x1e, 0x80, 0xf7, 0xe8, 0x11, 0xc4, 0x0b, 0x40, 0xe1, 0x41, 0xd0, 0xae, 0x9d,
	0xc6, 0x49, 0x0d, 0xa5, 0x1c, 0xb8, 0xf9, 0x9b, 0xf9, 0xf4, 0xcd, 0xb7, 0x33, 0x3b, 0x6b, 0x28,
	0xd1, 0x30, 0xa8, 0x86, 0x82, 0x47, 0x9c, 0x5c, 0x7d, 0xce, 0x45, 0xb7, 0xd3, 0xe5, 0x7e, 0x55,
	0xa2, 0x88, 0x83, 0x36, 0x56, 0xe3, 0x3b, 0xf6, 0x6d, 0x3f, 0x88, 0x8e, 0xfa, 0xad, 0x6a, 0x9b,
	0xf7, 0x6a, 0x3e, 0xf7, 0x79, 0x4d, 0x73, 0x5b, 0xfd, 0x43, 0x8d, 0x34, 0xd0, 0x5f, 0x89, 0x86,
	0xbd, 0xe2, 0x73, 0xee, 0x77, 0xb1, 0x46, 0xc3, 0xa0, 0x46, 0x19, 0xe3, 0x11, 0x8d, 0x02, 0xce,
	0x64, 0x92, 0x75, 0x1e, 0x00, 0x6c, 0xf3, 0x5e, 0x8f, 0x33, 0x0f, 0x65, 0x48, 0x08, 0xcc, 0xb4,
	0x79, 0x07, 0x2d, 0x63, 0xcd, 0xd8, 0x30, 0x3d, 0xfd, 0x4d, 0x2c, 0x98, 0xed, 0xa1, 0x94, 0xd4,
	0x47, 0xab, 0xb0, 0x66, 0x6c, 0x94, 0xbc, 0x21, 0x74, 0x3e, 0x17, 0x60, 0xf1, 0x51, 0x8c, 0x62,
	0xb0, 0x43, 0x7b, 0xb8, 0xcb, 0x7d, 0x0f, 0x8f, 0x49, 0x19, 0x8a, 0x0a, 0xb9, 0x75, 0xad, 0x51,
	0xf2, 0x52, 0xa4, 0x54, 0x1e, 0x0a, 0x64, 0xd4, 0xad, 0x0f, 0x55, 0x52, 0x48, 0x6c, 0x98, 0xdb,
	0x43, 0x11, 0xa3, 0x70, 0xeb, 0xd6, 0xb4, 0x4e, 0x9d, 0x61, 0x95, 0x6b, 0x76, 0xe9, 0x40, 0xe7,
	0x66, 0x92, 0xdc, 0x10, 0x2b, 0xc5, 0x7d, 0xda, 0xea, 0xaa, 0x52, 0x66, 0xa2, 0x98, 0x42, 0xb2,
	0x0c, 0xe6, 0x63, 0xce, 0x70, 0x60, 0x15, 0x75, 0x3c, 0x01, 0x43, 0x67, 0x8c, 0x5b, 0xb3, 0x23,
	0x67, 0x8c, 0x2b, 0x9d, 0xed, 0x23, 0x1a, 0x08, 0xc6, 0xad, 0xb9, 0x44, 0x27, 0x85, 0x64, 0x09,
	0xa6, 0xf7, 0xe9, 0x0b, 0xab, 0xa4, 0xa3, 0xea, 0x53, 0x71, 0xb7, 0x68, 0x97, 0xb2, 0x36, 0x5a,
	0x90, 0x70, 0x53, 0x48, 0x2a, 0x00, 0xae, 0x6c, 0xf3, 0x80, 0xf9, 0xb4, 0x87, 0xd6, 0x7f, 0x3a,
	0x99, 0x89, 0x90, 0x75, 0x58, 0xd8, 0x72, 0xe5, 0xbe, 0xe8, 0xcb, 0x08, 0x51, 0x1e, 0x05, 0xa1,
	0x35, 0xaf, 0x39, 0x13, 0x51, 0xe7, 0x3e, 0x94, 0x3d, 0xec, 0xf1, 0x18, 0x9f, 0x48, 0x14, 0xbb,
	0x54, 0x46, 0xda, 0xbc, 0xea, 0x6c, 0xb6, 0x17, 0xc6, 0x78, 0x2f, 0x9c, 0x0f, 0x06, 0x2c, 0xee,
	0xd1, 0x18, 0x0f, 0x82, 0xb0, 0xc9, 0x03, 0x16, 0xfd, 0xdb, 0x49, 0x2c, 0x83, 0xb9, 0xd7, 0xe6,
	0x02, 0xd3, 0x39, 0x24, 0x80, 0x2c, 0x40, 0xc1, 0x6d, 0xa6, 0x23, 0x28, 0xb8, 0x4d, 0x67, 0x13,
	0xfe, 0xdf, 0xc1, 0xe8, 0x20, 0x08, 0x5d, 0x76, 0xc8, 0x2f, 0x3a, 0xd0, 0x47, 0x63, 0x8c, 0x7d,
	0xd9, 0xab, 0xa9, 0x2c, 0xf9, 0x82, 0x76, 0x50, 0x9f, 0xc3, 0xf4, 0x12, 0xa0, 0xa2, 0x52, 0x1b,
	0x55, 0x27, 0x30, 0xbc, 0x04, 0x90, 0x0d, 0x58, 0x3c, 0x14, 0x78, 0xdc, 0x47, 0x16, 0xa1, 0x18,
	0x1d, 0xc4, 0xf0, 0x26, 0xc3, 0xaa, 0x1e, 0xed, 0xc4, 0x75, 0x3a, 0x90, 0xfa, 0x5c, 0xa6, 0x37,
	0x84, 0xce, 0x36, 0x5c, 0x51, 0x03, 0x53, 0x66, 0x0f, 0x82, 0x70, 0x07, 0x7f, 0x3b, 0x81, 0x32,
	0x14, 0x35, 0x79, 0x38, 0x80, 0x14, 0x39, 0x2f, 0xcf, 0x89, 0x5c, 0xfa, 0xdc, 0x2b, 0x50, 0x92,
	0xfd, 0xb0, 0x2f, 0xcf, 0x66, 0x68, 0x7a, 0xa3, 0x80, 0xba, 0xa4, 0xb2, 0x1f, 0xca, 0x34, 0x3d,
	0xa3, 0xd3, 0x99, 0xc8, 0xdd, 0xb7, 0x26, 0xcc, 0x3d, 0x4d, 0x5f, 0x1c, 0x32, 0x80, 0x85, 0x06,
	0xcb, 0xae, 0x37, 0xb9, 0x59, 0xcd, 0x79, 0x8e, 0xaa, 0x13, 0x2f, 0x80, 0xbd, 0x9a, 0xcb, 0x1a,
	0x3d, 0x32, 0xce, 0xda, 0xab, 0x2f, 0x3f, 0xde, 0x15, 0x6c, 0x62, 0xd5, 0x86, 0xc4, 0xda, 0x44,
	0xa1, 0x37, 0x06, 0x5c, 0x6b, 0xb0, 0x9c, 0x3d, 0x20, 0x9b, 0xb9, 0xe2, 0xf9, 0x1b, 0x73, 0xb1,
	0x93, 0x5b, 0xda, 0xc9, 0x0d, 0x67, 0x35, 0xeb, 0x24, 0xaf, 0xac, 0xee, 0x45, 0x76, 0xc1, 0x7e,
	0xd1, 0x8b, 0x89, 0x1d, 0xfc, 0xcb, 0x5e, 0x8c, 0x15, 0x8a, 0x61, 0xbe, 0xc1, 0x46, 0xab, 0x40,
	0x9c, 0x5c, 0xc9, 0xb1, 0xcd, 0xb2, 0x2f, 0xe4, 0xc8, 0xd0, 0xa9, 0xe8, 0xca, 0x16, 0x29, 0x67,
	0x2b, 0x67, 0xea, 0xbc, 0x36, 0x60, 0xa9, 0xc1, 0xc6, 0xef, 0x23, 0x59, 0xcf, 0x15, 0x3e, 0x77,
	0xf3, 0xed, 0x3f, 0xe2, 0xc9, 0xd0, 0x71, 0xb4, 0x89, 0x15, 0x62, 0x67, 0x4d, 0x8c, 0xd3, 0xb6,
	0xae, 0x9f, 0x7c, 0xab, 0x4c, 0x9d, 0x9c, 0x56, 0x8c, 0x4f, 0xa7, 0x15, 0xe3, 0xeb, 0x69, 0xc5,
	0x78, 0xff, 0xbd, 0x32, 0xf5, 0x6c, 0x9a, 0x86, 0x41, 0xab, 0xa8, 0xff, 0x61, 0xf7, 0x7e, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x0f, 0x43, 0x56, 0x20, 0x32, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorldlogClient is the client API for Worldlog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorldlogClient interface {
	OnEveryGameLog(ctx context.Context, in *EveryGameLogReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnRemoveUserLastMoney(ctx context.Context, in *RemoveUserLastMoneyReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnSaveVipPoint(ctx context.Context, in *SaveVipPointReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnGetVipInfo(ctx context.Context, in *GetVipInfoReq, opts ...grpc.CallOption) (*GetVipInfoRsp, error)
	OnUserInfoVipGet(ctx context.Context, in *UserInfoVipGetReq, opts ...grpc.CallOption) (*UserInfoVipGetRsp, error)
}

type worldlogClient struct {
	cc *grpc.ClientConn
}

func NewWorldlogClient(cc *grpc.ClientConn) WorldlogClient {
	return &worldlogClient{cc}
}

func (c *worldlogClient) OnEveryGameLog(ctx context.Context, in *EveryGameLogReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/worldlog.service.v1.Worldlog/OnEveryGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldlogClient) OnRemoveUserLastMoney(ctx context.Context, in *RemoveUserLastMoneyReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/worldlog.service.v1.Worldlog/OnRemoveUserLastMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldlogClient) OnSaveVipPoint(ctx context.Context, in *SaveVipPointReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/worldlog.service.v1.Worldlog/OnSaveVipPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldlogClient) OnGetVipInfo(ctx context.Context, in *GetVipInfoReq, opts ...grpc.CallOption) (*GetVipInfoRsp, error) {
	out := new(GetVipInfoRsp)
	err := c.cc.Invoke(ctx, "/worldlog.service.v1.Worldlog/OnGetVipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldlogClient) OnUserInfoVipGet(ctx context.Context, in *UserInfoVipGetReq, opts ...grpc.CallOption) (*UserInfoVipGetRsp, error) {
	out := new(UserInfoVipGetRsp)
	err := c.cc.Invoke(ctx, "/worldlog.service.v1.Worldlog/OnUserInfoVipGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldlogServer is the server API for Worldlog service.
type WorldlogServer interface {
	OnEveryGameLog(context.Context, *EveryGameLogReq) (*CommonResp, error)
	OnRemoveUserLastMoney(context.Context, *RemoveUserLastMoneyReq) (*CommonResp, error)
	OnSaveVipPoint(context.Context, *SaveVipPointReq) (*CommonResp, error)
	OnGetVipInfo(context.Context, *GetVipInfoReq) (*GetVipInfoRsp, error)
	OnUserInfoVipGet(context.Context, *UserInfoVipGetReq) (*UserInfoVipGetRsp, error)
}

func RegisterWorldlogServer(s *grpc.Server, srv WorldlogServer) {
	s.RegisterService(&_Worldlog_serviceDesc, srv)
}

func _Worldlog_OnEveryGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EveryGameLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldlogServer).OnEveryGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worldlog.service.v1.Worldlog/OnEveryGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldlogServer).OnEveryGameLog(ctx, req.(*EveryGameLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worldlog_OnRemoveUserLastMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserLastMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldlogServer).OnRemoveUserLastMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worldlog.service.v1.Worldlog/OnRemoveUserLastMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldlogServer).OnRemoveUserLastMoney(ctx, req.(*RemoveUserLastMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worldlog_OnSaveVipPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVipPointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldlogServer).OnSaveVipPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worldlog.service.v1.Worldlog/OnSaveVipPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldlogServer).OnSaveVipPoint(ctx, req.(*SaveVipPointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worldlog_OnGetVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldlogServer).OnGetVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worldlog.service.v1.Worldlog/OnGetVipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldlogServer).OnGetVipInfo(ctx, req.(*GetVipInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worldlog_OnUserInfoVipGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoVipGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldlogServer).OnUserInfoVipGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worldlog.service.v1.Worldlog/OnUserInfoVipGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldlogServer).OnUserInfoVipGet(ctx, req.(*UserInfoVipGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worldlog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "worldlog.service.v1.Worldlog",
	HandlerType: (*WorldlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnEveryGameLog",
			Handler:    _Worldlog_OnEveryGameLog_Handler,
		},
		{
			MethodName: "OnRemoveUserLastMoney",
			Handler:    _Worldlog_OnRemoveUserLastMoney_Handler,
		},
		{
			MethodName: "OnSaveVipPoint",
			Handler:    _Worldlog_OnSaveVipPoint_Handler,
		},
		{
			MethodName: "OnGetVipInfo",
			Handler:    _Worldlog_OnGetVipInfo_Handler,
		},
		{
			MethodName: "OnUserInfoVipGet",
			Handler:    _Worldlog_OnUserInfoVipGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EveryGameLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EveryGameLogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i += copy(dAtA[i:], m.GameID)
	}
	if len(m.ArenaID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i += copy(dAtA[i:], m.ArenaID)
	}
	if len(m.ServerID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i += copy(dAtA[i:], m.ServerID)
	}
	if len(m.PlayerID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i += copy(dAtA[i:], m.PlayerID)
	}
	if len(m.TableID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TableID)))
		i += copy(dAtA[i:], m.TableID)
	}
	if len(m.Money) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Money)))
		i += copy(dAtA[i:], m.Money)
	}
	if len(m.Gameno) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gameno)))
		i += copy(dAtA[i:], m.Gameno)
	}
	if len(m.Chairno) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Chairno)))
		i += copy(dAtA[i:], m.Chairno)
	}
	if len(m.Tax) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tax)))
		i += copy(dAtA[i:], m.Tax)
	}
	if len(m.Balance) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Balance)))
		i += copy(dAtA[i:], m.Balance)
	}
	if len(m.Iscoingame) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Iscoingame)))
		i += copy(dAtA[i:], m.Iscoingame)
	}
	if len(m.BIsTrusteeship) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BIsTrusteeship)))
		i += copy(dAtA[i:], m.BIsTrusteeship)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveUserLastMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserLastMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i += copy(dAtA[i:], m.PlayerID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SaveVipPointReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveVipPointReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i += copy(dAtA[i:], m.GameID)
	}
	if len(m.ArenaID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i += copy(dAtA[i:], m.ArenaID)
	}
	if len(m.ServerID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i += copy(dAtA[i:], m.ServerID)
	}
	if len(m.PlayerID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i += copy(dAtA[i:], m.PlayerID)
	}
	if len(m.Score) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Score)))
		i += copy(dAtA[i:], m.Score)
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVipInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVipInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i += copy(dAtA[i:], m.PlayerID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVipInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVipInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Grade != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Grade))
	}
	if m.Score != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if m.FrequenterScore != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FrequenterScore))))
		i += 8
	}
	if m.AdvDays != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AdvDays))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfoVipGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoVipGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i += copy(dAtA[i:], m.GameID)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfoVipGetRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoVipGetRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.SupuserID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SupuserID))
	}
	if m.SupsuserID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SupsuserID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CommonResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EveryGameLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TableID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Money)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gameno)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Chairno)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tax)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Iscoingame)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BIsTrusteeship)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveUserLastMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveVipPointReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVipInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVipInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Grade != 0 {
		n += 1 + sovApi(uint64(m.Grade))
	}
	if m.Score != 0 {
		n += 9
	}
	if m.FrequenterScore != 0 {
		n += 9
	}
	if m.AdvDays != 0 {
		n += 1 + sovApi(uint64(m.AdvDays))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoVipGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoVipGetRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SupuserID != 0 {
		n += 1 + sovApi(uint64(m.SupuserID))
	}
	if m.SupsuserID != 0 {
		n += 1 + sovApi(uint64(m.SupsuserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EveryGameLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EveryGameLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EveryGameLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Money = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gameno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chairno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chairno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscoingame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iscoingame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BIsTrusteeship", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BIsTrusteeship = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserLastMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserLastMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserLastMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveVipPointReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveVipPointReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveVipPointReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVipInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVipInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVipInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVipInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVipInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVipInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequenterScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FrequenterScore = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvDays", wireType)
			}
			m.AdvDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdvDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoVipGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoVipGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoVipGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoVipGetRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoVipGetRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoVipGetRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupuserID", wireType)
			}
			m.SupuserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupuserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupsuserID", wireType)
			}
			m.SupsuserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupsuserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
