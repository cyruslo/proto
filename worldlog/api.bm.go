// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathWorldlogOnEveryGameLog = "/worldlog/OnEveryGameLog"
var PathWorldlogOnRemoveUserLastMoney = "/worldlog/OnRemoveUserLastMoney"
var PathWorldlogOnSaveVipPoint = "/worldlog/OnSaveVipPoint"
var PathWorldlogOnGetVipInfo = "/worldlog/OnGetVipInfo"
var PathWorldlogOnUserInfoVipGet = "/worldlog/OnUserInfoVipGet"

// WorldlogBMServer is the server API for Worldlog service.
type WorldlogBMServer interface {
	OnEveryGameLog(ctx context.Context, req *EveryGameLogReq) (resp *CommonResp, err error)

	OnRemoveUserLastMoney(ctx context.Context, req *RemoveUserLastMoneyReq) (resp *CommonResp, err error)

	OnSaveVipPoint(ctx context.Context, req *SaveVipPointReq) (resp *CommonResp, err error)

	OnGetVipInfo(ctx context.Context, req *GetVipInfoReq) (resp *GetVipInfoRsp, err error)

	OnUserInfoVipGet(ctx context.Context, req *UserInfoVipGetReq) (resp *UserInfoVipGetRsp, err error)
}

var WorldlogSvc WorldlogBMServer

func worldlogOnEveryGameLog(c *bm.Context) {
	p := new(EveryGameLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldlogSvc.OnEveryGameLog(c, p)
	c.JSON(resp, err)
}

func worldlogOnRemoveUserLastMoney(c *bm.Context) {
	p := new(RemoveUserLastMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldlogSvc.OnRemoveUserLastMoney(c, p)
	c.JSON(resp, err)
}

func worldlogOnSaveVipPoint(c *bm.Context) {
	p := new(SaveVipPointReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldlogSvc.OnSaveVipPoint(c, p)
	c.JSON(resp, err)
}

func worldlogOnGetVipInfo(c *bm.Context) {
	p := new(GetVipInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldlogSvc.OnGetVipInfo(c, p)
	c.JSON(resp, err)
}

func worldlogOnUserInfoVipGet(c *bm.Context) {
	p := new(UserInfoVipGetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldlogSvc.OnUserInfoVipGet(c, p)
	c.JSON(resp, err)
}

// RegisterWorldlogBMServer Register the blademaster route
func RegisterWorldlogBMServer(e *bm.Engine, server WorldlogBMServer) {
	WorldlogSvc = server
	e.GET("/worldlog/OnEveryGameLog", worldlogOnEveryGameLog)
	e.POST("/worldlog/OnRemoveUserLastMoney", worldlogOnRemoveUserLastMoney)
	e.GET("/worldlog/OnSaveVipPoint", worldlogOnSaveVipPoint)
	e.GET("/worldlog/OnGetVipInfo", worldlogOnGetVipInfo)
	e.GET("/worldlog/OnUserInfoVipGet", worldlogOnUserInfoVipGet)
}
