// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "google.golang.org/protobuf/types/known/emptypb"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathDailyActivityGetActivityTaskList = "/activity/GetActivityTaskList"
var PathDailyActivityReceiveActivityAward = "/activity/ReceiveActivityAward"
var PathDailyActivityUpdateActivityTaskProgress = "/activity/UpdateActivityTaskProgress"

// DailyActivityBMServer is the server API for DailyActivity service.
type DailyActivityBMServer interface {
	// 获取活跃度活动列表
	GetActivityTaskList(ctx context.Context, req *ActivityTaskReq) (resp *ActivityTaskListResp, err error)

	// 领取活跃度活动奖励
	ReceiveActivityAward(ctx context.Context, req *ReceiveAwardReq) (resp *ReceiveAwardResp, err error)

	// 更新任务完成进度
	UpdateActivityTaskProgress(ctx context.Context, req *UpdateTaskProgressReq) (resp *google_protobuf1.Empty, err error)
}

var DailyActivitySvc DailyActivityBMServer

func dailyActivityGetActivityTaskList(c *bm.Context) {
	p := new(ActivityTaskReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DailyActivitySvc.GetActivityTaskList(c, p)
	c.JSON(resp, err)
}

func dailyActivityReceiveActivityAward(c *bm.Context) {
	p := new(ReceiveAwardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DailyActivitySvc.ReceiveActivityAward(c, p)
	c.JSON(resp, err)
}

func dailyActivityUpdateActivityTaskProgress(c *bm.Context) {
	p := new(UpdateTaskProgressReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DailyActivitySvc.UpdateActivityTaskProgress(c, p)
	c.JSON(resp, err)
}

// RegisterDailyActivityBMServer Register the blademaster route
func RegisterDailyActivityBMServer(e *bm.Engine, server DailyActivityBMServer) {
	DailyActivitySvc = server
	e.POST("/activity/GetActivityTaskList", dailyActivityGetActivityTaskList)
	e.POST("/activity/ReceiveActivityAward", dailyActivityReceiveActivityAward)
	e.POST("/activity/UpdateActivityTaskProgress", dailyActivityUpdateActivityTaskProgress)
}
