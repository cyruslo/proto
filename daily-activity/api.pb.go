// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 领取类型
type ReceiveType int32

const (
	// 无效
	ReceiveType_Invalid ReceiveType = 0
	// 开宝箱
	ReceiveType_OpenTreasureChest ReceiveType = 1
	// 完成任务奖励
	ReceiveType_TaskFinished ReceiveType = 2
)

var ReceiveType_name = map[int32]string{
	0: "Invalid",
	1: "OpenTreasureChest",
	2: "TaskFinished",
}

var ReceiveType_value = map[string]int32{
	"Invalid":           0,
	"OpenTreasureChest": 1,
	"TaskFinished":      2,
}

func (x ReceiveType) String() string {
	return proto.EnumName(ReceiveType_name, int32(x))
}

func (ReceiveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// 任务状态
type TaskStatus int32

const (
	// 废弃
	TaskStatus_DisCard TaskStatus = 0
	// 未完成
	TaskStatus_Undone TaskStatus = 1
	// 可领取
	TaskStatus_Acceptable TaskStatus = 2
	// 已经领取
	TaskStatus_Received TaskStatus = 3
)

var TaskStatus_name = map[int32]string{
	0: "DisCard",
	1: "Undone",
	2: "Acceptable",
	3: "Received",
}

var TaskStatus_value = map[string]int32{
	"DisCard":    0,
	"Undone":     1,
	"Acceptable": 2,
	"Received":   3,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}

func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

// 活跃度活动请求参数
type ActivityTaskReq struct {
	// 用户ID
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityTaskReq) Reset()         { *m = ActivityTaskReq{} }
func (m *ActivityTaskReq) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskReq) ProtoMessage()    {}
func (*ActivityTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *ActivityTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskReq.Merge(m, src)
}
func (m *ActivityTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskReq proto.InternalMessageInfo

// 领取活跃度活动奖励请求体
type ReceiveAwardReq struct {
	// 用户ID
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	// 领取类型
	ReceiveType ReceiveType `protobuf:"varint,2,opt,name=receive_type,json=receiveType,proto3,enum=dailyactivity.service.v1.ReceiveType" json:"receive_type"`
	// 领取类型对应的ID
	TargetId             int32    `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveAwardReq) Reset()         { *m = ReceiveAwardReq{} }
func (m *ReceiveAwardReq) String() string { return proto.CompactTextString(m) }
func (*ReceiveAwardReq) ProtoMessage()    {}
func (*ReceiveAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ReceiveAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveAwardReq.Merge(m, src)
}
func (m *ReceiveAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveAwardReq proto.InternalMessageInfo

// 领取奖励返回值
type ReceiveAwardResp struct {
	// 奖励道具
	PropsList            []*PropDetail `protobuf:"bytes,1,rep,name=props_list,json=propsList,proto3" json:"props_list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReceiveAwardResp) Reset()         { *m = ReceiveAwardResp{} }
func (m *ReceiveAwardResp) String() string { return proto.CompactTextString(m) }
func (*ReceiveAwardResp) ProtoMessage()    {}
func (*ReceiveAwardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ReceiveAwardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveAwardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveAwardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveAwardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveAwardResp.Merge(m, src)
}
func (m *ReceiveAwardResp) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveAwardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveAwardResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveAwardResp proto.InternalMessageInfo

// 更新任务进度请求体
type UpdateTaskProgressReq struct {
	// 用户ID
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	// 任务ID
	TaskId int32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id"`
	// 任务完成增量
	Delta                int64    `protobuf:"varint,3,opt,name=delta,proto3" json:"delta"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTaskProgressReq) Reset()         { *m = UpdateTaskProgressReq{} }
func (m *UpdateTaskProgressReq) String() string { return proto.CompactTextString(m) }
func (*UpdateTaskProgressReq) ProtoMessage()    {}
func (*UpdateTaskProgressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *UpdateTaskProgressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTaskProgressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTaskProgressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTaskProgressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTaskProgressReq.Merge(m, src)
}
func (m *UpdateTaskProgressReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTaskProgressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTaskProgressReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTaskProgressReq proto.InternalMessageInfo

// 活跃度活动列表返回值
type ActivityTaskListResp struct {
	// 总开关
	IsOpen bool `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open"`
	// VIP等级限制
	VipLimit int32 `protobuf:"varint,2,opt,name=vip_limit,json=vipLimit,proto3" json:"vip_limit"`
	// 会员奖励倍数
	VipRewardMultiples int32 `protobuf:"varint,3,opt,name=vip_reward_multiples,json=vipRewardMultiples,proto3" json:"vip_reward_multiples"`
	// 今日活跃度
	TodayFinished int64 `protobuf:"varint,4,opt,name=today_finished,json=todayFinished,proto3" json:"today_finished"`
	// 本周活跃度
	WeekFinished int64 `protobuf:"varint,5,opt,name=week_finished,json=weekFinished,proto3" json:"week_finished"`
	// 今日宝箱
	TodayTreasureChest []*TreasureChest `protobuf:"bytes,6,rep,name=today_treasure_chest,json=todayTreasureChest,proto3" json:"today_treasure_chest"`
	// 本周宝箱
	WeekTreasureChest []*TreasureChest `protobuf:"bytes,7,rep,name=week_treasure_chest,json=weekTreasureChest,proto3" json:"week_treasure_chest"`
	// 任务列表
	TaskList             []*ActivityTask `protobuf:"bytes,8,rep,name=task_list,json=taskList,proto3" json:"task_list"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ActivityTaskListResp) Reset()         { *m = ActivityTaskListResp{} }
func (m *ActivityTaskListResp) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskListResp) ProtoMessage()    {}
func (*ActivityTaskListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *ActivityTaskListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskListResp.Merge(m, src)
}
func (m *ActivityTaskListResp) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskListResp proto.InternalMessageInfo

// 宝箱信息以及领取状态
type TreasureChest struct {
	// 宝箱ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 宝箱名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 奖励道具
	PropsList []*PropDetail `protobuf:"bytes,3,rep,name=props_list,json=propsList,proto3" json:"props_list"`
	// 所需活跃度
	Condition int64 `protobuf:"varint,4,opt,name=condition,proto3" json:"condition"`
	// 领取状态
	Status               TaskStatus `protobuf:"varint,5,opt,name=status,proto3,enum=dailyactivity.service.v1.TaskStatus" json:"status"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TreasureChest) Reset()         { *m = TreasureChest{} }
func (m *TreasureChest) String() string { return proto.CompactTextString(m) }
func (*TreasureChest) ProtoMessage()    {}
func (*TreasureChest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *TreasureChest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreasureChest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreasureChest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreasureChest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreasureChest.Merge(m, src)
}
func (m *TreasureChest) XXX_Size() int {
	return m.Size()
}
func (m *TreasureChest) XXX_DiscardUnknown() {
	xxx_messageInfo_TreasureChest.DiscardUnknown(m)
}

var xxx_messageInfo_TreasureChest proto.InternalMessageInfo

// 任务信息以及完成状态
type ActivityTask struct {
	// 任务ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 任务类型
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	// 任务标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	// 任务内容
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc"`
	// 完成任务可得活跃度
	ActiveIndicators int64 `protobuf:"varint,5,opt,name=active_indicators,json=activeIndicators,proto3" json:"active_indicators"`
	// 是否特殊任务
	IsSpecial bool `protobuf:"varint,6,opt,name=is_special,json=isSpecial,proto3" json:"is_special"`
	// 任务状态
	Status TaskStatus `protobuf:"varint,7,opt,name=status,proto3,enum=dailyactivity.service.v1.TaskStatus" json:"status"`
	// 完成量
	Completed int64 `protobuf:"varint,8,opt,name=completed,proto3" json:"completed"`
	// 总量
	Total int64 `protobuf:"varint,9,opt,name=total,proto3" json:"total"`
	// 奖励道具
	PropsList            []*PropDetail `protobuf:"bytes,10,rep,name=props_list,json=propsList,proto3" json:"props_list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ActivityTask) Reset()         { *m = ActivityTask{} }
func (m *ActivityTask) String() string { return proto.CompactTextString(m) }
func (*ActivityTask) ProtoMessage()    {}
func (*ActivityTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ActivityTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTask.Merge(m, src)
}
func (m *ActivityTask) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTask.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTask proto.InternalMessageInfo

// 道具信息
type PropDetail struct {
	// 道具ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 道具数量
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	// 道具名字
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropDetail) Reset()         { *m = PropDetail{} }
func (m *PropDetail) String() string { return proto.CompactTextString(m) }
func (*PropDetail) ProtoMessage()    {}
func (*PropDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *PropDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PropDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PropDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PropDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropDetail.Merge(m, src)
}
func (m *PropDetail) XXX_Size() int {
	return m.Size()
}
func (m *PropDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PropDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PropDetail proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dailyactivity.service.v1.ReceiveType", ReceiveType_name, ReceiveType_value)
	proto.RegisterEnum("dailyactivity.service.v1.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterType((*ActivityTaskReq)(nil), "dailyactivity.service.v1.ActivityTaskReq")
	proto.RegisterType((*ReceiveAwardReq)(nil), "dailyactivity.service.v1.ReceiveAwardReq")
	proto.RegisterType((*ReceiveAwardResp)(nil), "dailyactivity.service.v1.ReceiveAwardResp")
	proto.RegisterType((*UpdateTaskProgressReq)(nil), "dailyactivity.service.v1.UpdateTaskProgressReq")
	proto.RegisterType((*ActivityTaskListResp)(nil), "dailyactivity.service.v1.ActivityTaskListResp")
	proto.RegisterType((*TreasureChest)(nil), "dailyactivity.service.v1.TreasureChest")
	proto.RegisterType((*ActivityTask)(nil), "dailyactivity.service.v1.ActivityTask")
	proto.RegisterType((*PropDetail)(nil), "dailyactivity.service.v1.PropDetail")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0xaf, 0xec, 0xfa, 0xdf, 0xcb, 0x9f, 0x3a, 0x6c, 0xd2, 0x19, 0x5e, 0x17, 0x05, 0x42, 0x9a,
	0x65, 0xd9, 0x6a, 0x63, 0x19, 0xb0, 0x61, 0xc7, 0x38, 0xd9, 0x9f, 0x0c, 0x1d, 0x56, 0x30, 0xe9,
	0xa5, 0x17, 0x81, 0x91, 0x58, 0x87, 0x88, 0x2c, 0xb1, 0x22, 0xed, 0xc2, 0xd7, 0x61, 0x5f, 0x60,
	0x28, 0x86, 0x7d, 0x9c, 0x5d, 0x7b, 0x1c, 0xb0, 0xc3, 0x6e, 0xc2, 0x96, 0xed, 0xa4, 0x4f, 0x31,
	0x90, 0x94, 0x2c, 0xdb, 0xb3, 0x83, 0x0c, 0xeb, 0x45, 0x22, 0x7f, 0xef, 0x3d, 0xbe, 0xc7, 0x1f,
	0xdf, 0x7b, 0x24, 0x34, 0x08, 0x67, 0x1d, 0x1e, 0x47, 0x32, 0x42, 0x2d, 0x9f, 0xb0, 0x60, 0x4c,
	0x3c, 0xc9, 0x46, 0x4c, 0x8e, 0x3b, 0x82, 0xc6, 0x23, 0xe6, 0xd1, 0xce, 0xe8, 0xe3, 0xf6, 0xe3,
	0x3e, 0x93, 0x97, 0xc3, 0x8b, 0x8e, 0x17, 0x0d, 0xba, 0xfd, 0xa8, 0x1f, 0x75, 0xb5, 0xc1, 0xc5,
	0xf0, 0x85, 0x9e, 0xe9, 0x89, 0x1e, 0x99, 0x85, 0xda, 0xef, 0xf6, 0xa3, 0xa8, 0x1f, 0xd0, 0x42,
	0x8b, 0x0e, 0xb8, 0x1c, 0x67, 0xc2, 0x87, 0x99, 0x90, 0x70, 0xd6, 0x25, 0x61, 0x18, 0x49, 0x22,
	0x59, 0x14, 0x0a, 0x23, 0x75, 0x3e, 0x83, 0x7b, 0x47, 0x59, 0x00, 0xe7, 0x44, 0x5c, 0x61, 0xfa,
	0x12, 0xed, 0x42, 0x6d, 0x28, 0x68, 0xec, 0x32, 0xbf, 0x65, 0xed, 0x58, 0xfb, 0xe5, 0xde, 0x4a,
	0x9a, 0xd8, 0x39, 0x84, 0xab, 0x6a, 0x70, 0xea, 0x3b, 0xbf, 0x58, 0x70, 0x0f, 0x53, 0x8f, 0xb2,
	0x11, 0x3d, 0x7a, 0x45, 0x62, 0xff, 0xd6, 0x96, 0xe8, 0x39, 0xac, 0xc6, 0xc6, 0xd0, 0x95, 0x63,
	0x4e, 0x5b, 0xa5, 0x1d, 0x6b, 0x7f, 0xfd, 0xf0, 0x51, 0x67, 0x19, 0x1b, 0x9d, 0xcc, 0xcd, 0xf9,
	0x98, 0xd3, 0x5e, 0x33, 0x4d, 0xec, 0x19, 0x73, 0xbc, 0x12, 0x17, 0x62, 0x74, 0x00, 0x0d, 0x49,
	0xe2, 0x3e, 0x95, 0x2a, 0x86, 0xf2, 0x8e, 0xb5, 0x5f, 0xe9, 0xad, 0xa5, 0x89, 0x5d, 0x80, 0xb8,
	0x6e, 0x86, 0xa7, 0xbe, 0xd3, 0x87, 0xe6, 0xec, 0x06, 0x04, 0x47, 0x67, 0x00, 0x3c, 0x8e, 0xb8,
	0x70, 0x03, 0x26, 0x64, 0xcb, 0xda, 0x29, 0xef, 0xaf, 0x1c, 0xee, 0x2e, 0x8f, 0xec, 0x69, 0x1c,
	0xf1, 0x13, 0x2a, 0x09, 0x0b, 0x7a, 0xeb, 0x69, 0x62, 0x4f, 0xd9, 0xe2, 0x86, 0x1e, 0x3f, 0x61,
	0x42, 0x3a, 0x3f, 0x58, 0xb0, 0xf5, 0x8c, 0xfb, 0x44, 0x52, 0x45, 0xf1, 0xd3, 0x38, 0xea, 0xc7,
	0x54, 0x88, 0xdb, 0x13, 0xb6, 0x0b, 0x35, 0x49, 0xc4, 0x95, 0xd2, 0x2a, 0xe9, 0x2d, 0x69, 0xad,
	0x0c, 0xc2, 0x55, 0x35, 0x38, 0xf5, 0x91, 0x0d, 0x15, 0x9f, 0x06, 0x92, 0xe8, 0x6d, 0x97, 0x7b,
	0x8d, 0x34, 0xb1, 0x0d, 0x80, 0xcd, 0xcf, 0xb9, 0xbe, 0x0b, 0x9b, 0xd3, 0x67, 0xad, 0x62, 0xd3,
	0x9b, 0xde, 0x85, 0x1a, 0x13, 0x6e, 0xc4, 0x69, 0xa8, 0xa3, 0xa8, 0x9b, 0xf5, 0x33, 0x08, 0x57,
	0x99, 0xf8, 0x8e, 0xd3, 0x50, 0x51, 0x3b, 0x62, 0xdc, 0x0d, 0xd8, 0x80, 0xc9, 0x2c, 0x0e, 0x4d,
	0xed, 0x04, 0xc4, 0xf5, 0x11, 0xe3, 0x4f, 0xd4, 0x08, 0x7d, 0x03, 0x9b, 0x0a, 0x8e, 0xa9, 0x22,
	0xd6, 0x1d, 0x0c, 0x03, 0xc9, 0x78, 0x40, 0x45, 0x76, 0x22, 0xad, 0x34, 0xb1, 0x17, 0xca, 0x31,
	0x1a, 0x31, 0x8e, 0x35, 0xf8, 0x6d, 0x8e, 0xa1, 0xcf, 0x61, 0x5d, 0x46, 0x3e, 0x19, 0xbb, 0x2f,
	0x58, 0xc8, 0xc4, 0x25, 0xf5, 0x5b, 0x77, 0xf5, 0x06, 0x51, 0x9a, 0xd8, 0x73, 0x12, 0xbc, 0xa6,
	0xe7, 0x5f, 0x66, 0x53, 0xf4, 0x29, 0xac, 0xbd, 0xa2, 0xf4, 0xaa, 0xb0, 0xac, 0x68, 0xcb, 0x8d,
	0x34, 0xb1, 0x67, 0x05, 0x78, 0x55, 0x4d, 0x27, 0x76, 0x02, 0x36, 0xcd, 0xc2, 0x32, 0xa6, 0x44,
	0x0c, 0x63, 0xea, 0x7a, 0x97, 0x54, 0xc8, 0x56, 0x55, 0xe7, 0xc3, 0xfb, 0xcb, 0xf3, 0xe1, 0x3c,
	0xd3, 0x3f, 0x56, 0xea, 0x66, 0x9f, 0x8b, 0x16, 0xc2, 0x48, 0xa3, 0x33, 0xda, 0x88, 0xc3, 0x7d,
	0x1d, 0xd3, 0x9c, 0xcf, 0xda, 0x7f, 0xf3, 0xf9, 0x4e, 0x9a, 0xd8, 0x8b, 0xd6, 0xc1, 0x1b, 0x0a,
	0x9c, 0xf5, 0x88, 0x55, 0xb1, 0x88, 0x2b, 0x93, 0xeb, 0x75, 0xed, 0x67, 0x6f, 0xb9, 0x9f, 0xe9,
	0xd4, 0xc9, 0x8b, 0x2a, 0x33, 0x56, 0x45, 0x65, 0xf2, 0xc9, 0xf9, 0xb1, 0x04, 0x6b, 0xb3, 0x5e,
	0x1e, 0x40, 0x29, 0x4b, 0xef, 0x4a, 0xaf, 0x9a, 0x26, 0x76, 0x89, 0xf9, 0xb8, 0xc4, 0x7c, 0xf4,
	0x10, 0xee, 0x86, 0x64, 0x60, 0xca, 0xbf, 0xd1, 0xab, 0xa7, 0x89, 0xad, 0xe7, 0x58, 0x7f, 0xe7,
	0x0a, 0xb1, 0xfc, 0x56, 0x0a, 0x11, 0x7d, 0x08, 0x0d, 0x2f, 0x0a, 0x7d, 0xa6, 0x1a, 0x60, 0x96,
	0x45, 0x7a, 0x23, 0x13, 0x10, 0x17, 0x43, 0xf4, 0x35, 0x54, 0x85, 0x24, 0x72, 0x28, 0x74, 0xd6,
	0xac, 0xdf, 0xe4, 0x5d, 0x51, 0x72, 0xa6, 0x75, 0x7b, 0x90, 0x26, 0x76, 0x66, 0x87, 0xb3, 0xbf,
	0xf3, 0x57, 0x19, 0x56, 0xa7, 0xd9, 0xbb, 0x89, 0x92, 0x49, 0x47, 0xac, 0x18, 0x4a, 0x74, 0x8b,
	0xd3, 0x5f, 0x55, 0xe0, 0x92, 0xc9, 0x80, 0xea, 0x2a, 0x6a, 0x98, 0x02, 0xd7, 0x00, 0x36, 0x3f,
	0x65, 0xee, 0x53, 0xe1, 0xe9, 0x9d, 0x65, 0x8c, 0xaa, 0x39, 0xd6, 0x5f, 0xd4, 0x83, 0x0d, 0x1d,
	0x3b, 0x75, 0x59, 0xe8, 0x33, 0x8f, 0xc8, 0x28, 0x16, 0x59, 0x41, 0x6c, 0xa5, 0x89, 0xfd, 0x6f,
	0x21, 0x6e, 0x1a, 0xe8, 0x74, 0x82, 0xa0, 0xc7, 0x00, 0x4c, 0xb8, 0x82, 0x53, 0x8f, 0x91, 0xa0,
	0x55, 0xd5, 0xcd, 0x42, 0xf3, 0x5d, 0xa0, 0xb8, 0xc1, 0xc4, 0x99, 0x19, 0x4e, 0x51, 0x58, 0xfb,
	0x7f, 0x14, 0x9a, 0x93, 0x1b, 0xf0, 0x80, 0x4a, 0xea, 0xb7, 0xea, 0xd3, 0x27, 0x97, 0x81, 0xb8,
	0x18, 0x6a, 0xa2, 0x22, 0x49, 0x82, 0x56, 0xa3, 0xe8, 0x84, 0x1a, 0xc0, 0xe6, 0x37, 0x97, 0x5c,
	0xf0, 0x76, 0xba, 0xbc, 0x07, 0x50, 0x28, 0x2e, 0x3d, 0x62, 0x1b, 0x2a, 0x5e, 0x34, 0x0c, 0xf3,
	0x0e, 0xaa, 0x63, 0xd3, 0x00, 0x36, 0xbf, 0x49, 0x59, 0x94, 0x17, 0x95, 0xc5, 0xc1, 0x31, 0xac,
	0x4c, 0xdd, 0x86, 0x68, 0x05, 0x6a, 0xa7, 0xe1, 0x88, 0x04, 0xcc, 0x6f, 0xde, 0x41, 0x5b, 0xb0,
	0xa1, 0x1a, 0xf5, 0x4c, 0xf5, 0x35, 0x2d, 0xd4, 0x84, 0x55, 0x45, 0x6e, 0xde, 0xdc, 0x9a, 0xa5,
	0x83, 0x63, 0x80, 0x82, 0x6e, 0xb5, 0xc6, 0x09, 0x13, 0xc7, 0x24, 0x56, 0x6b, 0x00, 0x54, 0x9f,
	0x85, 0x7e, 0x14, 0xd2, 0xa6, 0x85, 0xd6, 0x01, 0x8e, 0x3c, 0x8f, 0x72, 0x49, 0x2e, 0x02, 0xda,
	0x2c, 0xa1, 0x55, 0xa8, 0x67, 0xbe, 0xfd, 0x66, 0xf9, 0xf0, 0xf7, 0x32, 0xac, 0x9d, 0x28, 0xc6,
	0xf2, 0xcc, 0x46, 0x3f, 0x5b, 0x70, 0xff, 0x2b, 0x2a, 0xe7, 0xaf, 0x18, 0xf4, 0xc1, 0xed, 0x7a,
	0x0a, 0xa6, 0x2f, 0xdb, 0x9d, 0xdb, 0xa9, 0xe6, 0x37, 0x97, 0xf3, 0xe8, 0xfb, 0xdf, 0xfe, 0x7e,
	0x5d, 0xb2, 0x9d, 0xf7, 0xba, 0xb9, 0x49, 0x77, 0x51, 0x04, 0x3f, 0x59, 0xb0, 0x99, 0x5f, 0xf5,
	0x99, 0x4c, 0x5f, 0xf9, 0x37, 0x85, 0x36, 0xf7, 0xb6, 0x69, 0x1f, 0xdc, 0x56, 0x55, 0x70, 0x67,
	0x4f, 0x87, 0xb5, 0xe3, 0x6c, 0x17, 0x61, 0x2d, 0x74, 0xff, 0xda, 0x82, 0xb6, 0x79, 0x18, 0x4c,
	0x87, 0x9c, 0x3f, 0x10, 0x50, 0x77, 0xb9, 0xcb, 0x85, 0xcf, 0x89, 0xf6, 0x83, 0x8e, 0x79, 0xeb,
	0x75, 0xf2, 0x87, 0x60, 0xe7, 0x0b, 0xf5, 0x10, 0x74, 0x3e, 0xd2, 0xf1, 0xec, 0x39, 0xbb, 0x45,
	0x3c, 0xcb, 0xdd, 0xf6, 0xb6, 0xde, 0xfc, 0xb9, 0x7d, 0xe7, 0xcd, 0xf5, 0xb6, 0xf5, 0xeb, 0xf5,
	0xb6, 0xf5, 0xc7, 0xf5, 0xb6, 0xf5, 0xbc, 0x4c, 0x38, 0xbb, 0xa8, 0xea, 0x45, 0x3f, 0xf9, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x43, 0x1f, 0x95, 0x9f, 0xc1, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DailyActivityClient is the client API for DailyActivity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DailyActivityClient interface {
	// 获取活跃度活动列表
	GetActivityTaskList(ctx context.Context, in *ActivityTaskReq, opts ...grpc.CallOption) (*ActivityTaskListResp, error)
	// 领取活跃度活动奖励
	ReceiveActivityAward(ctx context.Context, in *ReceiveAwardReq, opts ...grpc.CallOption) (*ReceiveAwardResp, error)
	// 更新任务完成进度
	UpdateActivityTaskProgress(ctx context.Context, in *UpdateTaskProgressReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dailyActivityClient struct {
	cc *grpc.ClientConn
}

func NewDailyActivityClient(cc *grpc.ClientConn) DailyActivityClient {
	return &dailyActivityClient{cc}
}

func (c *dailyActivityClient) GetActivityTaskList(ctx context.Context, in *ActivityTaskReq, opts ...grpc.CallOption) (*ActivityTaskListResp, error) {
	out := new(ActivityTaskListResp)
	err := c.cc.Invoke(ctx, "/dailyactivity.service.v1.DailyActivity/GetActivityTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyActivityClient) ReceiveActivityAward(ctx context.Context, in *ReceiveAwardReq, opts ...grpc.CallOption) (*ReceiveAwardResp, error) {
	out := new(ReceiveAwardResp)
	err := c.cc.Invoke(ctx, "/dailyactivity.service.v1.DailyActivity/ReceiveActivityAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyActivityClient) UpdateActivityTaskProgress(ctx context.Context, in *UpdateTaskProgressReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dailyactivity.service.v1.DailyActivity/UpdateActivityTaskProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DailyActivityServer is the server API for DailyActivity service.
type DailyActivityServer interface {
	// 获取活跃度活动列表
	GetActivityTaskList(context.Context, *ActivityTaskReq) (*ActivityTaskListResp, error)
	// 领取活跃度活动奖励
	ReceiveActivityAward(context.Context, *ReceiveAwardReq) (*ReceiveAwardResp, error)
	// 更新任务完成进度
	UpdateActivityTaskProgress(context.Context, *UpdateTaskProgressReq) (*emptypb.Empty, error)
}

// UnimplementedDailyActivityServer can be embedded to have forward compatible implementations.
type UnimplementedDailyActivityServer struct {
}

func (*UnimplementedDailyActivityServer) GetActivityTaskList(ctx context.Context, req *ActivityTaskReq) (*ActivityTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityTaskList not implemented")
}
func (*UnimplementedDailyActivityServer) ReceiveActivityAward(ctx context.Context, req *ReceiveAwardReq) (*ReceiveAwardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActivityAward not implemented")
}
func (*UnimplementedDailyActivityServer) UpdateActivityTaskProgress(ctx context.Context, req *UpdateTaskProgressReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivityTaskProgress not implemented")
}

func RegisterDailyActivityServer(s *grpc.Server, srv DailyActivityServer) {
	s.RegisterService(&_DailyActivity_serviceDesc, srv)
}

func _DailyActivity_GetActivityTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyActivityServer).GetActivityTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dailyactivity.service.v1.DailyActivity/GetActivityTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyActivityServer).GetActivityTaskList(ctx, req.(*ActivityTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyActivity_ReceiveActivityAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyActivityServer).ReceiveActivityAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dailyactivity.service.v1.DailyActivity/ReceiveActivityAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyActivityServer).ReceiveActivityAward(ctx, req.(*ReceiveAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyActivity_UpdateActivityTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyActivityServer).UpdateActivityTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dailyactivity.service.v1.DailyActivity/UpdateActivityTaskProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyActivityServer).UpdateActivityTaskProgress(ctx, req.(*UpdateTaskProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DailyActivity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dailyactivity.service.v1.DailyActivity",
	HandlerType: (*DailyActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivityTaskList",
			Handler:    _DailyActivity_GetActivityTaskList_Handler,
		},
		{
			MethodName: "ReceiveActivityAward",
			Handler:    _DailyActivity_ReceiveActivityAward_Handler,
		},
		{
			MethodName: "UpdateActivityTaskProgress",
			Handler:    _DailyActivity_UpdateActivityTaskProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ActivityTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReceiveAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceiveAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiveType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReceiveType))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReceiveAwardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveAwardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceiveAwardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PropsList) > 0 {
		for iNdEx := len(m.PropsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PropsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTaskProgressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTaskProgressReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTaskProgressReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Delta != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Delta))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.WeekTreasureChest) > 0 {
		for iNdEx := len(m.WeekTreasureChest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeekTreasureChest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TodayTreasureChest) > 0 {
		for iNdEx := len(m.TodayTreasureChest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TodayTreasureChest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.WeekFinished != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WeekFinished))
		i--
		dAtA[i] = 0x28
	}
	if m.TodayFinished != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TodayFinished))
		i--
		dAtA[i] = 0x20
	}
	if m.VipRewardMultiples != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipRewardMultiples))
		i--
		dAtA[i] = 0x18
	}
	if m.VipLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TreasureChest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasureChest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreasureChest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Condition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PropsList) > 0 {
		for iNdEx := len(m.PropsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PropsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PropsList) > 0 {
		for iNdEx := len(m.PropsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PropsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x48
	}
	if m.Completed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Completed))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.IsSpecial {
		i--
		if m.IsSpecial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ActiveIndicators != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActiveIndicators))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PropDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PropDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActivityTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReceiveAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.ReceiveType != 0 {
		n += 1 + sovApi(uint64(m.ReceiveType))
	}
	if m.TargetId != 0 {
		n += 1 + sovApi(uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReceiveAwardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PropsList) > 0 {
		for _, e := range m.PropsList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTaskProgressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.TaskId != 0 {
		n += 1 + sovApi(uint64(m.TaskId))
	}
	if m.Delta != 0 {
		n += 1 + sovApi(uint64(m.Delta))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityTaskListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOpen {
		n += 2
	}
	if m.VipLimit != 0 {
		n += 1 + sovApi(uint64(m.VipLimit))
	}
	if m.VipRewardMultiples != 0 {
		n += 1 + sovApi(uint64(m.VipRewardMultiples))
	}
	if m.TodayFinished != 0 {
		n += 1 + sovApi(uint64(m.TodayFinished))
	}
	if m.WeekFinished != 0 {
		n += 1 + sovApi(uint64(m.WeekFinished))
	}
	if len(m.TodayTreasureChest) > 0 {
		for _, e := range m.TodayTreasureChest {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.WeekTreasureChest) > 0 {
		for _, e := range m.WeekTreasureChest {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TreasureChest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.PropsList) > 0 {
		for _, e := range m.PropsList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Condition != 0 {
		n += 1 + sovApi(uint64(m.Condition))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ActiveIndicators != 0 {
		n += 1 + sovApi(uint64(m.ActiveIndicators))
	}
	if m.IsSpecial {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Completed != 0 {
		n += 1 + sovApi(uint64(m.Completed))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.PropsList) > 0 {
		for _, e := range m.PropsList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PropDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActivityTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveType", wireType)
			}
			m.ReceiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveType |= ReceiveType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveAwardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveAwardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveAwardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropsList = append(m.PropsList, &PropDetail{})
			if err := m.PropsList[len(m.PropsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTaskProgressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTaskProgressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTaskProgressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLimit", wireType)
			}
			m.VipLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipRewardMultiples", wireType)
			}
			m.VipRewardMultiples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipRewardMultiples |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayFinished", wireType)
			}
			m.TodayFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayFinished |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekFinished", wireType)
			}
			m.WeekFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekFinished |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayTreasureChest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TodayTreasureChest = append(m.TodayTreasureChest, &TreasureChest{})
			if err := m.TodayTreasureChest[len(m.TodayTreasureChest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekTreasureChest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeekTreasureChest = append(m.WeekTreasureChest, &TreasureChest{})
			if err := m.WeekTreasureChest[len(m.WeekTreasureChest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &ActivityTask{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreasureChest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureChest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureChest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropsList = append(m.PropsList, &PropDetail{})
			if err := m.PropsList[len(m.PropsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveIndicators", wireType)
			}
			m.ActiveIndicators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveIndicators |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSpecial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSpecial = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			m.Completed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Completed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropsList = append(m.PropsList, &PropDetail{})
			if err := m.PropsList[len(m.PropsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PropDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
