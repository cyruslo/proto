// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathHalldrawPlayer_DrawList = "/halldraw/list"
var PathHalldrawPlayer_Draw = "/halldraw/draw"
var PathHalldrawPlayer_Compose = "/halldraw/compose"
var PathHalldrawPlayer_Refresh = "/halldraw/refresh"
var PathHalldrawPlayer_Share = "/halldraw/share"
var PathHalldrawPlayer_Exchange = "/halldraw/exchange"
var PathHalldrawPlayer_Record = "/halldraw/record"
var PathHalldrawPlayer_GetActBoxReward = "/halldraw/GetActBoxReward"
var PathHalldrawPlayer_GetActBoxHistory = "/halldraw/GetActBoxHistory"
var PathHalldrawPlayer_GetActBoxRewardStatus = "/halldraw/GetActBoxRewardStatus"

// HalldrawBMServer is the server API for Halldraw service.
type HalldrawBMServer interface {
	Player_DrawList(ctx context.Context, req *Player_DrawListReq) (resp *Player_DrawListRsp, err error)

	Player_Draw(ctx context.Context, req *Player_DrawReq) (resp *Player_DrawRsp, err error)

	Player_Compose(ctx context.Context, req *Player_ComposeReq) (resp *Player_ComposeRsp, err error)

	Player_Refresh(ctx context.Context, req *Player_RefreshReq) (resp *Player_RefreshRsp, err error)

	Player_Share(ctx context.Context, req *Player_ShareReq) (resp *Player_ShareRsp, err error)

	Player_Exchange(ctx context.Context, req *Player_ExchangeReq) (resp *Player_ExchangeRsp, err error)

	Player_Record(ctx context.Context, req *Player_RecordReq) (resp *Player_RecordRsp, err error)

	Player_GetActBoxReward(ctx context.Context, req *Player_GetActBoxRewardReq) (resp *Player_GetActBoxRewardRsp, err error)

	Player_GetActBoxHistory(ctx context.Context, req *Player_GetActBoxHistoryReq) (resp *Player_GetActBoxHistoryRsp, err error)

	Player_GetActBoxRewardStatus(ctx context.Context, req *Player_GetActBoxRewardStatusReq) (resp *Player_GetActBoxRewardStatusRsp, err error)
}

var HalldrawSvc HalldrawBMServer

func halldrawPlayer_DrawList(c *bm.Context) {
	p := new(Player_DrawListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_DrawList(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_Draw(c *bm.Context) {
	p := new(Player_DrawReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_Draw(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_Compose(c *bm.Context) {
	p := new(Player_ComposeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_Compose(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_Refresh(c *bm.Context) {
	p := new(Player_RefreshReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_Refresh(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_Share(c *bm.Context) {
	p := new(Player_ShareReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_Share(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_Exchange(c *bm.Context) {
	p := new(Player_ExchangeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_Exchange(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_Record(c *bm.Context) {
	p := new(Player_RecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_Record(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_GetActBoxReward(c *bm.Context) {
	p := new(Player_GetActBoxRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_GetActBoxReward(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_GetActBoxHistory(c *bm.Context) {
	p := new(Player_GetActBoxHistoryReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_GetActBoxHistory(c, p)
	c.JSON(resp, err)
}

func halldrawPlayer_GetActBoxRewardStatus(c *bm.Context) {
	p := new(Player_GetActBoxRewardStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HalldrawSvc.Player_GetActBoxRewardStatus(c, p)
	c.JSON(resp, err)
}

// RegisterHalldrawBMServer Register the blademaster route
func RegisterHalldrawBMServer(e *bm.Engine, server HalldrawBMServer) {
	HalldrawSvc = server
	e.POST("/halldraw/list", halldrawPlayer_DrawList)
	e.POST("/halldraw/draw", halldrawPlayer_Draw)
	e.POST("/halldraw/compose", halldrawPlayer_Compose)
	e.POST("/halldraw/refresh", halldrawPlayer_Refresh)
	e.POST("/halldraw/share", halldrawPlayer_Share)
	e.POST("/halldraw/exchange", halldrawPlayer_Exchange)
	e.POST("/halldraw/record", halldrawPlayer_Record)
	e.POST("/halldraw/GetActBoxReward", halldrawPlayer_GetActBoxReward)
	e.POST("/halldraw/GetActBoxHistory", halldrawPlayer_GetActBoxHistory)
	e.POST("/halldraw/GetActBoxRewardStatus", halldrawPlayer_GetActBoxRewardStatus)
}
