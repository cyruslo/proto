// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GameCommand int32

const (
	// Test
	GameCommand_Test GameCommand = 0
	// 抽奖
	GameCommand_Player_Draw GameCommand = 1
	// 合成
	GameCommand_Player_Compose GameCommand = 2
	// 刷新
	GameCommand_Player_Refresh GameCommand = 3
	// 玩家抽奖列表
	GameCommand_Player_DrawList GameCommand = 4
	// 上报分享次数
	GameCommand_Player_Share GameCommand = 5
	// 碎片兑换
	GameCommand_Player_Exchange GameCommand = 6
	// 获取记录
	GameCommand_Player_Record GameCommand = 7
	// 请求欧皇宝箱奖励
	GameCommand_Player_GetActBoxReward GameCommand = 8
	// 请求欧皇宝箱领奖记录
	GameCommand_Player_GetActBoxHistory GameCommand = 9
	// 请求宝箱领取状态
	GameCommand_Player_GetActBoxRewardStatus GameCommand = 10
)

var GameCommand_name = map[int32]string{
	0:  "Test",
	1:  "Player_Draw",
	2:  "Player_Compose",
	3:  "Player_Refresh",
	4:  "Player_DrawList",
	5:  "Player_Share",
	6:  "Player_Exchange",
	7:  "Player_Record",
	8:  "Player_GetActBoxReward",
	9:  "Player_GetActBoxHistory",
	10: "Player_GetActBoxRewardStatus",
}

var GameCommand_value = map[string]int32{
	"Test":                         0,
	"Player_Draw":                  1,
	"Player_Compose":               2,
	"Player_Refresh":               3,
	"Player_DrawList":              4,
	"Player_Share":                 5,
	"Player_Exchange":              6,
	"Player_Record":                7,
	"Player_GetActBoxReward":       8,
	"Player_GetActBoxHistory":      9,
	"Player_GetActBoxRewardStatus": 10,
}

func (x GameCommand) String() string {
	return proto.EnumName(GameCommand_name, int32(x))
}

func (GameCommand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type ErrCode int32

const (
	ErrCode_Succ                    ErrCode = 0
	ErrCode_Fragment_Not_Enough     ErrCode = 10000
	ErrCode_Fragment_Update         ErrCode = 10001
	ErrCode_Fragment_Deduct         ErrCode = 10002
	ErrCode_Fragment_Compose        ErrCode = 10003
	ErrCode_Draw_List_NotExist      ErrCode = 10004
	ErrCode_Prop_Update             ErrCode = 10005
	ErrCode_Coin_Deduct             ErrCode = 10006
	ErrCode_Draw_InGame             ErrCode = 10007
	ErrCode_Refresh_Times_NotEnough ErrCode = 10008
	ErrCode_IsShared                ErrCode = 10009
	ErrCode_DrawInterval            ErrCode = 10010
	ErrCode_DrawParameter           ErrCode = 10011
	ErrCode_ExchangeFail            ErrCode = 10012
	ErrCode_ActiveIsColse           ErrCode = 10013
	ErrCode_TokenFail               ErrCode = 10014
	ErrCode_ActBox_OutTime          ErrCode = 10015
	ErrCode_ActBox_Had_Got          ErrCode = 10016
	ErrCode_Get_Box_Fail            ErrCode = 10017
)

var ErrCode_name = map[int32]string{
	0:     "Succ",
	10000: "Fragment_Not_Enough",
	10001: "Fragment_Update",
	10002: "Fragment_Deduct",
	10003: "Fragment_Compose",
	10004: "Draw_List_NotExist",
	10005: "Prop_Update",
	10006: "Coin_Deduct",
	10007: "Draw_InGame",
	10008: "Refresh_Times_NotEnough",
	10009: "IsShared",
	10010: "DrawInterval",
	10011: "DrawParameter",
	10012: "ExchangeFail",
	10013: "ActiveIsColse",
	10014: "TokenFail",
	10015: "ActBox_OutTime",
	10016: "ActBox_Had_Got",
	10017: "Get_Box_Fail",
}

var ErrCode_value = map[string]int32{
	"Succ":                    0,
	"Fragment_Not_Enough":     10000,
	"Fragment_Update":         10001,
	"Fragment_Deduct":         10002,
	"Fragment_Compose":        10003,
	"Draw_List_NotExist":      10004,
	"Prop_Update":             10005,
	"Coin_Deduct":             10006,
	"Draw_InGame":             10007,
	"Refresh_Times_NotEnough": 10008,
	"IsShared":                10009,
	"DrawInterval":            10010,
	"DrawParameter":           10011,
	"ExchangeFail":            10012,
	"ActiveIsColse":           10013,
	"TokenFail":               10014,
	"ActBox_OutTime":          10015,
	"ActBox_Had_Got":          10016,
	"Get_Box_Fail":            10017,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type Props struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num                  int32    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Level                int32    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Position             int32    `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Props) Reset()         { *m = Props{} }
func (m *Props) String() string { return proto.CompactTextString(m) }
func (*Props) ProtoMessage()    {}
func (*Props) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *Props) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Props) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Props.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Props) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Props.Merge(m, src)
}
func (m *Props) XXX_Size() int {
	return m.Size()
}
func (m *Props) XXX_DiscardUnknown() {
	xxx_messageInfo_Props.DiscardUnknown(m)
}

var xxx_messageInfo_Props proto.InternalMessageInfo

type Player_ExchangeReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_ExchangeReq) Reset()         { *m = Player_ExchangeReq{} }
func (m *Player_ExchangeReq) String() string { return proto.CompactTextString(m) }
func (*Player_ExchangeReq) ProtoMessage()    {}
func (*Player_ExchangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *Player_ExchangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_ExchangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_ExchangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_ExchangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_ExchangeReq.Merge(m, src)
}
func (m *Player_ExchangeReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_ExchangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_ExchangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_ExchangeReq proto.InternalMessageInfo

type Player_ExchangeRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Fragment             int32    `protobuf:"varint,2,opt,name=fragment,proto3" json:"fragment" validate:"required"`
	RetCoin              int32    `protobuf:"varint,3,opt,name=ret_coin,json=retCoin,proto3" json:"ret_coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_ExchangeRsp) Reset()         { *m = Player_ExchangeRsp{} }
func (m *Player_ExchangeRsp) String() string { return proto.CompactTextString(m) }
func (*Player_ExchangeRsp) ProtoMessage()    {}
func (*Player_ExchangeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *Player_ExchangeRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_ExchangeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_ExchangeRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_ExchangeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_ExchangeRsp.Merge(m, src)
}
func (m *Player_ExchangeRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_ExchangeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_ExchangeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_ExchangeRsp proto.InternalMessageInfo

type Player_DrawListReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_DrawListReq) Reset()         { *m = Player_DrawListReq{} }
func (m *Player_DrawListReq) String() string { return proto.CompactTextString(m) }
func (*Player_DrawListReq) ProtoMessage()    {}
func (*Player_DrawListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *Player_DrawListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_DrawListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_DrawListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_DrawListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_DrawListReq.Merge(m, src)
}
func (m *Player_DrawListReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_DrawListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_DrawListReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_DrawListReq proto.InternalMessageInfo

type Player_DrawListRsp struct {
	Items                []*Props `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TimeStart            int64    `protobuf:"varint,2,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	TimeEnd              int64    `protobuf:"varint,3,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	Fragment             int32    `protobuf:"varint,4,opt,name=fragment,proto3" json:"fragment,omitempty"`
	RefreshTimes         int32    `protobuf:"varint,5,opt,name=refresh_times,json=refreshTimes,proto3" json:"refresh_times" validate:"required"`
	ConsumeType          int32    `protobuf:"varint,6,opt,name=consume_type,json=consumeType,proto3" json:"consume_type,omitempty"`
	ConsumeNum           int32    `protobuf:"varint,7,opt,name=consume_num,json=consumeNum,proto3" json:"consume_num,omitempty"`
	NeedFragment         int32    `protobuf:"varint,8,opt,name=need_fragment,json=needFragment,proto3" json:"need_fragment,omitempty"`
	Have_Dragon          bool     `protobuf:"varint,9,opt,name=have_Dragon,json=haveDragon,proto3" json:"have_Dragon" validate:"required"`
	Result               int32    `protobuf:"varint,10,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_DrawListRsp) Reset()         { *m = Player_DrawListRsp{} }
func (m *Player_DrawListRsp) String() string { return proto.CompactTextString(m) }
func (*Player_DrawListRsp) ProtoMessage()    {}
func (*Player_DrawListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *Player_DrawListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_DrawListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_DrawListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_DrawListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_DrawListRsp.Merge(m, src)
}
func (m *Player_DrawListRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_DrawListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_DrawListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_DrawListRsp proto.InternalMessageInfo

type Player_DrawReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Times                int32    `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	NickName             string   `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_DrawReq) Reset()         { *m = Player_DrawReq{} }
func (m *Player_DrawReq) String() string { return proto.CompactTextString(m) }
func (*Player_DrawReq) ProtoMessage()    {}
func (*Player_DrawReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *Player_DrawReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_DrawReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_DrawReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_DrawReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_DrawReq.Merge(m, src)
}
func (m *Player_DrawReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_DrawReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_DrawReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_DrawReq proto.InternalMessageInfo

type Player_DrawRsp struct {
	Items                []*Props `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Result               int32    `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	RetCoin              int32    `protobuf:"varint,3,opt,name=ret_coin,json=retCoin,proto3" json:"ret_coin,omitempty"`
	CoinNum              int32    `protobuf:"varint,4,opt,name=coin_num,json=coinNum,proto3" json:"coin_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_DrawRsp) Reset()         { *m = Player_DrawRsp{} }
func (m *Player_DrawRsp) String() string { return proto.CompactTextString(m) }
func (*Player_DrawRsp) ProtoMessage()    {}
func (*Player_DrawRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *Player_DrawRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_DrawRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_DrawRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_DrawRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_DrawRsp.Merge(m, src)
}
func (m *Player_DrawRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_DrawRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_DrawRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_DrawRsp proto.InternalMessageInfo

type Player_ComposeReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_ComposeReq) Reset()         { *m = Player_ComposeReq{} }
func (m *Player_ComposeReq) String() string { return proto.CompactTextString(m) }
func (*Player_ComposeReq) ProtoMessage()    {}
func (*Player_ComposeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *Player_ComposeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_ComposeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_ComposeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_ComposeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_ComposeReq.Merge(m, src)
}
func (m *Player_ComposeReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_ComposeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_ComposeReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_ComposeReq proto.InternalMessageInfo

type Player_ComposeRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Item                 *Props   `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	RetCoin              int32    `protobuf:"varint,3,opt,name=ret_coin,json=retCoin,proto3" json:"ret_coin,omitempty"`
	Fragment             int32    `protobuf:"varint,4,opt,name=fragment,proto3" json:"fragment" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_ComposeRsp) Reset()         { *m = Player_ComposeRsp{} }
func (m *Player_ComposeRsp) String() string { return proto.CompactTextString(m) }
func (*Player_ComposeRsp) ProtoMessage()    {}
func (*Player_ComposeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *Player_ComposeRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_ComposeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_ComposeRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_ComposeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_ComposeRsp.Merge(m, src)
}
func (m *Player_ComposeRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_ComposeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_ComposeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_ComposeRsp proto.InternalMessageInfo

type Player_RefreshReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_RefreshReq) Reset()         { *m = Player_RefreshReq{} }
func (m *Player_RefreshReq) String() string { return proto.CompactTextString(m) }
func (*Player_RefreshReq) ProtoMessage()    {}
func (*Player_RefreshReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *Player_RefreshReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_RefreshReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_RefreshReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_RefreshReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_RefreshReq.Merge(m, src)
}
func (m *Player_RefreshReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_RefreshReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_RefreshReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_RefreshReq proto.InternalMessageInfo

type Player_RefreshRsp struct {
	Items                []*Props `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	RefreshTimes         int32    `protobuf:"varint,2,opt,name=refresh_times,json=refreshTimes,proto3" json:"refresh_times" validate:"required"`
	Result               int32    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	ConsumeType          int32    `protobuf:"varint,4,opt,name=consume_type,json=consumeType,proto3" json:"consume_type,omitempty"`
	ConsumeNum           int32    `protobuf:"varint,5,opt,name=consume_num,json=consumeNum,proto3" json:"consume_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_RefreshRsp) Reset()         { *m = Player_RefreshRsp{} }
func (m *Player_RefreshRsp) String() string { return proto.CompactTextString(m) }
func (*Player_RefreshRsp) ProtoMessage()    {}
func (*Player_RefreshRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *Player_RefreshRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_RefreshRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_RefreshRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_RefreshRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_RefreshRsp.Merge(m, src)
}
func (m *Player_RefreshRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_RefreshRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_RefreshRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_RefreshRsp proto.InternalMessageInfo

type Player_ShareReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_ShareReq) Reset()         { *m = Player_ShareReq{} }
func (m *Player_ShareReq) String() string { return proto.CompactTextString(m) }
func (*Player_ShareReq) ProtoMessage()    {}
func (*Player_ShareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *Player_ShareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_ShareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_ShareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_ShareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_ShareReq.Merge(m, src)
}
func (m *Player_ShareReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_ShareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_ShareReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_ShareReq proto.InternalMessageInfo

type Player_ShareRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	RefreshTimes         int32    `protobuf:"varint,2,opt,name=refresh_times,json=refreshTimes,proto3" json:"refresh_times" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_ShareRsp) Reset()         { *m = Player_ShareRsp{} }
func (m *Player_ShareRsp) String() string { return proto.CompactTextString(m) }
func (*Player_ShareRsp) ProtoMessage()    {}
func (*Player_ShareRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *Player_ShareRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_ShareRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_ShareRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_ShareRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_ShareRsp.Merge(m, src)
}
func (m *Player_ShareRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_ShareRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_ShareRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_ShareRsp proto.InternalMessageInfo

type Player_RecordReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_RecordReq) Reset()         { *m = Player_RecordReq{} }
func (m *Player_RecordReq) String() string { return proto.CompactTextString(m) }
func (*Player_RecordReq) ProtoMessage()    {}
func (*Player_RecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *Player_RecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_RecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_RecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_RecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_RecordReq.Merge(m, src)
}
func (m *Player_RecordReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_RecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_RecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_RecordReq proto.InternalMessageInfo

type Record struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NickName             string   `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

type Player_RecordRsp struct {
	Records              []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Result               int32     `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Player_RecordRsp) Reset()         { *m = Player_RecordRsp{} }
func (m *Player_RecordRsp) String() string { return proto.CompactTextString(m) }
func (*Player_RecordRsp) ProtoMessage()    {}
func (*Player_RecordRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *Player_RecordRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_RecordRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_RecordRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_RecordRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_RecordRsp.Merge(m, src)
}
func (m *Player_RecordRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_RecordRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_RecordRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_RecordRsp proto.InternalMessageInfo

type Player_GetActBoxRewardStatusReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_GetActBoxRewardStatusReq) Reset()         { *m = Player_GetActBoxRewardStatusReq{} }
func (m *Player_GetActBoxRewardStatusReq) String() string { return proto.CompactTextString(m) }
func (*Player_GetActBoxRewardStatusReq) ProtoMessage()    {}
func (*Player_GetActBoxRewardStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *Player_GetActBoxRewardStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_GetActBoxRewardStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_GetActBoxRewardStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_GetActBoxRewardStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_GetActBoxRewardStatusReq.Merge(m, src)
}
func (m *Player_GetActBoxRewardStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_GetActBoxRewardStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_GetActBoxRewardStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_GetActBoxRewardStatusReq proto.InternalMessageInfo

type Player_GetActBoxRewardStatusRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status" validate:"required"`
	BoxId                int32    `protobuf:"varint,3,opt,name=box_id,json=boxId,proto3" json:"box_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_GetActBoxRewardStatusRsp) Reset()         { *m = Player_GetActBoxRewardStatusRsp{} }
func (m *Player_GetActBoxRewardStatusRsp) String() string { return proto.CompactTextString(m) }
func (*Player_GetActBoxRewardStatusRsp) ProtoMessage()    {}
func (*Player_GetActBoxRewardStatusRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *Player_GetActBoxRewardStatusRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_GetActBoxRewardStatusRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_GetActBoxRewardStatusRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_GetActBoxRewardStatusRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_GetActBoxRewardStatusRsp.Merge(m, src)
}
func (m *Player_GetActBoxRewardStatusRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_GetActBoxRewardStatusRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_GetActBoxRewardStatusRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_GetActBoxRewardStatusRsp proto.InternalMessageInfo

type Player_GetActBoxRewardReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_GetActBoxRewardReq) Reset()         { *m = Player_GetActBoxRewardReq{} }
func (m *Player_GetActBoxRewardReq) String() string { return proto.CompactTextString(m) }
func (*Player_GetActBoxRewardReq) ProtoMessage()    {}
func (*Player_GetActBoxRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *Player_GetActBoxRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_GetActBoxRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_GetActBoxRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_GetActBoxRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_GetActBoxRewardReq.Merge(m, src)
}
func (m *Player_GetActBoxRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_GetActBoxRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_GetActBoxRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_GetActBoxRewardReq proto.InternalMessageInfo

type Box struct {
	BoxId                int32    `protobuf:"varint,1,opt,name=box_id,json=boxId,proto3" json:"box_id" validate:"required"`
	BoxName              string   `protobuf:"bytes,2,opt,name=box_name,json=boxName,proto3" json:"box_name,omitempty"`
	RewardType           int32    `protobuf:"varint,3,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	RewardNum            int32    `protobuf:"varint,4,opt,name=reward_num,json=rewardNum,proto3" json:"reward_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Box) Reset()         { *m = Box{} }
func (m *Box) String() string { return proto.CompactTextString(m) }
func (*Box) ProtoMessage()    {}
func (*Box) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *Box) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Box) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Box.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Box) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Box.Merge(m, src)
}
func (m *Box) XXX_Size() int {
	return m.Size()
}
func (m *Box) XXX_DiscardUnknown() {
	xxx_messageInfo_Box.DiscardUnknown(m)
}

var xxx_messageInfo_Box proto.InternalMessageInfo

type Player_GetActBoxRewardRsp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	BoxReward            *Box     `protobuf:"bytes,2,opt,name=box_reward,json=boxReward,proto3" json:"box_reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_GetActBoxRewardRsp) Reset()         { *m = Player_GetActBoxRewardRsp{} }
func (m *Player_GetActBoxRewardRsp) String() string { return proto.CompactTextString(m) }
func (*Player_GetActBoxRewardRsp) ProtoMessage()    {}
func (*Player_GetActBoxRewardRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *Player_GetActBoxRewardRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_GetActBoxRewardRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_GetActBoxRewardRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_GetActBoxRewardRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_GetActBoxRewardRsp.Merge(m, src)
}
func (m *Player_GetActBoxRewardRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_GetActBoxRewardRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_GetActBoxRewardRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_GetActBoxRewardRsp proto.InternalMessageInfo

type Player_GetActBoxHistoryReq struct {
	TopNum               int32    `protobuf:"varint,1,opt,name=top_num,json=topNum,proto3" json:"top_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player_GetActBoxHistoryReq) Reset()         { *m = Player_GetActBoxHistoryReq{} }
func (m *Player_GetActBoxHistoryReq) String() string { return proto.CompactTextString(m) }
func (*Player_GetActBoxHistoryReq) ProtoMessage()    {}
func (*Player_GetActBoxHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *Player_GetActBoxHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_GetActBoxHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_GetActBoxHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_GetActBoxHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_GetActBoxHistoryReq.Merge(m, src)
}
func (m *Player_GetActBoxHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *Player_GetActBoxHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_GetActBoxHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_Player_GetActBoxHistoryReq proto.InternalMessageInfo

type History struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BoxReward            *Box     `protobuf:"bytes,2,opt,name=box_reward,json=boxReward,proto3" json:"box_reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *History) Reset()         { *m = History{} }
func (m *History) String() string { return proto.CompactTextString(m) }
func (*History) ProtoMessage()    {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *History) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_History.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return m.Size()
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

type Player_GetActBoxHistoryRsp struct {
	Result               int32      `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	HistoryList          []*History `protobuf:"bytes,2,rep,name=history_list,json=historyList,proto3" json:"history_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Player_GetActBoxHistoryRsp) Reset()         { *m = Player_GetActBoxHistoryRsp{} }
func (m *Player_GetActBoxHistoryRsp) String() string { return proto.CompactTextString(m) }
func (*Player_GetActBoxHistoryRsp) ProtoMessage()    {}
func (*Player_GetActBoxHistoryRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *Player_GetActBoxHistoryRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player_GetActBoxHistoryRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player_GetActBoxHistoryRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player_GetActBoxHistoryRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player_GetActBoxHistoryRsp.Merge(m, src)
}
func (m *Player_GetActBoxHistoryRsp) XXX_Size() int {
	return m.Size()
}
func (m *Player_GetActBoxHistoryRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Player_GetActBoxHistoryRsp.DiscardUnknown(m)
}

var xxx_messageInfo_Player_GetActBoxHistoryRsp proto.InternalMessageInfo

type CommonRsp struct {
	Ret                  int32    `protobuf:"varint,1,opt,name=ret,proto3" json:"ret" validate:"required"`
	RetMsg               string   `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRsp) Reset()         { *m = CommonRsp{} }
func (m *CommonRsp) String() string { return proto.CompactTextString(m) }
func (*CommonRsp) ProtoMessage()    {}
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *CommonRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRsp.Merge(m, src)
}
func (m *CommonRsp) XXX_Size() int {
	return m.Size()
}
func (m *CommonRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRsp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("halldraw.service.v1.GameCommand", GameCommand_name, GameCommand_value)
	proto.RegisterEnum("halldraw.service.v1.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*Props)(nil), "halldraw.service.v1.props")
	proto.RegisterType((*Player_ExchangeReq)(nil), "halldraw.service.v1.Player_ExchangeReq")
	proto.RegisterType((*Player_ExchangeRsp)(nil), "halldraw.service.v1.Player_ExchangeRsp")
	proto.RegisterType((*Player_DrawListReq)(nil), "halldraw.service.v1.Player_DrawListReq")
	proto.RegisterType((*Player_DrawListRsp)(nil), "halldraw.service.v1.Player_DrawListRsp")
	proto.RegisterType((*Player_DrawReq)(nil), "halldraw.service.v1.Player_DrawReq")
	proto.RegisterType((*Player_DrawRsp)(nil), "halldraw.service.v1.Player_DrawRsp")
	proto.RegisterType((*Player_ComposeReq)(nil), "halldraw.service.v1.Player_ComposeReq")
	proto.RegisterType((*Player_ComposeRsp)(nil), "halldraw.service.v1.Player_ComposeRsp")
	proto.RegisterType((*Player_RefreshReq)(nil), "halldraw.service.v1.Player_RefreshReq")
	proto.RegisterType((*Player_RefreshRsp)(nil), "halldraw.service.v1.Player_RefreshRsp")
	proto.RegisterType((*Player_ShareReq)(nil), "halldraw.service.v1.Player_ShareReq")
	proto.RegisterType((*Player_ShareRsp)(nil), "halldraw.service.v1.Player_ShareRsp")
	proto.RegisterType((*Player_RecordReq)(nil), "halldraw.service.v1.Player_RecordReq")
	proto.RegisterType((*Record)(nil), "halldraw.service.v1.record")
	proto.RegisterType((*Player_RecordRsp)(nil), "halldraw.service.v1.Player_RecordRsp")
	proto.RegisterType((*Player_GetActBoxRewardStatusReq)(nil), "halldraw.service.v1.Player_GetActBoxRewardStatusReq")
	proto.RegisterType((*Player_GetActBoxRewardStatusRsp)(nil), "halldraw.service.v1.Player_GetActBoxRewardStatusRsp")
	proto.RegisterType((*Player_GetActBoxRewardReq)(nil), "halldraw.service.v1.Player_GetActBoxRewardReq")
	proto.RegisterType((*Box)(nil), "halldraw.service.v1.box")
	proto.RegisterType((*Player_GetActBoxRewardRsp)(nil), "halldraw.service.v1.Player_GetActBoxRewardRsp")
	proto.RegisterType((*Player_GetActBoxHistoryReq)(nil), "halldraw.service.v1.Player_GetActBoxHistoryReq")
	proto.RegisterType((*History)(nil), "halldraw.service.v1.history")
	proto.RegisterType((*Player_GetActBoxHistoryRsp)(nil), "halldraw.service.v1.Player_GetActBoxHistoryRsp")
	proto.RegisterType((*CommonRsp)(nil), "halldraw.service.v1.CommonRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x6f, 0xdb, 0x46,
	0x1a, 0x37, 0x4d, 0xeb, 0xf5, 0xf9, 0x45, 0x8f, 0xb3, 0xb1, 0x4c, 0x3b, 0x96, 0x3d, 0xd9, 0x4d,
	0x8c, 0x00, 0x2b, 0xef, 0x66, 0x37, 0xd8, 0xc7, 0x25, 0x1b, 0x3b, 0x8e, 0xe3, 0xc5, 0x46, 0x6b,
	0xc8, 0x6e, 0x0f, 0xcd, 0x81, 0xa0, 0xc4, 0x89, 0x44, 0x44, 0xe4, 0x30, 0x9c, 0x91, 0x2d, 0x23,
	0x87, 0x02, 0xbd, 0xb4, 0xc7, 0xb4, 0xe9, 0x23, 0x4d, 0xda, 0xa6, 0xfd, 0x07, 0x7a, 0x29, 0x8a,
	0xfe, 0x0b, 0x39, 0x16, 0xe8, 0xa1, 0x37, 0xa3, 0x4d, 0x7b, 0xf2, 0xa9, 0xe8, 0xb1, 0xa7, 0x62,
	0x86, 0xa4, 0x44, 0x3d, 0x6d, 0xab, 0xbd, 0x69, 0xbe, 0xf9, 0xcd, 0xf7, 0xfb, 0xde, 0xfc, 0x6c,
	0xc8, 0x98, 0x9e, 0x9d, 0xf7, 0x7c, 0xca, 0x29, 0x9a, 0xad, 0x9a, 0xb5, 0x9a, 0xe5, 0x9b, 0x07,
	0x79, 0x46, 0xfc, 0x7d, 0xbb, 0x4c, 0xf2, 0xfb, 0x7f, 0xd5, 0xff, 0x5c, 0xb1, 0x79, 0xb5, 0x5e,
	0xca, 0x97, 0xa9, 0xb3, 0x56, 0xa1, 0x15, 0xba, 0x26, 0xb1, 0xa5, 0xfa, 0x3d, 0x79, 0x92, 0x07,
	0xf9, 0x2b, 0xd0, 0xa1, 0x2f, 0x56, 0x28, 0xad, 0xd4, 0xc8, 0x9a, 0xe9, 0xd9, 0x6b, 0xa6, 0xeb,
	0x52, 0x6e, 0x72, 0x9b, 0xba, 0x2c, 0xb8, 0xc5, 0x77, 0x21, 0xe1, 0xf9, 0xd4, 0x63, 0x68, 0x0a,
	0x46, 0x6d, 0x2b, 0xab, 0x2c, 0x2b, 0xab, 0x89, 0xe2, 0xa8, 0x6d, 0x21, 0x0d, 0x54, 0xb7, 0xee,
	0x64, 0x47, 0xa5, 0x40, 0xfc, 0x44, 0xe7, 0x20, 0x51, 0x23, 0xfb, 0xa4, 0x96, 0x55, 0xa5, 0x2c,
	0x38, 0x20, 0x1d, 0xd2, 0x1e, 0x65, 0xb6, 0xd0, 0x99, 0x1d, 0x93, 0x17, 0xcd, 0x33, 0xde, 0x00,
	0xb4, 0x53, 0x33, 0x0f, 0x89, 0x6f, 0x6c, 0x36, 0xca, 0x55, 0xd3, 0xad, 0x90, 0x22, 0x79, 0x80,
	0xe6, 0x20, 0x55, 0x67, 0xc4, 0x37, 0x42, 0x3a, 0xb5, 0x98, 0x14, 0xc7, 0x6d, 0x4b, 0x10, 0x70,
	0x7a, 0x9f, 0xb8, 0x92, 0x34, 0x53, 0x0c, 0x0e, 0xf8, 0x2d, 0xa5, 0x5b, 0x0b, 0xf3, 0xd0, 0x79,
	0x48, 0xfa, 0x84, 0xd5, 0x6b, 0x3c, 0xb4, 0x39, 0x3c, 0xa1, 0xeb, 0x90, 0xbe, 0xe7, 0x9b, 0x15,
	0x87, 0xb8, 0x3c, 0x30, 0x7e, 0xfd, 0xe2, 0xf1, 0x51, 0xae, 0x29, 0xfb, 0xf9, 0x28, 0x37, 0xbb,
	0x6f, 0xd6, 0x6c, 0xcb, 0xe4, 0xe4, 0xdf, 0xd8, 0x27, 0x0f, 0xea, 0xb6, 0x4f, 0x2c, 0x5c, 0x6c,
	0x02, 0xd0, 0x3c, 0xa4, 0x7d, 0xc2, 0x8d, 0x32, 0xb5, 0xdd, 0xd0, 0xd3, 0x94, 0x4f, 0xf8, 0x06,
	0xb5, 0xe3, 0xfe, 0xdc, 0xf4, 0xcd, 0x83, 0xff, 0xd9, 0x8c, 0x0f, 0xe1, 0xcf, 0x97, 0x6a, 0xb7,
	0x16, 0xe6, 0xa1, 0xbf, 0x40, 0xc2, 0xe6, 0xc4, 0x61, 0x59, 0x65, 0x59, 0x5d, 0x1d, 0xbf, 0xaa,
	0xe7, 0x7b, 0xa4, 0x3e, 0x2f, 0x53, 0x55, 0x0c, 0x80, 0xe8, 0x02, 0x00, 0xb7, 0x1d, 0x62, 0x30,
	0x6e, 0xfa, 0x81, 0xaf, 0x6a, 0x31, 0x23, 0x24, 0xbb, 0x42, 0x20, 0xfc, 0x90, 0xd7, 0xc4, 0xb5,
	0xa4, 0x1f, 0x6a, 0x31, 0x25, 0xce, 0x9b, 0xae, 0x25, 0x72, 0xd6, 0x8c, 0x51, 0x98, 0xb3, 0xa6,
	0xfb, 0x77, 0x60, 0xd2, 0x27, 0xf7, 0x7c, 0xc2, 0xaa, 0x86, 0x80, 0xb3, 0x6c, 0x42, 0x06, 0x71,
	0xf5, 0xf8, 0x28, 0xd7, 0x7e, 0xd1, 0x2f, 0x92, 0x13, 0x21, 0x6a, 0x4f, 0x80, 0xd0, 0x0a, 0x4c,
	0x94, 0xa9, 0xcb, 0xea, 0x0e, 0x31, 0xf8, 0xa1, 0x47, 0xb2, 0x49, 0x49, 0x37, 0x1e, 0xca, 0xf6,
	0x0e, 0x3d, 0x82, 0x72, 0x10, 0x1d, 0x0d, 0x51, 0x71, 0x29, 0x89, 0x80, 0x50, 0x54, 0xa8, 0x3b,
	0xe8, 0x22, 0x4c, 0xba, 0x84, 0x58, 0x46, 0xd3, 0xe6, 0xb4, 0x84, 0x4c, 0x08, 0xe1, 0xad, 0xc8,
	0xee, 0x2d, 0x18, 0xaf, 0x9a, 0xfb, 0x44, 0xc4, 0xb4, 0x42, 0xdd, 0x6c, 0x66, 0x59, 0x59, 0x4d,
	0xaf, 0x5f, 0x3a, 0x3e, 0xca, 0xc5, 0xc5, 0xfd, 0x6c, 0x06, 0x81, 0x09, 0x20, 0xb1, 0xc2, 0x82,
	0x78, 0x61, 0x61, 0x1f, 0xa6, 0x62, 0x69, 0x3b, 0x31, 0xf1, 0x32, 0x76, 0x41, 0xf7, 0x04, 0x87,
	0x56, 0x39, 0xa8, 0xb1, 0x72, 0x40, 0x0b, 0x90, 0x71, 0xed, 0xf2, 0x7d, 0xc3, 0x35, 0x1d, 0x22,
	0x93, 0x91, 0x29, 0xa6, 0x85, 0xa0, 0x60, 0x3a, 0x04, 0x3f, 0x52, 0xda, 0x49, 0x87, 0xaa, 0x93,
	0x96, 0x43, 0xa3, 0x6d, 0x9d, 0xd2, 0xbf, 0xd0, 0xc5, 0x95, 0x10, 0xcb, 0x7c, 0x04, 0x05, 0x92,
	0x12, 0xe7, 0x42, 0xdd, 0xc1, 0xeb, 0x30, 0x13, 0x5a, 0xb4, 0x41, 0x1d, 0x8f, 0xb2, 0x61, 0x5a,
	0xfa, 0x2b, 0xa5, 0x4b, 0xc9, 0x80, 0x8e, 0xce, 0xc3, 0x98, 0x70, 0x44, 0xaa, 0x18, 0xec, 0xb0,
	0xc4, 0x0d, 0xf2, 0xeb, 0x7a, 0x67, 0xe1, 0x9f, 0x71, 0x38, 0xc4, 0xbc, 0x2f, 0x06, 0x55, 0x3e,
	0x84, 0xf7, 0x3f, 0x29, 0x5d, 0x4a, 0x86, 0xca, 0x6b, 0x57, 0xa7, 0x8e, 0xfe, 0xa6, 0x4e, 0x6d,
	0x85, 0x5f, 0x6d, 0x0b, 0x7f, 0x67, 0x07, 0x8f, 0x9d, 0xd8, 0xc1, 0x89, 0xce, 0x0e, 0xc6, 0xff,
	0x81, 0xe9, 0xd0, 0xe3, 0xdd, 0xaa, 0xe9, 0x0f, 0x53, 0x32, 0x8d, 0x0e, 0x0d, 0x03, 0xea, 0xe5,
	0xf7, 0x8d, 0x0b, 0x46, 0xa0, 0x35, 0xb3, 0x55, 0xa6, 0xbe, 0x55, 0x24, 0x0f, 0xf0, 0xae, 0xa0,
	0x16, 0x87, 0xae, 0xcf, 0xe6, 0x22, 0xc8, 0x11, 0xcc, 0xb8, 0xe9, 0x78, 0xf1, 0x99, 0x2c, 0x05,
	0xed, 0xcd, 0xae, 0x76, 0x34, 0xbb, 0xd9, 0x49, 0xc4, 0x3c, 0x74, 0x0d, 0x52, 0x01, 0x51, 0x54,
	0x17, 0x0b, 0x3d, 0xeb, 0x22, 0xc0, 0x14, 0x23, 0x6c, 0xbf, 0x96, 0xc7, 0x3b, 0x90, 0x0b, 0x29,
	0xb6, 0x08, 0xbf, 0x51, 0xe6, 0xeb, 0xb4, 0x51, 0x24, 0x07, 0xa6, 0x6f, 0xed, 0x72, 0x93, 0xd7,
	0xd9, 0x10, 0x79, 0xf9, 0x5c, 0x39, 0x41, 0xe5, 0x80, 0x44, 0xfd, 0x0b, 0x92, 0x4c, 0x82, 0xc2,
	0x0c, 0xad, 0x1c, 0x1f, 0xe5, 0x42, 0x49, 0xbf, 0xd4, 0x84, 0xd7, 0xe8, 0x9f, 0x90, 0x2c, 0xd1,
	0x86, 0x30, 0x52, 0x6d, 0x3d, 0x0d, 0x24, 0xfd, 0x9e, 0x26, 0x4a, 0xb4, 0xb1, 0x6d, 0xe1, 0xff,
	0xc2, 0x7c, 0x6f, 0x7b, 0x87, 0x70, 0xfe, 0xa9, 0x02, 0x6a, 0x89, 0x36, 0x62, 0xd6, 0x28, 0x67,
	0xb3, 0x46, 0xcc, 0x2a, 0x81, 0x93, 0xf5, 0x10, 0xa8, 0x4e, 0x95, 0x68, 0x43, 0x94, 0x83, 0x68,
	0x2a, 0x5f, 0x1a, 0x16, 0xb4, 0x5d, 0xd0, 0x94, 0x10, 0x88, 0x64, 0xd7, 0x5d, 0x80, 0xf0, 0x14,
	0x1b, 0xd3, 0x99, 0x40, 0x22, 0x7a, 0xae, 0xd6, 0xd7, 0xd1, 0x01, 0x29, 0xf9, 0x07, 0x80, 0xb0,
	0x27, 0xd0, 0x12, 0x4e, 0xdc, 0x6c, 0xcf, 0x92, 0x2b, 0xd1, 0x46, 0x31, 0x53, 0x8a, 0x74, 0xe2,
	0x6b, 0xa0, 0x77, 0xb2, 0xdd, 0xb6, 0x19, 0xa7, 0xfe, 0x61, 0x18, 0x57, 0x4e, 0x3d, 0x69, 0x67,
	0xc8, 0xc7, 0xa9, 0x27, 0x8c, 0xbc, 0x0b, 0xa9, 0x6a, 0x00, 0xeb, 0x1f, 0xfb, 0xa1, 0x6d, 0xaa,
	0xf7, 0xb7, 0x69, 0xe0, 0x02, 0x39, 0x11, 0x9a, 0x64, 0xd4, 0x6c, 0x26, 0x3a, 0x48, 0xf4, 0xdd,
	0x62, 0x4f, 0xc2, 0x10, 0x58, 0x1c, 0x0f, 0x7f, 0x88, 0x65, 0x0e, 0xbf, 0x0a, 0x99, 0x0d, 0xea,
	0x38, 0xd4, 0x0d, 0xc6, 0xba, 0xea, 0x93, 0x90, 0x62, 0x7d, 0xe9, 0xf8, 0x28, 0x27, 0x8e, 0xfd,
	0x8a, 0x42, 0xdc, 0x89, 0x38, 0x88, 0xcf, 0x97, 0xc3, 0x2a, 0x61, 0x45, 0x24, 0x7d, 0xc2, 0xef,
	0xb0, 0xca, 0x95, 0x5f, 0x14, 0x18, 0xdf, 0x32, 0x1d, 0x22, 0x94, 0x9b, 0xae, 0x85, 0xd2, 0x30,
	0xb6, 0x47, 0x18, 0xd7, 0x46, 0xd0, 0x34, 0x8c, 0xc7, 0xb6, 0x04, 0x4d, 0x41, 0xa8, 0xb9, 0x36,
	0x84, 0xdf, 0x57, 0x6d, 0x34, 0x26, 0x0b, 0xbf, 0x3a, 0x9a, 0x8a, 0x66, 0x9b, 0x53, 0x35, 0x5a,
	0x45, 0xb5, 0x31, 0xa4, 0xc1, 0x44, 0x7c, 0xd4, 0x6a, 0x89, 0x18, 0x2c, 0xda, 0xc0, 0xb5, 0x24,
	0x9a, 0x81, 0xc9, 0xb6, 0x71, 0xa5, 0xa5, 0x90, 0x0e, 0xe7, 0x7b, 0x97, 0x9c, 0x96, 0x46, 0x0b,
	0x30, 0xd7, 0x27, 0x19, 0x5a, 0x06, 0x2d, 0xc3, 0xe2, 0xa0, 0x21, 0xa2, 0xc1, 0x95, 0x37, 0x55,
	0x48, 0x6d, 0xfa, 0xfe, 0x06, 0xb5, 0x88, 0x70, 0x7c, 0xb7, 0x5e, 0x2e, 0x6b, 0x23, 0x28, 0x0b,
	0xb3, 0xd1, 0x02, 0x68, 0x14, 0x28, 0x37, 0x36, 0x5d, 0x5a, 0xaf, 0x54, 0xb5, 0x47, 0x05, 0x74,
	0x0e, 0xa6, 0x9b, 0x37, 0xaf, 0x78, 0x22, 0xd0, 0xda, 0xdb, 0xed, 0xd2, 0x9b, 0xc4, 0xaa, 0x97,
	0xb9, 0xf6, 0x4e, 0x01, 0xfd, 0x01, 0xb4, 0xa6, 0x34, 0x8a, 0xd7, 0xe3, 0x02, 0x9a, 0x03, 0x24,
	0xa2, 0x62, 0x88, 0xb0, 0x08, 0xed, 0x9b, 0x0d, 0x11, 0x9f, 0x77, 0x0b, 0x48, 0x83, 0xf1, 0x1d,
	0x9f, 0x7a, 0x91, 0xde, 0xf7, 0xa4, 0x44, 0xec, 0x17, 0x91, 0xce, 0xf7, 0xa5, 0x44, 0x3e, 0xde,
	0x76, 0x45, 0xca, 0xb4, 0x0f, 0x0a, 0x68, 0x11, 0xe6, 0xc2, 0xc0, 0x1b, 0xf2, 0xc3, 0x22, 0x55,
	0x06, 0xf6, 0x3e, 0x29, 0xa0, 0x49, 0x48, 0x6f, 0x33, 0x19, 0x6f, 0x4b, 0xfb, 0xb0, 0x80, 0x66,
	0x60, 0x42, 0x3c, 0xdf, 0x76, 0x39, 0xf1, 0xf7, 0xcd, 0x9a, 0xf6, 0xb4, 0x80, 0x10, 0x4c, 0x0a,
	0xd1, 0x8e, 0xe9, 0x9b, 0x0e, 0xe1, 0xc4, 0xd7, 0x9e, 0x49, 0x58, 0x94, 0x91, 0x5b, 0xa6, 0x5d,
	0xd3, 0x3e, 0x92, 0xb0, 0x1b, 0x65, 0x6e, 0xef, 0x93, 0x6d, 0xb6, 0x41, 0x6b, 0x8c, 0x68, 0x1f,
	0x17, 0xd0, 0x14, 0x64, 0xf6, 0xc4, 0xc0, 0x92, 0x98, 0x4f, 0x0a, 0x68, 0x16, 0xa6, 0x82, 0x20,
	0x1b, 0xff, 0xaf, 0x73, 0x61, 0x8c, 0xf6, 0x3c, 0x2e, 0xbc, 0x6d, 0x5a, 0xc6, 0x16, 0xe5, 0xda,
	0xa7, 0x92, 0x60, 0x8b, 0x70, 0x43, 0x48, 0xe5, 0xe3, 0xcf, 0x0a, 0x57, 0xbf, 0x05, 0x48, 0x47,
	0xbd, 0x80, 0x1e, 0x76, 0x15, 0x10, 0xba, 0xdc, 0xb3, 0x53, 0xba, 0xff, 0x6e, 0xd2, 0x4f, 0x07,
	0x64, 0x1e, 0x3e, 0xff, 0xc6, 0x37, 0x3f, 0x3e, 0x1e, 0xd5, 0xf0, 0xd4, 0x5a, 0xf4, 0x60, 0x4d,
	0x74, 0x26, 0xa2, 0x6d, 0x65, 0x8f, 0x2e, 0x9e, 0xa4, 0x4f, 0x90, 0x9e, 0x0c, 0xea, 0x4d, 0x18,
	0x7a, 0xdb, 0xd1, 0x56, 0xe8, 0xd2, 0x20, 0x75, 0xad, 0x05, 0x59, 0x3f, 0x15, 0x8e, 0x79, 0x78,
	0x5e, 0x32, 0xcf, 0xe2, 0x99, 0x16, 0x73, 0x39, 0xa4, 0x7a, 0xd8, 0xd9, 0xbf, 0x83, 0xc9, 0x5b,
	0xfb, 0xa9, 0x7e, 0x2a, 0x5c, 0x6f, 0xf2, 0x70, 0x13, 0x42, 0xac, 0x7d, 0x26, 0xa0, 0x3f, 0x0e,
	0x52, 0x19, 0xed, 0x78, 0xfa, 0x29, 0x50, 0xcc, 0xc3, 0x73, 0x92, 0x76, 0x06, 0x4f, 0xb7, 0x68,
	0x99, 0x24, 0x79, 0xbd, 0x6b, 0xec, 0x0c, 0x2e, 0xae, 0xd8, 0x3f, 0x19, 0xf4, 0xd3, 0x01, 0x99,
	0x87, 0x75, 0xc9, 0x7e, 0x0e, 0xa3, 0x16, 0x3b, 0x89, 0xd8, 0x0e, 0x3a, 0x46, 0x1c, 0xfa, 0xd3,
	0xe0, 0x48, 0x86, 0xeb, 0xa1, 0x7e, 0x1a, 0x18, 0xf3, 0x70, 0x56, 0x52, 0x23, 0xac, 0xc5, 0xe3,
	0x2d, 0x79, 0x9e, 0x29, 0xfd, 0x26, 0x29, 0xca, 0x0f, 0xd2, 0xdd, 0xbd, 0xd2, 0xe8, 0x67, 0xc2,
	0x33, 0x0f, 0xaf, 0x48, 0xa3, 0x16, 0xf0, 0x7c, 0xcb, 0xa8, 0x4e, 0x13, 0x9e, 0x2b, 0x7d, 0x67,
	0x39, 0x5a, 0x3b, 0x15, 0x5d, 0x6b, 0x35, 0xd0, 0xcf, 0xf6, 0x80, 0x79, 0x18, 0x4b, 0x03, 0x17,
	0xb1, 0xde, 0xc3, 0xc0, 0xc8, 0x8a, 0x2f, 0x94, 0xc1, 0x1f, 0x14, 0xf4, 0xf7, 0x33, 0x44, 0xa5,
	0xb9, 0x1b, 0xeb, 0x43, 0xbc, 0x62, 0x1e, 0xbe, 0x2c, 0x0d, 0x5e, 0xc1, 0xb9, 0xbe, 0x11, 0x0d,
	0xb0, 0xeb, 0xf3, 0x2f, 0xbe, 0x5f, 0x1a, 0x79, 0xf1, 0x72, 0x49, 0xf9, 0xfa, 0xe5, 0x92, 0xf2,
	0xdd, 0xcb, 0x25, 0xe5, 0xc9, 0x0f, 0x4b, 0x23, 0xaf, 0xa9, 0xa6, 0x67, 0x97, 0x92, 0xf2, 0xbf,
	0x75, 0x7f, 0xfb, 0x35, 0x00, 0x00, 0xff, 0xff, 0x80, 0xe1, 0xd7, 0x81, 0x1c, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HalldrawClient is the client API for Halldraw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HalldrawClient interface {
	Player_DrawList(ctx context.Context, in *Player_DrawListReq, opts ...grpc.CallOption) (*Player_DrawListRsp, error)
	Player_Draw(ctx context.Context, in *Player_DrawReq, opts ...grpc.CallOption) (*Player_DrawRsp, error)
	Player_Compose(ctx context.Context, in *Player_ComposeReq, opts ...grpc.CallOption) (*Player_ComposeRsp, error)
	Player_Refresh(ctx context.Context, in *Player_RefreshReq, opts ...grpc.CallOption) (*Player_RefreshRsp, error)
	Player_Share(ctx context.Context, in *Player_ShareReq, opts ...grpc.CallOption) (*Player_ShareRsp, error)
	Player_Exchange(ctx context.Context, in *Player_ExchangeReq, opts ...grpc.CallOption) (*Player_ExchangeRsp, error)
	Player_Record(ctx context.Context, in *Player_RecordReq, opts ...grpc.CallOption) (*Player_RecordRsp, error)
	Player_GetActBoxReward(ctx context.Context, in *Player_GetActBoxRewardReq, opts ...grpc.CallOption) (*Player_GetActBoxRewardRsp, error)
	Player_GetActBoxHistory(ctx context.Context, in *Player_GetActBoxHistoryReq, opts ...grpc.CallOption) (*Player_GetActBoxHistoryRsp, error)
	Player_GetActBoxRewardStatus(ctx context.Context, in *Player_GetActBoxRewardStatusReq, opts ...grpc.CallOption) (*Player_GetActBoxRewardStatusRsp, error)
}

type halldrawClient struct {
	cc *grpc.ClientConn
}

func NewHalldrawClient(cc *grpc.ClientConn) HalldrawClient {
	return &halldrawClient{cc}
}

func (c *halldrawClient) Player_DrawList(ctx context.Context, in *Player_DrawListReq, opts ...grpc.CallOption) (*Player_DrawListRsp, error) {
	out := new(Player_DrawListRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_DrawList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_Draw(ctx context.Context, in *Player_DrawReq, opts ...grpc.CallOption) (*Player_DrawRsp, error) {
	out := new(Player_DrawRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_Draw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_Compose(ctx context.Context, in *Player_ComposeReq, opts ...grpc.CallOption) (*Player_ComposeRsp, error) {
	out := new(Player_ComposeRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_Compose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_Refresh(ctx context.Context, in *Player_RefreshReq, opts ...grpc.CallOption) (*Player_RefreshRsp, error) {
	out := new(Player_RefreshRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_Share(ctx context.Context, in *Player_ShareReq, opts ...grpc.CallOption) (*Player_ShareRsp, error) {
	out := new(Player_ShareRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_Share", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_Exchange(ctx context.Context, in *Player_ExchangeReq, opts ...grpc.CallOption) (*Player_ExchangeRsp, error) {
	out := new(Player_ExchangeRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_Record(ctx context.Context, in *Player_RecordReq, opts ...grpc.CallOption) (*Player_RecordRsp, error) {
	out := new(Player_RecordRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_GetActBoxReward(ctx context.Context, in *Player_GetActBoxRewardReq, opts ...grpc.CallOption) (*Player_GetActBoxRewardRsp, error) {
	out := new(Player_GetActBoxRewardRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_GetActBoxReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_GetActBoxHistory(ctx context.Context, in *Player_GetActBoxHistoryReq, opts ...grpc.CallOption) (*Player_GetActBoxHistoryRsp, error) {
	out := new(Player_GetActBoxHistoryRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_GetActBoxHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halldrawClient) Player_GetActBoxRewardStatus(ctx context.Context, in *Player_GetActBoxRewardStatusReq, opts ...grpc.CallOption) (*Player_GetActBoxRewardStatusRsp, error) {
	out := new(Player_GetActBoxRewardStatusRsp)
	err := c.cc.Invoke(ctx, "/halldraw.service.v1.halldraw/Player_GetActBoxRewardStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HalldrawServer is the server API for Halldraw service.
type HalldrawServer interface {
	Player_DrawList(context.Context, *Player_DrawListReq) (*Player_DrawListRsp, error)
	Player_Draw(context.Context, *Player_DrawReq) (*Player_DrawRsp, error)
	Player_Compose(context.Context, *Player_ComposeReq) (*Player_ComposeRsp, error)
	Player_Refresh(context.Context, *Player_RefreshReq) (*Player_RefreshRsp, error)
	Player_Share(context.Context, *Player_ShareReq) (*Player_ShareRsp, error)
	Player_Exchange(context.Context, *Player_ExchangeReq) (*Player_ExchangeRsp, error)
	Player_Record(context.Context, *Player_RecordReq) (*Player_RecordRsp, error)
	Player_GetActBoxReward(context.Context, *Player_GetActBoxRewardReq) (*Player_GetActBoxRewardRsp, error)
	Player_GetActBoxHistory(context.Context, *Player_GetActBoxHistoryReq) (*Player_GetActBoxHistoryRsp, error)
	Player_GetActBoxRewardStatus(context.Context, *Player_GetActBoxRewardStatusReq) (*Player_GetActBoxRewardStatusRsp, error)
}

func RegisterHalldrawServer(s *grpc.Server, srv HalldrawServer) {
	s.RegisterService(&_Halldraw_serviceDesc, srv)
}

func _Halldraw_Player_DrawList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_DrawListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_DrawList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_DrawList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_DrawList(ctx, req.(*Player_DrawListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_Draw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_DrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_Draw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_Draw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_Draw(ctx, req.(*Player_DrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_Compose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_ComposeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_Compose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_Compose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_Compose(ctx, req.(*Player_ComposeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_RefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_Refresh(ctx, req.(*Player_RefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_ShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_Share",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_Share(ctx, req.(*Player_ShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_ExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_Exchange(ctx, req.(*Player_ExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_RecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_Record(ctx, req.(*Player_RecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_GetActBoxReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_GetActBoxRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_GetActBoxReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_GetActBoxReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_GetActBoxReward(ctx, req.(*Player_GetActBoxRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_GetActBoxHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_GetActBoxHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_GetActBoxHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_GetActBoxHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_GetActBoxHistory(ctx, req.(*Player_GetActBoxHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Halldraw_Player_GetActBoxRewardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player_GetActBoxRewardStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalldrawServer).Player_GetActBoxRewardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halldraw.service.v1.halldraw/Player_GetActBoxRewardStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalldrawServer).Player_GetActBoxRewardStatus(ctx, req.(*Player_GetActBoxRewardStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Halldraw_serviceDesc = grpc.ServiceDesc{
	ServiceName: "halldraw.service.v1.halldraw",
	HandlerType: (*HalldrawServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Player_DrawList",
			Handler:    _Halldraw_Player_DrawList_Handler,
		},
		{
			MethodName: "Player_Draw",
			Handler:    _Halldraw_Player_Draw_Handler,
		},
		{
			MethodName: "Player_Compose",
			Handler:    _Halldraw_Player_Compose_Handler,
		},
		{
			MethodName: "Player_Refresh",
			Handler:    _Halldraw_Player_Refresh_Handler,
		},
		{
			MethodName: "Player_Share",
			Handler:    _Halldraw_Player_Share_Handler,
		},
		{
			MethodName: "Player_Exchange",
			Handler:    _Halldraw_Player_Exchange_Handler,
		},
		{
			MethodName: "Player_Record",
			Handler:    _Halldraw_Player_Record_Handler,
		},
		{
			MethodName: "Player_GetActBoxReward",
			Handler:    _Halldraw_Player_GetActBoxReward_Handler,
		},
		{
			MethodName: "Player_GetActBoxHistory",
			Handler:    _Halldraw_Player_GetActBoxHistory_Handler,
		},
		{
			MethodName: "Player_GetActBoxRewardStatus",
			Handler:    _Halldraw_Player_GetActBoxRewardStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *Props) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Props) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
	}
	if m.Position != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Position))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_ExchangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_ExchangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_ExchangeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_ExchangeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.Fragment != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fragment))
	}
	if m.RetCoin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RetCoin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_DrawListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_DrawListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_DrawListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_DrawListRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TimeStart != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TimeStart))
	}
	if m.TimeEnd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TimeEnd))
	}
	if m.Fragment != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fragment))
	}
	if m.RefreshTimes != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshTimes))
	}
	if m.ConsumeType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ConsumeType))
	}
	if m.ConsumeNum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ConsumeNum))
	}
	if m.NeedFragment != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NeedFragment))
	}
	if m.Have_Dragon {
		dAtA[i] = 0x48
		i++
		if m.Have_Dragon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Result != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_DrawReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_DrawReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Times))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_DrawRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_DrawRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.RetCoin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RetCoin))
	}
	if m.CoinNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CoinNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_ComposeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_ComposeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_ComposeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_ComposeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.Item != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Item.Size()))
		n1, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.RetCoin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RetCoin))
	}
	if m.Fragment != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fragment))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_RefreshReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_RefreshReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_RefreshRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_RefreshRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RefreshTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshTimes))
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.ConsumeType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ConsumeType))
	}
	if m.ConsumeNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ConsumeNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_ShareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_ShareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_ShareRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_ShareRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.RefreshTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshTimes))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_RecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_RecordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_RecordRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_RecordRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_GetActBoxRewardStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_GetActBoxRewardStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_GetActBoxRewardStatusRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_GetActBoxRewardStatusRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.BoxId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BoxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_GetActBoxRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_GetActBoxRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Box) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Box) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BoxId))
	}
	if len(m.BoxName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BoxName)))
		i += copy(dAtA[i:], m.BoxName)
	}
	if m.RewardType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RewardType))
	}
	if m.RewardNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RewardNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_GetActBoxRewardRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_GetActBoxRewardRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if m.BoxReward != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BoxReward.Size()))
		n2, err := m.BoxReward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_GetActBoxHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_GetActBoxHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TopNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if m.BoxReward != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BoxReward.Size()))
		n3, err := m.BoxReward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Player_GetActBoxHistoryRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player_GetActBoxHistoryRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	if len(m.HistoryList) > 0 {
		for _, msg := range m.HistoryList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommonRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ret))
	}
	if len(m.RetMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RetMsg)))
		i += copy(dAtA[i:], m.RetMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Props) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.Position != 0 {
		n += 1 + sovApi(uint64(m.Position))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_ExchangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_ExchangeRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.Fragment != 0 {
		n += 1 + sovApi(uint64(m.Fragment))
	}
	if m.RetCoin != 0 {
		n += 1 + sovApi(uint64(m.RetCoin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_DrawListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_DrawListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TimeStart != 0 {
		n += 1 + sovApi(uint64(m.TimeStart))
	}
	if m.TimeEnd != 0 {
		n += 1 + sovApi(uint64(m.TimeEnd))
	}
	if m.Fragment != 0 {
		n += 1 + sovApi(uint64(m.Fragment))
	}
	if m.RefreshTimes != 0 {
		n += 1 + sovApi(uint64(m.RefreshTimes))
	}
	if m.ConsumeType != 0 {
		n += 1 + sovApi(uint64(m.ConsumeType))
	}
	if m.ConsumeNum != 0 {
		n += 1 + sovApi(uint64(m.ConsumeNum))
	}
	if m.NeedFragment != 0 {
		n += 1 + sovApi(uint64(m.NeedFragment))
	}
	if m.Have_Dragon {
		n += 2
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_DrawReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.Times != 0 {
		n += 1 + sovApi(uint64(m.Times))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_DrawRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.RetCoin != 0 {
		n += 1 + sovApi(uint64(m.RetCoin))
	}
	if m.CoinNum != 0 {
		n += 1 + sovApi(uint64(m.CoinNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_ComposeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_ComposeRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RetCoin != 0 {
		n += 1 + sovApi(uint64(m.RetCoin))
	}
	if m.Fragment != 0 {
		n += 1 + sovApi(uint64(m.Fragment))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_RefreshReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_RefreshRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.RefreshTimes != 0 {
		n += 1 + sovApi(uint64(m.RefreshTimes))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.ConsumeType != 0 {
		n += 1 + sovApi(uint64(m.ConsumeType))
	}
	if m.ConsumeNum != 0 {
		n += 1 + sovApi(uint64(m.ConsumeNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_ShareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_ShareRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.RefreshTimes != 0 {
		n += 1 + sovApi(uint64(m.RefreshTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_RecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApi(uint64(m.Timestamp))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_RecordRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_GetActBoxRewardStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_GetActBoxRewardStatusRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.BoxId != 0 {
		n += 1 + sovApi(uint64(m.BoxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_GetActBoxRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Box) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != 0 {
		n += 1 + sovApi(uint64(m.BoxId))
	}
	l = len(m.BoxName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RewardType != 0 {
		n += 1 + sovApi(uint64(m.RewardType))
	}
	if m.RewardNum != 0 {
		n += 1 + sovApi(uint64(m.RewardNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_GetActBoxRewardRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.BoxReward != nil {
		l = m.BoxReward.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_GetActBoxHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopNum != 0 {
		n += 1 + sovApi(uint64(m.TopNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *History) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.BoxReward != nil {
		l = m.BoxReward.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player_GetActBoxHistoryRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if len(m.HistoryList) > 0 {
		for _, e := range m.HistoryList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovApi(uint64(m.Ret))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Props) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: props: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: props: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_ExchangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_ExchangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_ExchangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_ExchangeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_ExchangeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_ExchangeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			m.Fragment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fragment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCoin", wireType)
			}
			m.RetCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCoin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_DrawListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_DrawListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_DrawListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_DrawListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_DrawListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_DrawListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Props{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStart", wireType)
			}
			m.TimeStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeEnd", wireType)
			}
			m.TimeEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			m.Fragment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fragment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTimes", wireType)
			}
			m.RefreshTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTimes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeType", wireType)
			}
			m.ConsumeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeNum", wireType)
			}
			m.ConsumeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedFragment", wireType)
			}
			m.NeedFragment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedFragment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Have_Dragon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Have_Dragon = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_DrawReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_DrawReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_DrawReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_DrawRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_DrawRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_DrawRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Props{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCoin", wireType)
			}
			m.RetCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCoin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			m.CoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_ComposeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_ComposeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_ComposeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_ComposeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_ComposeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_ComposeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Props{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCoin", wireType)
			}
			m.RetCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCoin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			m.Fragment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fragment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_RefreshReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_RefreshReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_RefreshReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_RefreshRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_RefreshRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_RefreshRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Props{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTimes", wireType)
			}
			m.RefreshTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTimes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeType", wireType)
			}
			m.ConsumeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeNum", wireType)
			}
			m.ConsumeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_ShareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_ShareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_ShareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_ShareRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_ShareRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_ShareRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTimes", wireType)
			}
			m.RefreshTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTimes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_RecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_RecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_RecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_RecordRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_RecordRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_RecordRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_GetActBoxRewardStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_GetActBoxRewardStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_GetActBoxRewardStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_GetActBoxRewardStatusRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_GetActBoxRewardStatusRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_GetActBoxRewardStatusRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			m.BoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_GetActBoxRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_GetActBoxRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_GetActBoxRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Box) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: box: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: box: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			m.BoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			m.RewardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardNum", wireType)
			}
			m.RewardNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_GetActBoxRewardRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_GetActBoxRewardRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_GetActBoxRewardRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoxReward == nil {
				m.BoxReward = &Box{}
			}
			if err := m.BoxReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_GetActBoxHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_GetActBoxHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_GetActBoxHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopNum", wireType)
			}
			m.TopNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: history: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: history: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoxReward == nil {
				m.BoxReward = &Box{}
			}
			if err := m.BoxReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player_GetActBoxHistoryRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player_GetActBoxHistoryRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player_GetActBoxHistoryRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryList = append(m.HistoryList, &History{})
			if err := m.HistoryList[len(m.HistoryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
