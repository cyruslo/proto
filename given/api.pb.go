// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GivenSystemId int32

const (
	GivenSystemId_SystemNull       GivenSystemId = 0
	GivenSystemId_SystemNewcomer   GivenSystemId = 1
	GivenSystemId_SystemRecharge   GivenSystemId = 2
	GivenSystemId_SystemUnuseValue GivenSystemId = 3
)

var GivenSystemId_name = map[int32]string{
	0: "SystemNull",
	1: "SystemNewcomer",
	2: "SystemRecharge",
	3: "SystemUnuseValue",
}

var GivenSystemId_value = map[string]int32{
	"SystemNull":       0,
	"SystemNewcomer":   1,
	"SystemRecharge":   2,
	"SystemUnuseValue": 3,
}

func (x GivenSystemId) String() string {
	return proto.EnumName(GivenSystemId_name, int32(x))
}

func (GivenSystemId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type LoginMethod int32

const (
	LoginMethod_AccountLogin   LoginMethod = 0
	LoginMethod_WechatLogin    LoginMethod = 1
	LoginMethod_CellphoneLogin LoginMethod = 2
)

var LoginMethod_name = map[int32]string{
	0: "AccountLogin",
	1: "WechatLogin",
	2: "CellphoneLogin",
}

var LoginMethod_value = map[string]int32{
	"AccountLogin":   0,
	"WechatLogin":    1,
	"CellphoneLogin": 2,
}

func (x LoginMethod) String() string {
	return proto.EnumName(LoginMethod_name, int32(x))
}

func (LoginMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type SystemConf struct {
	SystemID             int32    `protobuf:"varint,1,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
	Enable               bool     `protobuf:"varint,2,opt,name=Enable,proto3" json:"Enable,omitempty"`
	Frequency            int32    `protobuf:"varint,3,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
	ConvertRatio         int32    `protobuf:"varint,4,opt,name=ConvertRatio,proto3" json:"ConvertRatio,omitempty"`
	ConvertBase          int32    `protobuf:"varint,5,opt,name=ConvertBase,proto3" json:"ConvertBase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemConf) Reset()         { *m = SystemConf{} }
func (m *SystemConf) String() string { return proto.CompactTextString(m) }
func (*SystemConf) ProtoMessage()    {}
func (*SystemConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *SystemConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemConf.Merge(m, src)
}
func (m *SystemConf) XXX_Size() int {
	return m.Size()
}
func (m *SystemConf) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemConf.DiscardUnknown(m)
}

var xxx_messageInfo_SystemConf proto.InternalMessageInfo

type GetSystemConfReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSystemConfReq) Reset()         { *m = GetSystemConfReq{} }
func (m *GetSystemConfReq) String() string { return proto.CompactTextString(m) }
func (*GetSystemConfReq) ProtoMessage()    {}
func (*GetSystemConfReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *GetSystemConfReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSystemConfReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSystemConfReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSystemConfReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSystemConfReq.Merge(m, src)
}
func (m *GetSystemConfReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSystemConfReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSystemConfReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSystemConfReq proto.InternalMessageInfo

type GetSystemConfResp struct {
	Code                 int32         `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	ConfList             []*SystemConf `protobuf:"bytes,3,rep,name=ConfList,proto3" json:"ConfList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetSystemConfResp) Reset()         { *m = GetSystemConfResp{} }
func (m *GetSystemConfResp) String() string { return proto.CompactTextString(m) }
func (*GetSystemConfResp) ProtoMessage()    {}
func (*GetSystemConfResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetSystemConfResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSystemConfResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSystemConfResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSystemConfResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSystemConfResp.Merge(m, src)
}
func (m *GetSystemConfResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSystemConfResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSystemConfResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSystemConfResp proto.InternalMessageInfo

type QueryUserInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	VipLevel             int32    `protobuf:"varint,3,opt,name=VipLevel,proto3" json:"VipLevel,omitempty"`
	LoginMethod          int32    `protobuf:"varint,4,opt,name=LoginMethod,proto3" json:"LoginMethod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryUserInfoReq) Reset()         { *m = QueryUserInfoReq{} }
func (m *QueryUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*QueryUserInfoReq) ProtoMessage()    {}
func (*QueryUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *QueryUserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInfoReq.Merge(m, src)
}
func (m *QueryUserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInfoReq proto.InternalMessageInfo

type SystemInfo struct {
	SystemID             int32    `protobuf:"varint,1,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Remain               int32    `protobuf:"varint,3,opt,name=Remain,proto3" json:"Remain,omitempty"`
	Given                int32    `protobuf:"varint,4,opt,name=Given,proto3" json:"Given,omitempty"`
	Open                 bool     `protobuf:"varint,5,opt,name=Open,proto3" json:"Open,omitempty"`
	OpenDate             string   `protobuf:"bytes,6,opt,name=OpenDate,proto3" json:"OpenDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemInfo) Reset()         { *m = SystemInfo{} }
func (m *SystemInfo) String() string { return proto.CompactTextString(m) }
func (*SystemInfo) ProtoMessage()    {}
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *SystemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo.Merge(m, src)
}
func (m *SystemInfo) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo proto.InternalMessageInfo

type QueryUserInfoResp struct {
	Code                 int32         `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	SystemList           []*SystemInfo `protobuf:"bytes,3,rep,name=SystemList,proto3" json:"SystemList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryUserInfoResp) Reset()         { *m = QueryUserInfoResp{} }
func (m *QueryUserInfoResp) String() string { return proto.CompactTextString(m) }
func (*QueryUserInfoResp) ProtoMessage()    {}
func (*QueryUserInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *QueryUserInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInfoResp.Merge(m, src)
}
func (m *QueryUserInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInfoResp proto.InternalMessageInfo

type UpdateUserInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	SystemID             int32    `protobuf:"varint,3,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
	GivenGain            int32    `protobuf:"varint,4,opt,name=GivenGain,proto3" json:"GivenGain,omitempty"`
	GivenExpend          int32    `protobuf:"varint,5,opt,name=GivenExpend,proto3" json:"GivenExpend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateUserInfoReq) Reset()         { *m = UpdateUserInfoReq{} }
func (m *UpdateUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserInfoReq) ProtoMessage()    {}
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *UpdateUserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserInfoReq.Merge(m, src)
}
func (m *UpdateUserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserInfoReq proto.InternalMessageInfo

type UpdateUserInfoResp struct {
	Code                 int32       `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data                 *SystemInfo `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateUserInfoResp) Reset()         { *m = UpdateUserInfoResp{} }
func (m *UpdateUserInfoResp) String() string { return proto.CompactTextString(m) }
func (*UpdateUserInfoResp) ProtoMessage()    {}
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *UpdateUserInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserInfoResp.Merge(m, src)
}
func (m *UpdateUserInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserInfoResp proto.InternalMessageInfo

//刮刮卡(如果开关关了，可以累计C值，但不能掉落卡和使用卡)
type QueryCardReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryCardReq) Reset()         { *m = QueryCardReq{} }
func (m *QueryCardReq) String() string { return proto.CompactTextString(m) }
func (*QueryCardReq) ProtoMessage()    {}
func (*QueryCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *QueryCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardReq.Merge(m, src)
}
func (m *QueryCardReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardReq proto.InternalMessageInfo

type CardInfo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	Price                int32    `protobuf:"varint,3,opt,name=Price,proto3" json:"Price,omitempty"`
	ExpectPrice          int32    `protobuf:"varint,4,opt,name=ExpectPrice,proto3" json:"ExpectPrice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardInfo) Reset()         { *m = CardInfo{} }
func (m *CardInfo) String() string { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()    {}
func (*CardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *CardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardInfo.Merge(m, src)
}
func (m *CardInfo) XXX_Size() int {
	return m.Size()
}
func (m *CardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CardInfo proto.InternalMessageInfo

type CardAward struct {
	CardId               int32    `protobuf:"varint,1,opt,name=CardId,proto3" json:"CardId,omitempty"`
	AwardBase            int32    `protobuf:"varint,2,opt,name=AwardBase,proto3" json:"AwardBase,omitempty"`
	AwardMulti           int32    `protobuf:"varint,3,opt,name=AwardMulti,proto3" json:"AwardMulti,omitempty"`
	Price                int32    `protobuf:"varint,4,opt,name=Price,proto3" json:"Price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardAward) Reset()         { *m = CardAward{} }
func (m *CardAward) String() string { return proto.CompactTextString(m) }
func (*CardAward) ProtoMessage()    {}
func (*CardAward) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *CardAward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardAward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardAward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardAward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardAward.Merge(m, src)
}
func (m *CardAward) XXX_Size() int {
	return m.Size()
}
func (m *CardAward) XXX_DiscardUnknown() {
	xxx_messageInfo_CardAward.DiscardUnknown(m)
}

var xxx_messageInfo_CardAward proto.InternalMessageInfo

type QueryCardResp struct {
	Code                 int32       `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Cards                []*CardInfo `protobuf:"bytes,3,rep,name=Cards,proto3" json:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *QueryCardResp) Reset()         { *m = QueryCardResp{} }
func (m *QueryCardResp) String() string { return proto.CompactTextString(m) }
func (*QueryCardResp) ProtoMessage()    {}
func (*QueryCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *QueryCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCardResp.Merge(m, src)
}
func (m *QueryCardResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCardResp proto.InternalMessageInfo

type DropCardTriggerReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              int32    `protobuf:"varint,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	PlayerID             int64    `protobuf:"varint,3,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropCardTriggerReq) Reset()         { *m = DropCardTriggerReq{} }
func (m *DropCardTriggerReq) String() string { return proto.CompactTextString(m) }
func (*DropCardTriggerReq) ProtoMessage()    {}
func (*DropCardTriggerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *DropCardTriggerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropCardTriggerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropCardTriggerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DropCardTriggerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropCardTriggerReq.Merge(m, src)
}
func (m *DropCardTriggerReq) XXX_Size() int {
	return m.Size()
}
func (m *DropCardTriggerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DropCardTriggerReq.DiscardUnknown(m)
}

var xxx_messageInfo_DropCardTriggerReq proto.InternalMessageInfo

type DropCardTriggerResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropCardTriggerResp) Reset()         { *m = DropCardTriggerResp{} }
func (m *DropCardTriggerResp) String() string { return proto.CompactTextString(m) }
func (*DropCardTriggerResp) ProtoMessage()    {}
func (*DropCardTriggerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *DropCardTriggerResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropCardTriggerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropCardTriggerResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DropCardTriggerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropCardTriggerResp.Merge(m, src)
}
func (m *DropCardTriggerResp) XXX_Size() int {
	return m.Size()
}
func (m *DropCardTriggerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DropCardTriggerResp.DiscardUnknown(m)
}

var xxx_messageInfo_DropCardTriggerResp proto.InternalMessageInfo

type DropCardReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              int32    `protobuf:"varint,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	PlayerID             int64    `protobuf:"varint,3,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	CardId               int32    `protobuf:"varint,4,opt,name=CardId,proto3" json:"CardId,omitempty"`
	VipLevel             int32    `protobuf:"varint,5,opt,name=VipLevel,proto3" json:"VipLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DropCardReq) Reset()         { *m = DropCardReq{} }
func (m *DropCardReq) String() string { return proto.CompactTextString(m) }
func (*DropCardReq) ProtoMessage()    {}
func (*DropCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *DropCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DropCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropCardReq.Merge(m, src)
}
func (m *DropCardReq) XXX_Size() int {
	return m.Size()
}
func (m *DropCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DropCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_DropCardReq proto.InternalMessageInfo

type ScratchCardReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScratchCardReq) Reset()         { *m = ScratchCardReq{} }
func (m *ScratchCardReq) String() string { return proto.CompactTextString(m) }
func (*ScratchCardReq) ProtoMessage()    {}
func (*ScratchCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *ScratchCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScratchCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScratchCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScratchCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScratchCardReq.Merge(m, src)
}
func (m *ScratchCardReq) XXX_Size() int {
	return m.Size()
}
func (m *ScratchCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ScratchCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_ScratchCardReq proto.InternalMessageInfo

type ScratchCardResp struct {
	Code                 int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Award                *CardAward `protobuf:"bytes,3,opt,name=Award,proto3" json:"Award,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ScratchCardResp) Reset()         { *m = ScratchCardResp{} }
func (m *ScratchCardResp) String() string { return proto.CompactTextString(m) }
func (*ScratchCardResp) ProtoMessage()    {}
func (*ScratchCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *ScratchCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScratchCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScratchCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScratchCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScratchCardResp.Merge(m, src)
}
func (m *ScratchCardResp) XXX_Size() int {
	return m.Size()
}
func (m *ScratchCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ScratchCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_ScratchCardResp proto.InternalMessageInfo

type ExchangeCardReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              int32    `protobuf:"varint,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	PlayerID             int64    `protobuf:"varint,3,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Nickname             string   `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	IsBatch              bool     `protobuf:"varint,5,opt,name=IsBatch,proto3" json:"IsBatch,omitempty"`
	VipLevel             int32    `protobuf:"varint,6,opt,name=VipLevel,proto3" json:"VipLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeCardReq) Reset()         { *m = ExchangeCardReq{} }
func (m *ExchangeCardReq) String() string { return proto.CompactTextString(m) }
func (*ExchangeCardReq) ProtoMessage()    {}
func (*ExchangeCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *ExchangeCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeCardReq.Merge(m, src)
}
func (m *ExchangeCardReq) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeCardReq proto.InternalMessageInfo

type ExchangeCardResp struct {
	Code                 int32        `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string       `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	IsBatch              bool         `protobuf:"varint,3,opt,name=IsBatch,proto3" json:"IsBatch,omitempty"`
	Awards               []*CardAward `protobuf:"bytes,4,rep,name=Awards,proto3" json:"Awards,omitempty"`
	Cards                []*CardInfo  `protobuf:"bytes,5,rep,name=Cards,proto3" json:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExchangeCardResp) Reset()         { *m = ExchangeCardResp{} }
func (m *ExchangeCardResp) String() string { return proto.CompactTextString(m) }
func (*ExchangeCardResp) ProtoMessage()    {}
func (*ExchangeCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *ExchangeCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeCardResp.Merge(m, src)
}
func (m *ExchangeCardResp) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeCardResp proto.InternalMessageInfo

type UpdateLossInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Delta                int32    `protobuf:"varint,3,opt,name=Delta,proto3" json:"Delta,omitempty"`
	VipLevel             int32    `protobuf:"varint,4,opt,name=VipLevel,proto3" json:"VipLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateLossInfoReq) Reset()         { *m = UpdateLossInfoReq{} }
func (m *UpdateLossInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateLossInfoReq) ProtoMessage()    {}
func (*UpdateLossInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *UpdateLossInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLossInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLossInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLossInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLossInfoReq.Merge(m, src)
}
func (m *UpdateLossInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLossInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLossInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLossInfoReq proto.InternalMessageInfo

type QueryLossInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             int64    `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	VipLevel             int32    `protobuf:"varint,3,opt,name=VipLevel,proto3" json:"VipLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryLossInfoReq) Reset()         { *m = QueryLossInfoReq{} }
func (m *QueryLossInfoReq) String() string { return proto.CompactTextString(m) }
func (*QueryLossInfoReq) ProtoMessage()    {}
func (*QueryLossInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *QueryLossInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLossInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLossInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLossInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLossInfoReq.Merge(m, src)
}
func (m *QueryLossInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryLossInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLossInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLossInfoReq proto.InternalMessageInfo

type QueryLossInfoResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Enable               bool     `protobuf:"varint,3,opt,name=Enable,proto3" json:"Enable,omitempty"`
	Balance              int64    `protobuf:"varint,4,opt,name=Balance,proto3" json:"Balance,omitempty"`
	TriggerMin           int32    `protobuf:"varint,5,opt,name=TriggerMin,proto3" json:"TriggerMin,omitempty"`
	TriggerMax           int32    `protobuf:"varint,6,opt,name=TriggerMax,proto3" json:"TriggerMax,omitempty"`
	CurLevel             int32    `protobuf:"varint,7,opt,name=CurLevel,proto3" json:"CurLevel,omitempty"`
	MinLevel             int32    `protobuf:"varint,8,opt,name=MinLevel,proto3" json:"MinLevel,omitempty"`
	MaxLevel             int32    `protobuf:"varint,9,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	DropRatio            int32    `protobuf:"varint,10,opt,name=DropRatio,proto3" json:"DropRatio,omitempty"`
	DropBase             int32    `protobuf:"varint,11,opt,name=DropBase,proto3" json:"DropBase,omitempty"`
	CardId               int32    `protobuf:"varint,12,opt,name=CardId,proto3" json:"CardId,omitempty"`
	Price                int32    `protobuf:"varint,13,opt,name=Price,proto3" json:"Price,omitempty"`
	ExpectPrice          int32    `protobuf:"varint,14,opt,name=ExpectPrice,proto3" json:"ExpectPrice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryLossInfoResp) Reset()         { *m = QueryLossInfoResp{} }
func (m *QueryLossInfoResp) String() string { return proto.CompactTextString(m) }
func (*QueryLossInfoResp) ProtoMessage()    {}
func (*QueryLossInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *QueryLossInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLossInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLossInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLossInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLossInfoResp.Merge(m, src)
}
func (m *QueryLossInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryLossInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLossInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLossInfoResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("given.service.v1.GivenSystemId", GivenSystemId_name, GivenSystemId_value)
	proto.RegisterEnum("given.service.v1.LoginMethod", LoginMethod_name, LoginMethod_value)
	proto.RegisterType((*SystemConf)(nil), "given.service.v1.SystemConf")
	proto.RegisterType((*GetSystemConfReq)(nil), "given.service.v1.GetSystemConfReq")
	proto.RegisterType((*GetSystemConfResp)(nil), "given.service.v1.GetSystemConfResp")
	proto.RegisterType((*QueryUserInfoReq)(nil), "given.service.v1.QueryUserInfoReq")
	proto.RegisterType((*SystemInfo)(nil), "given.service.v1.SystemInfo")
	proto.RegisterType((*QueryUserInfoResp)(nil), "given.service.v1.QueryUserInfoResp")
	proto.RegisterType((*UpdateUserInfoReq)(nil), "given.service.v1.UpdateUserInfoReq")
	proto.RegisterType((*UpdateUserInfoResp)(nil), "given.service.v1.UpdateUserInfoResp")
	proto.RegisterType((*QueryCardReq)(nil), "given.service.v1.QueryCardReq")
	proto.RegisterType((*CardInfo)(nil), "given.service.v1.CardInfo")
	proto.RegisterType((*CardAward)(nil), "given.service.v1.CardAward")
	proto.RegisterType((*QueryCardResp)(nil), "given.service.v1.QueryCardResp")
	proto.RegisterType((*DropCardTriggerReq)(nil), "given.service.v1.DropCardTriggerReq")
	proto.RegisterType((*DropCardTriggerResp)(nil), "given.service.v1.DropCardTriggerResp")
	proto.RegisterType((*DropCardReq)(nil), "given.service.v1.DropCardReq")
	proto.RegisterType((*ScratchCardReq)(nil), "given.service.v1.ScratchCardReq")
	proto.RegisterType((*ScratchCardResp)(nil), "given.service.v1.ScratchCardResp")
	proto.RegisterType((*ExchangeCardReq)(nil), "given.service.v1.ExchangeCardReq")
	proto.RegisterType((*ExchangeCardResp)(nil), "given.service.v1.ExchangeCardResp")
	proto.RegisterType((*UpdateLossInfoReq)(nil), "given.service.v1.UpdateLossInfoReq")
	proto.RegisterType((*QueryLossInfoReq)(nil), "given.service.v1.QueryLossInfoReq")
	proto.RegisterType((*QueryLossInfoResp)(nil), "given.service.v1.QueryLossInfoResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x5f, 0xaf, 0x93, 0xdd, 0xe4, 0x65, 0x37, 0xeb, 0x9d, 0x6e, 0x5b, 0xe3, 0x6e, 0xc3, 0x32,
	0x80, 0x54, 0x55, 0x22, 0xa1, 0xed, 0x85, 0x03, 0x97, 0x6e, 0x52, 0x56, 0x91, 0x76, 0x4b, 0x71,
	0x69, 0x91, 0x90, 0x38, 0x4c, 0x9c, 0x59, 0xc7, 0xc2, 0xb1, 0x5d, 0xdb, 0x49, 0x37, 0x20, 0x81,
	0x84, 0xb8, 0x23, 0xc4, 0x05, 0xc1, 0x11, 0xbe, 0x00, 0x1f, 0x81, 0x5b, 0x8f, 0x48, 0x7c, 0x01,
	0x28, 0x7c, 0x10, 0x34, 0x7f, 0xec, 0xd8, 0x4e, 0x9a, 0x6c, 0xba, 0xe5, 0x14, 0xff, 0xde, 0xbc,
	0x99, 0xdf, 0x9b, 0xdf, 0x9b, 0x99, 0xf7, 0x14, 0xa8, 0x92, 0xc0, 0x69, 0x06, 0xa1, 0x1f, 0xfb,
	0x48, 0xb3, 0x9d, 0x31, 0xf5, 0x9a, 0x11, 0x0d, 0xc7, 0x8e, 0x45, 0x9b, 0xe3, 0x5b, 0xc6, 0x3b,
	0xb6, 0x13, 0x0f, 0x46, 0xbd, 0xa6, 0xe5, 0x0f, 0x5b, 0xb6, 0x6f, 0xfb, 0x2d, 0xee, 0xd8, 0x1b,
	0x9d, 0x72, 0xc4, 0x01, 0xff, 0x12, 0x0b, 0x18, 0xfb, 0xb6, 0xef, 0xdb, 0x2e, 0x6d, 0x91, 0xc0,
	0x69, 0x11, 0xcf, 0xf3, 0x63, 0x12, 0x3b, 0xbe, 0x17, 0x89, 0x51, 0xfc, 0xab, 0x02, 0xf0, 0x70,
	0x12, 0xc5, 0x74, 0xd8, 0xf6, 0xbd, 0x53, 0x64, 0x40, 0x45, 0xa0, 0x6e, 0x47, 0x57, 0x0e, 0x94,
	0x1b, 0x65, 0x33, 0xc5, 0xe8, 0x0a, 0x6c, 0xdc, 0xf3, 0x48, 0xcf, 0xa5, 0xfa, 0xfa, 0x81, 0x72,
	0xa3, 0x62, 0x4a, 0x84, 0xf6, 0xa1, 0xfa, 0x41, 0x48, 0x9f, 0x8c, 0xa8, 0x67, 0x4d, 0x74, 0x95,
	0x4f, 0x9a, 0x1a, 0x10, 0x86, 0xad, 0xb6, 0xef, 0x8d, 0x69, 0x18, 0x9b, 0x8c, 0x58, 0x2f, 0x71,
	0x87, 0x9c, 0x0d, 0x1d, 0x40, 0x4d, 0xe2, 0x43, 0x12, 0x51, 0xbd, 0xcc, 0x5d, 0xb2, 0x26, 0x7c,
	0x13, 0xb4, 0x23, 0x1a, 0x4f, 0x03, 0x35, 0xe9, 0x13, 0x16, 0xcf, 0x11, 0x19, 0xd2, 0x34, 0x52,
	0x89, 0xf0, 0x97, 0xb0, 0x5b, 0xf0, 0x8d, 0x02, 0x84, 0xa0, 0xd4, 0xf6, 0xfb, 0x54, 0xba, 0xf2,
	0x6f, 0xa4, 0xc3, 0xe6, 0x09, 0x8d, 0x22, 0x62, 0x8b, 0x1d, 0x55, 0xcd, 0x04, 0xa2, 0xf7, 0xa0,
	0xc2, 0x66, 0x1e, 0x3b, 0x51, 0xac, 0xab, 0x07, 0xea, 0x8d, 0xda, 0xed, 0xfd, 0x66, 0x31, 0x0f,
	0xcd, 0x0c, 0x43, 0xea, 0x8d, 0xbf, 0x55, 0x40, 0xfb, 0x68, 0x44, 0xc3, 0xc9, 0xa3, 0x88, 0x86,
	0x5d, 0xef, 0xd4, 0x5f, 0x10, 0x29, 0x53, 0xfb, 0x81, 0x4b, 0x26, 0x34, 0xec, 0x76, 0x78, 0x04,
	0xaa, 0x99, 0x62, 0x36, 0xf6, 0xd8, 0x09, 0x8e, 0xe9, 0x98, 0xba, 0x52, 0xd4, 0x14, 0x33, 0xbd,
	0x8e, 0x7d, 0xdb, 0xf1, 0x4e, 0x68, 0x3c, 0xf0, 0xfb, 0x52, 0xd2, 0xac, 0x09, 0xff, 0x94, 0xa6,
	0x95, 0xc5, 0xb0, 0x30, 0xad, 0x08, 0x4a, 0xf7, 0xc9, 0x30, 0x91, 0x80, 0x7f, 0xb3, 0x80, 0x4d,
	0x3a, 0x24, 0x8e, 0x27, 0xa9, 0x25, 0x42, 0x7b, 0x50, 0x3e, 0x62, 0x32, 0x48, 0x4a, 0x01, 0xd8,
	0x0a, 0x1f, 0x06, 0xd4, 0xe3, 0x79, 0xab, 0x98, 0xfc, 0x9b, 0x31, 0xb2, 0xdf, 0x0e, 0x89, 0xa9,
	0xbe, 0xc1, 0x57, 0x4e, 0x31, 0xfe, 0x1a, 0x76, 0x0b, 0x12, 0xad, 0x9c, 0xa0, 0xf7, 0x93, 0xed,
	0x9d, 0x27, 0x45, 0x9c, 0x23, 0xe3, 0x8f, 0x7f, 0x51, 0x60, 0xf7, 0x51, 0xd0, 0x27, 0x31, 0x7d,
	0x05, 0x59, 0x4a, 0x85, 0x55, 0x0b, 0xc2, 0xee, 0x43, 0x95, 0xeb, 0x73, 0xc4, 0x74, 0x14, 0x82,
	0x4d, 0x0d, 0x2c, 0x87, 0x1c, 0xdc, 0x3b, 0x0b, 0xa8, 0xd7, 0x4f, 0xce, 0x7c, 0xc6, 0x84, 0x63,
	0x40, 0xc5, 0x20, 0x57, 0xd6, 0xe9, 0x5d, 0x28, 0x75, 0x48, 0x4c, 0x78, 0x6c, 0xcb, 0x14, 0xe2,
	0x9e, 0xf8, 0x10, 0xb6, 0x78, 0x72, 0xda, 0x24, 0xec, 0xbf, 0xa4, 0x2a, 0x78, 0x00, 0x15, 0x36,
	0x9d, 0x1f, 0xbd, 0x3a, 0xac, 0x77, 0xfb, 0x72, 0xee, 0x7a, 0xb7, 0xcf, 0x8e, 0x50, 0xdb, 0x1f,
	0x79, 0x31, 0x9f, 0x54, 0x36, 0x05, 0x60, 0xd6, 0x07, 0xa1, 0x63, 0x51, 0x29, 0xa2, 0x00, 0x4c,
	0x23, 0xa6, 0x85, 0x15, 0x8b, 0x31, 0x79, 0xce, 0x33, 0x26, 0xfc, 0x14, 0xaa, 0x8c, 0xe9, 0xee,
	0x53, 0x12, 0xf6, 0x59, 0xa8, 0x9c, 0x36, 0xa1, 0x93, 0x88, 0x25, 0x82, 0x3b, 0xf0, 0xc7, 0x45,
	0xd0, 0x4e, 0x0d, 0xa8, 0x01, 0xc0, 0xc1, 0xc9, 0xc8, 0x8d, 0x1d, 0xc9, 0x9f, 0xb1, 0x4c, 0x43,
	0x2b, 0x65, 0x42, 0xc3, 0x3e, 0x6c, 0x67, 0x64, 0x7a, 0x89, 0xbc, 0x94, 0xd9, 0xcc, 0x48, 0x1e,
	0x5d, 0x63, 0x36, 0x31, 0x89, 0x80, 0xa6, 0x70, 0xc4, 0x3d, 0x40, 0x9d, 0xd0, 0x0f, 0x18, 0xf8,
	0x38, 0x74, 0x6c, 0x9b, 0x86, 0x8b, 0xb2, 0xa3, 0xc3, 0xe6, 0xdd, 0x90, 0x7a, 0x44, 0x26, 0xa7,
	0x6c, 0x26, 0x30, 0x97, 0x37, 0xb5, 0x90, 0xb7, 0x36, 0x5c, 0x9a, 0xe1, 0x58, 0x75, 0x6b, 0xf8,
	0x3b, 0x05, 0x6a, 0xc9, 0x2a, 0xaf, 0x3c, 0xc4, 0x4c, 0x8e, 0x4b, 0xb9, 0x1c, 0x67, 0x9f, 0xcb,
	0x72, 0xfe, 0xb9, 0xc4, 0x1d, 0xa8, 0x3f, 0xb4, 0x42, 0x12, 0x5b, 0x83, 0x8b, 0x1c, 0xea, 0x10,
	0x76, 0x72, 0xab, 0xac, 0x9c, 0xf3, 0x5b, 0x50, 0xe6, 0xc7, 0x4a, 0x5e, 0xc6, 0x6b, 0xf3, 0x73,
	0xce, 0x5d, 0x4c, 0xe1, 0x89, 0x7f, 0x53, 0x60, 0xe7, 0xde, 0x99, 0x35, 0x20, 0x9e, 0x4d, 0xff,
	0x1f, 0x3d, 0x0d, 0xa8, 0xdc, 0x77, 0xac, 0xcf, 0x3d, 0x56, 0x01, 0x4a, 0xe2, 0x9d, 0x4e, 0x30,
	0x5b, 0xb1, 0x1b, 0x1d, 0xb2, 0x1d, 0xcb, 0xa7, 0x3d, 0x81, 0x39, 0xb5, 0x37, 0x0a, 0x6a, 0xff,
	0xae, 0x80, 0x96, 0x8f, 0x79, 0x65, 0xa5, 0x32, 0xc4, 0x6a, 0x9e, 0xf8, 0x0e, 0x6c, 0x70, 0x65,
	0x22, 0xbd, 0xc4, 0x2f, 0xce, 0x42, 0x11, 0xa5, 0xeb, 0xf4, 0xb2, 0x95, 0xcf, 0x7b, 0xd9, 0x26,
	0x49, 0x7d, 0x38, 0xf6, 0xa3, 0xe8, 0x22, 0xf5, 0x61, 0x0f, 0xca, 0x1d, 0xea, 0xca, 0x07, 0xb8,
	0x6c, 0x0a, 0x90, 0x93, 0xaf, 0x54, 0x90, 0xaf, 0x27, 0xfb, 0x87, 0x8b, 0x32, 0x2f, 0xe8, 0x1f,
	0xf0, 0xf7, 0xaa, 0xac, 0xc0, 0x53, 0x92, 0x95, 0x73, 0x34, 0xed, 0x06, 0xd5, 0x5c, 0x37, 0xa8,
	0xc3, 0xe6, 0x21, 0x71, 0x89, 0x27, 0x1f, 0x4c, 0xd5, 0x4c, 0x20, 0x7b, 0x68, 0xe5, 0xab, 0x72,
	0xe2, 0x78, 0xf2, 0x92, 0x66, 0x2c, 0xd9, 0x71, 0x72, 0x26, 0x8f, 0x55, 0xc6, 0xc2, 0x76, 0xd4,
	0x1e, 0x85, 0x62, 0x47, 0x9b, 0x62, 0x47, 0x09, 0x66, 0x63, 0x27, 0x8e, 0x27, 0xc6, 0x2a, 0x62,
	0x2c, 0xc1, 0x7c, 0x8c, 0x9c, 0x89, 0xb1, 0xaa, 0x1c, 0x93, 0x98, 0x95, 0x06, 0xf6, 0x56, 0x89,
	0xd6, 0x14, 0x44, 0x69, 0x48, 0x0d, 0x6c, 0x26, 0x03, 0xbc, 0x6e, 0xd4, 0xc4, 0xcc, 0x04, 0x67,
	0x1e, 0xa2, 0xad, 0xdc, 0x43, 0x94, 0x96, 0x8b, 0xed, 0x05, 0x95, 0xac, 0x3e, 0x53, 0xc9, 0x6e,
	0x7e, 0x06, 0xdb, 0xbc, 0xf8, 0xcb, 0x82, 0xdc, 0x47, 0xf5, 0xa4, 0xc5, 0xb9, 0x3f, 0x72, 0x5d,
	0x6d, 0x0d, 0x21, 0xa8, 0x4b, 0x4c, 0x9f, 0x5a, 0xfe, 0x90, 0x86, 0x9a, 0x32, 0xb5, 0x99, 0xd4,
	0x1a, 0x90, 0xd0, 0xa6, 0xda, 0x3a, 0xda, 0x03, 0x4d, 0xd8, 0x1e, 0x79, 0xa3, 0x88, 0x3e, 0x26,
	0xee, 0x88, 0x6a, 0xea, 0xcd, 0x4e, 0xae, 0x65, 0x44, 0x1a, 0x6c, 0xdd, 0xb5, 0x2c, 0x56, 0x7a,
	0xb9, 0x55, 0x5b, 0x43, 0x3b, 0x50, 0xfb, 0x84, 0x2d, 0x22, 0x0d, 0x7c, 0xed, 0x36, 0x75, 0xdd,
	0x60, 0xe0, 0x7b, 0x54, 0xd8, 0xd6, 0x6f, 0xff, 0x5c, 0x95, 0x0d, 0x20, 0x1a, 0xc3, 0x76, 0xae,
	0xc9, 0x46, 0x78, 0xf6, 0x56, 0x15, 0x3b, 0x76, 0xe3, 0xcd, 0xa5, 0x3e, 0x51, 0x80, 0xf7, 0xbf,
	0xf9, 0xf3, 0xdf, 0x1f, 0xd6, 0xaf, 0xe0, 0xbd, 0x16, 0x77, 0x6e, 0xe5, 0x69, 0xc6, 0xb2, 0xee,
	0x26, 0x3d, 0xd1, 0x3c, 0xde, 0x62, 0xff, 0x3d, 0x8f, 0x77, 0xa6, 0x01, 0x9d, 0xe1, 0xcd, 0xd3,
	0x7c, 0x01, 0xf5, 0x7c, 0x33, 0x86, 0xe6, 0x2c, 0x3a, 0xd3, 0x53, 0x1a, 0x6f, 0x2d, 0x77, 0x8a,
	0x02, 0x7c, 0x9d, 0x53, 0x5f, 0xc5, 0x97, 0x25, 0x75, 0x81, 0xe9, 0x14, 0xaa, 0x69, 0xaf, 0x81,
	0x1a, 0x2f, 0xd8, 0x8b, 0x2c, 0x0f, 0xc6, 0xeb, 0x0b, 0xc7, 0xa3, 0x00, 0xeb, 0x9c, 0x0c, 0x61,
	0x2d, 0xbb, 0x4f, 0xbe, 0xf4, 0x57, 0xb0, 0x53, 0x28, 0xff, 0x68, 0x4e, 0xfc, 0xb3, 0x5d, 0x88,
	0xf1, 0xf6, 0x39, 0xbc, 0xa2, 0x00, 0x37, 0x38, 0xb3, 0x8e, 0xaf, 0x48, 0xe6, 0x22, 0x99, 0x2d,
	0xae, 0x1b, 0x8f, 0xe5, 0xfa, 0x8b, 0x97, 0x5c, 0x94, 0xd1, 0xec, 0x83, 0x86, 0xaf, 0x72, 0xbe,
	0x5d, 0xbc, 0x53, 0xe0, 0x43, 0x1e, 0xd4, 0x32, 0xa5, 0x1c, 0x1d, 0xcc, 0x69, 0x8b, 0x73, 0xfd,
	0x82, 0xf1, 0xc6, 0x12, 0x8f, 0x28, 0xc0, 0x06, 0x27, 0xdb, 0xc3, 0x48, 0x92, 0x65, 0x09, 0x42,
	0xd8, 0xca, 0x56, 0x44, 0x34, 0x67, 0xb9, 0x42, 0x95, 0x37, 0xf0, 0x32, 0x97, 0x28, 0xc0, 0xd7,
	0x38, 0xe5, 0x65, 0x7c, 0x49, 0x52, 0xe6, 0x38, 0x26, 0xc9, 0x81, 0x4d, 0x24, 0x79, 0xf1, 0x81,
	0xcd, 0x94, 0x9a, 0xf3, 0x09, 0x3b, 0xff, 0xbc, 0xa6, 0x44, 0xc9, 0x1d, 0x4d, 0x0d, 0x78, 0xe9,
	0xa2, 0xe7, 0x24, 0x9e, 0x7b, 0x47, 0x13, 0x8f, 0xc3, 0xd7, 0x9e, 0xfd, 0xdd, 0x58, 0x7b, 0xf6,
	0xbc, 0xa1, 0xfc, 0xf1, 0xbc, 0xa1, 0xfc, 0xf5, 0xbc, 0xa1, 0xfc, 0xf8, 0x4f, 0x63, 0xed, 0x53,
	0x95, 0x04, 0x4e, 0x6f, 0x83, 0xff, 0xdb, 0x71, 0xe7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6,
	0x71, 0xf3, 0xcb, 0x59, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GivenClient is the client API for Given service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GivenClient interface {
	GetSystemConf(ctx context.Context, in *GetSystemConfReq, opts ...grpc.CallOption) (*GetSystemConfResp, error)
	QueryUserInfo(ctx context.Context, in *QueryUserInfoReq, opts ...grpc.CallOption) (*QueryUserInfoResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	//查询刮刮卡信息
	QueryCard(ctx context.Context, in *QueryCardReq, opts ...grpc.CallOption) (*QueryCardResp, error)
	DropCardTrigger(ctx context.Context, in *DropCardTriggerReq, opts ...grpc.CallOption) (*DropCardTriggerResp, error)
	//成功掉落刮刮卡(会重置C值)
	DropCard(ctx context.Context, in *DropCardReq, opts ...grpc.CallOption) (*QueryLossInfoResp, error)
	//刮卡请求
	ScratchCard(ctx context.Context, in *ScratchCardReq, opts ...grpc.CallOption) (*ScratchCardResp, error)
	//兑换刮刮卡
	ExchangeCard(ctx context.Context, in *ExchangeCardReq, opts ...grpc.CallOption) (*ExchangeCardResp, error)
	//更新C值信息
	UpdateLossInfo(ctx context.Context, in *UpdateLossInfoReq, opts ...grpc.CallOption) (*QueryLossInfoResp, error)
	//查询C值信息（当前C值, 触发值，掉落区间，掉落概率，掉落卡ID，价值）
	QueryLossInfo(ctx context.Context, in *QueryLossInfoReq, opts ...grpc.CallOption) (*QueryLossInfoResp, error)
}

type givenClient struct {
	cc *grpc.ClientConn
}

func NewGivenClient(cc *grpc.ClientConn) GivenClient {
	return &givenClient{cc}
}

func (c *givenClient) GetSystemConf(ctx context.Context, in *GetSystemConfReq, opts ...grpc.CallOption) (*GetSystemConfResp, error) {
	out := new(GetSystemConfResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/GetSystemConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) QueryUserInfo(ctx context.Context, in *QueryUserInfoReq, opts ...grpc.CallOption) (*QueryUserInfoResp, error) {
	out := new(QueryUserInfoResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/QueryUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) QueryCard(ctx context.Context, in *QueryCardReq, opts ...grpc.CallOption) (*QueryCardResp, error) {
	out := new(QueryCardResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/QueryCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) DropCardTrigger(ctx context.Context, in *DropCardTriggerReq, opts ...grpc.CallOption) (*DropCardTriggerResp, error) {
	out := new(DropCardTriggerResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/DropCardTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) DropCard(ctx context.Context, in *DropCardReq, opts ...grpc.CallOption) (*QueryLossInfoResp, error) {
	out := new(QueryLossInfoResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/DropCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) ScratchCard(ctx context.Context, in *ScratchCardReq, opts ...grpc.CallOption) (*ScratchCardResp, error) {
	out := new(ScratchCardResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/ScratchCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) ExchangeCard(ctx context.Context, in *ExchangeCardReq, opts ...grpc.CallOption) (*ExchangeCardResp, error) {
	out := new(ExchangeCardResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/ExchangeCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) UpdateLossInfo(ctx context.Context, in *UpdateLossInfoReq, opts ...grpc.CallOption) (*QueryLossInfoResp, error) {
	out := new(QueryLossInfoResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/UpdateLossInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givenClient) QueryLossInfo(ctx context.Context, in *QueryLossInfoReq, opts ...grpc.CallOption) (*QueryLossInfoResp, error) {
	out := new(QueryLossInfoResp)
	err := c.cc.Invoke(ctx, "/given.service.v1.Given/QueryLossInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GivenServer is the server API for Given service.
type GivenServer interface {
	GetSystemConf(context.Context, *GetSystemConfReq) (*GetSystemConfResp, error)
	QueryUserInfo(context.Context, *QueryUserInfoReq) (*QueryUserInfoResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	//查询刮刮卡信息
	QueryCard(context.Context, *QueryCardReq) (*QueryCardResp, error)
	DropCardTrigger(context.Context, *DropCardTriggerReq) (*DropCardTriggerResp, error)
	//成功掉落刮刮卡(会重置C值)
	DropCard(context.Context, *DropCardReq) (*QueryLossInfoResp, error)
	//刮卡请求
	ScratchCard(context.Context, *ScratchCardReq) (*ScratchCardResp, error)
	//兑换刮刮卡
	ExchangeCard(context.Context, *ExchangeCardReq) (*ExchangeCardResp, error)
	//更新C值信息
	UpdateLossInfo(context.Context, *UpdateLossInfoReq) (*QueryLossInfoResp, error)
	//查询C值信息（当前C值, 触发值，掉落区间，掉落概率，掉落卡ID，价值）
	QueryLossInfo(context.Context, *QueryLossInfoReq) (*QueryLossInfoResp, error)
}

// UnimplementedGivenServer can be embedded to have forward compatible implementations.
type UnimplementedGivenServer struct {
}

func (*UnimplementedGivenServer) GetSystemConf(ctx context.Context, req *GetSystemConfReq) (*GetSystemConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConf not implemented")
}
func (*UnimplementedGivenServer) QueryUserInfo(ctx context.Context, req *QueryUserInfoReq) (*QueryUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserInfo not implemented")
}
func (*UnimplementedGivenServer) UpdateUserInfo(ctx context.Context, req *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (*UnimplementedGivenServer) QueryCard(ctx context.Context, req *QueryCardReq) (*QueryCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCard not implemented")
}
func (*UnimplementedGivenServer) DropCardTrigger(ctx context.Context, req *DropCardTriggerReq) (*DropCardTriggerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCardTrigger not implemented")
}
func (*UnimplementedGivenServer) DropCard(ctx context.Context, req *DropCardReq) (*QueryLossInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCard not implemented")
}
func (*UnimplementedGivenServer) ScratchCard(ctx context.Context, req *ScratchCardReq) (*ScratchCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScratchCard not implemented")
}
func (*UnimplementedGivenServer) ExchangeCard(ctx context.Context, req *ExchangeCardReq) (*ExchangeCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCard not implemented")
}
func (*UnimplementedGivenServer) UpdateLossInfo(ctx context.Context, req *UpdateLossInfoReq) (*QueryLossInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLossInfo not implemented")
}
func (*UnimplementedGivenServer) QueryLossInfo(ctx context.Context, req *QueryLossInfoReq) (*QueryLossInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLossInfo not implemented")
}

func RegisterGivenServer(s *grpc.Server, srv GivenServer) {
	s.RegisterService(&_Given_serviceDesc, srv)
}

func _Given_GetSystemConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).GetSystemConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/GetSystemConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).GetSystemConf(ctx, req.(*GetSystemConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_QueryUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).QueryUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/QueryUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).QueryUserInfo(ctx, req.(*QueryUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_QueryCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).QueryCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/QueryCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).QueryCard(ctx, req.(*QueryCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_DropCardTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCardTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).DropCardTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/DropCardTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).DropCardTrigger(ctx, req.(*DropCardTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_DropCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).DropCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/DropCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).DropCard(ctx, req.(*DropCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_ScratchCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScratchCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).ScratchCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/ScratchCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).ScratchCard(ctx, req.(*ScratchCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_ExchangeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).ExchangeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/ExchangeCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).ExchangeCard(ctx, req.(*ExchangeCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_UpdateLossInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLossInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).UpdateLossInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/UpdateLossInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).UpdateLossInfo(ctx, req.(*UpdateLossInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Given_QueryLossInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLossInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivenServer).QueryLossInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/given.service.v1.Given/QueryLossInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivenServer).QueryLossInfo(ctx, req.(*QueryLossInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Given_serviceDesc = grpc.ServiceDesc{
	ServiceName: "given.service.v1.Given",
	HandlerType: (*GivenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemConf",
			Handler:    _Given_GetSystemConf_Handler,
		},
		{
			MethodName: "QueryUserInfo",
			Handler:    _Given_QueryUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Given_UpdateUserInfo_Handler,
		},
		{
			MethodName: "QueryCard",
			Handler:    _Given_QueryCard_Handler,
		},
		{
			MethodName: "DropCardTrigger",
			Handler:    _Given_DropCardTrigger_Handler,
		},
		{
			MethodName: "DropCard",
			Handler:    _Given_DropCard_Handler,
		},
		{
			MethodName: "ScratchCard",
			Handler:    _Given_ScratchCard_Handler,
		},
		{
			MethodName: "ExchangeCard",
			Handler:    _Given_ExchangeCard_Handler,
		},
		{
			MethodName: "UpdateLossInfo",
			Handler:    _Given_UpdateLossInfo_Handler,
		},
		{
			MethodName: "QueryLossInfo",
			Handler:    _Given_QueryLossInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *SystemConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConvertBase != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ConvertBase))
		i--
		dAtA[i] = 0x28
	}
	if m.ConvertRatio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ConvertRatio))
		i--
		dAtA[i] = 0x20
	}
	if m.Frequency != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x18
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SystemID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SystemID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSystemConfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSystemConfReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSystemConfReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSystemConfResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSystemConfResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSystemConfResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfList) > 0 {
		for iNdEx := len(m.ConfList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConfList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginMethod != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoginMethod))
		i--
		dAtA[i] = 0x20
	}
	if m.VipLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OpenDate) > 0 {
		i -= len(m.OpenDate)
		copy(dAtA[i:], m.OpenDate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenDate)))
		i--
		dAtA[i] = 0x32
	}
	if m.Open {
		i--
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Given != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Given))
		i--
		dAtA[i] = 0x20
	}
	if m.Remain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Remain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.SystemID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SystemID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SystemList) > 0 {
		for iNdEx := len(m.SystemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SystemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GivenExpend != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GivenExpend))
		i--
		dAtA[i] = 0x28
	}
	if m.GivenGain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GivenGain))
		i--
		dAtA[i] = 0x20
	}
	if m.SystemID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SystemID))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpectPrice != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpectPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardAward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardAward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardAward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Price != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.AwardMulti != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardMulti))
		i--
		dAtA[i] = 0x18
	}
	if m.AwardBase != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardBase))
		i--
		dAtA[i] = 0x10
	}
	if m.CardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DropCardTriggerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropCardTriggerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DropCardTriggerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x18
	}
	if m.ArenaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DropCardTriggerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropCardTriggerResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DropCardTriggerResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DropCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DropCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.CardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x20
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x18
	}
	if m.ArenaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScratchCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScratchCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScratchCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScratchCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScratchCardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScratchCardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Award != nil {
		{
			size, err := m.Award.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipLevel))
		i--
		dAtA[i] = 0x30
	}
	if m.IsBatch {
		i--
		if m.IsBatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x22
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x18
	}
	if m.ArenaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeCardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeCardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Awards) > 0 {
		for iNdEx := len(m.Awards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Awards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.IsBatch {
		i--
		if m.IsBatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLossInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLossInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLossInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipLevel))
		i--
		dAtA[i] = 0x20
	}
	if m.Delta != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Delta))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLossInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLossInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLossInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLossInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLossInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLossInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpectPrice != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpectPrice))
		i--
		dAtA[i] = 0x70
	}
	if m.Price != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x68
	}
	if m.CardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x60
	}
	if m.DropBase != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DropBase))
		i--
		dAtA[i] = 0x58
	}
	if m.DropRatio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DropRatio))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MaxLevel))
		i--
		dAtA[i] = 0x48
	}
	if m.MinLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MinLevel))
		i--
		dAtA[i] = 0x40
	}
	if m.CurLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurLevel))
		i--
		dAtA[i] = 0x38
	}
	if m.TriggerMax != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TriggerMax))
		i--
		dAtA[i] = 0x30
	}
	if m.TriggerMin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TriggerMin))
		i--
		dAtA[i] = 0x28
	}
	if m.Balance != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x20
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemID != 0 {
		n += 1 + sovApi(uint64(m.SystemID))
	}
	if m.Enable {
		n += 2
	}
	if m.Frequency != 0 {
		n += 1 + sovApi(uint64(m.Frequency))
	}
	if m.ConvertRatio != 0 {
		n += 1 + sovApi(uint64(m.ConvertRatio))
	}
	if m.ConvertBase != 0 {
		n += 1 + sovApi(uint64(m.ConvertBase))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSystemConfReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSystemConfResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ConfList) > 0 {
		for _, e := range m.ConfList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryUserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.VipLevel != 0 {
		n += 1 + sovApi(uint64(m.VipLevel))
	}
	if m.LoginMethod != 0 {
		n += 1 + sovApi(uint64(m.LoginMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemID != 0 {
		n += 1 + sovApi(uint64(m.SystemID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Remain != 0 {
		n += 1 + sovApi(uint64(m.Remain))
	}
	if m.Given != 0 {
		n += 1 + sovApi(uint64(m.Given))
	}
	if m.Open {
		n += 2
	}
	l = len(m.OpenDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryUserInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.SystemList) > 0 {
		for _, e := range m.SystemList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.SystemID != 0 {
		n += 1 + sovApi(uint64(m.SystemID))
	}
	if m.GivenGain != 0 {
		n += 1 + sovApi(uint64(m.GivenGain))
	}
	if m.GivenExpend != 0 {
		n += 1 + sovApi(uint64(m.GivenExpend))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.Price != 0 {
		n += 1 + sovApi(uint64(m.Price))
	}
	if m.ExpectPrice != 0 {
		n += 1 + sovApi(uint64(m.ExpectPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardAward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovApi(uint64(m.CardId))
	}
	if m.AwardBase != 0 {
		n += 1 + sovApi(uint64(m.AwardBase))
	}
	if m.AwardMulti != 0 {
		n += 1 + sovApi(uint64(m.AwardMulti))
	}
	if m.Price != 0 {
		n += 1 + sovApi(uint64(m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropCardTriggerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropCardTriggerResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DropCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.CardId != 0 {
		n += 1 + sovApi(uint64(m.CardId))
	}
	if m.VipLevel != 0 {
		n += 1 + sovApi(uint64(m.VipLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScratchCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScratchCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Award != nil {
		l = m.Award.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsBatch {
		n += 2
	}
	if m.VipLevel != 0 {
		n += 1 + sovApi(uint64(m.VipLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsBatch {
		n += 2
	}
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateLossInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.Delta != 0 {
		n += 1 + sovApi(uint64(m.Delta))
	}
	if m.VipLevel != 0 {
		n += 1 + sovApi(uint64(m.VipLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryLossInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.VipLevel != 0 {
		n += 1 + sovApi(uint64(m.VipLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryLossInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	if m.Balance != 0 {
		n += 1 + sovApi(uint64(m.Balance))
	}
	if m.TriggerMin != 0 {
		n += 1 + sovApi(uint64(m.TriggerMin))
	}
	if m.TriggerMax != 0 {
		n += 1 + sovApi(uint64(m.TriggerMax))
	}
	if m.CurLevel != 0 {
		n += 1 + sovApi(uint64(m.CurLevel))
	}
	if m.MinLevel != 0 {
		n += 1 + sovApi(uint64(m.MinLevel))
	}
	if m.MaxLevel != 0 {
		n += 1 + sovApi(uint64(m.MaxLevel))
	}
	if m.DropRatio != 0 {
		n += 1 + sovApi(uint64(m.DropRatio))
	}
	if m.DropBase != 0 {
		n += 1 + sovApi(uint64(m.DropBase))
	}
	if m.CardId != 0 {
		n += 1 + sovApi(uint64(m.CardId))
	}
	if m.Price != 0 {
		n += 1 + sovApi(uint64(m.Price))
	}
	if m.ExpectPrice != 0 {
		n += 1 + sovApi(uint64(m.ExpectPrice))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemID", wireType)
			}
			m.SystemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertRatio", wireType)
			}
			m.ConvertRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvertRatio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertBase", wireType)
			}
			m.ConvertBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvertBase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSystemConfReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSystemConfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSystemConfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSystemConfResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSystemConfResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSystemConfResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfList = append(m.ConfList, &SystemConf{})
			if err := m.ConfList[len(m.ConfList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginMethod", wireType)
			}
			m.LoginMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginMethod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemID", wireType)
			}
			m.SystemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remain", wireType)
			}
			m.Remain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Remain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Given", wireType)
			}
			m.Given = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Given |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemList = append(m.SystemList, &SystemInfo{})
			if err := m.SystemList[len(m.SystemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemID", wireType)
			}
			m.SystemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GivenGain", wireType)
			}
			m.GivenGain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GivenGain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GivenExpend", wireType)
			}
			m.GivenExpend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GivenExpend |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SystemInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectPrice", wireType)
			}
			m.ExpectPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardAward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardAward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardAward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardBase", wireType)
			}
			m.AwardBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardBase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardMulti", wireType)
			}
			m.AwardMulti = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardMulti |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &CardInfo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropCardTriggerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropCardTriggerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropCardTriggerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropCardTriggerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropCardTriggerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropCardTriggerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScratchCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScratchCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScratchCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScratchCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScratchCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScratchCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Award", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Award == nil {
				m.Award = &CardAward{}
			}
			if err := m.Award.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBatch = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBatch = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &CardAward{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &CardInfo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLossInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLossInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLossInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLossInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLossInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLossInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLossInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLossInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLossInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerMin", wireType)
			}
			m.TriggerMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerMin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerMax", wireType)
			}
			m.TriggerMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurLevel", wireType)
			}
			m.CurLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLevel", wireType)
			}
			m.MinLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropRatio", wireType)
			}
			m.DropRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropRatio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropBase", wireType)
			}
			m.DropBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropBase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectPrice", wireType)
			}
			m.ExpectPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
