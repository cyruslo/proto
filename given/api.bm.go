// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathGivenGetSystemConf = "/given/GetSystemConf"
var PathGivenQueryUserInfo = "/given/QueryUserInfo"
var PathGivenUpdateUserInfo = "/given/UpdateUserInfo"
var PathGivenQueryCard = "/given/QueryCard"
var PathGivenDropCardTrigger = "/given/DropCardTrigger"
var PathGivenDropCard = "/given/DropCard"
var PathGivenScratchCard = "/given/ScratchCard"
var PathGivenExchangeCard = "/given/ExchangeCard"
var PathGivenUpdateLossInfo = "/given/UpdateLossInfo"
var PathGivenQueryLossInfo = "/given/QueryLossInfo"

// GivenBMServer is the server API for Given service.
type GivenBMServer interface {
	GetSystemConf(ctx context.Context, req *GetSystemConfReq) (resp *GetSystemConfResp, err error)

	QueryUserInfo(ctx context.Context, req *QueryUserInfoReq) (resp *QueryUserInfoResp, err error)

	UpdateUserInfo(ctx context.Context, req *UpdateUserInfoReq) (resp *UpdateUserInfoResp, err error)

	// 查询刮刮卡信息
	QueryCard(ctx context.Context, req *QueryCardReq) (resp *QueryCardResp, err error)

	DropCardTrigger(ctx context.Context, req *DropCardTriggerReq) (resp *DropCardTriggerResp, err error)

	// 成功掉落刮刮卡(会重置C值)
	DropCard(ctx context.Context, req *DropCardReq) (resp *QueryLossInfoResp, err error)

	// 刮卡请求
	ScratchCard(ctx context.Context, req *ScratchCardReq) (resp *ScratchCardResp, err error)

	// 兑换刮刮卡
	ExchangeCard(ctx context.Context, req *ExchangeCardReq) (resp *ExchangeCardResp, err error)

	// 更新C值信息
	UpdateLossInfo(ctx context.Context, req *UpdateLossInfoReq) (resp *QueryLossInfoResp, err error)

	// 查询C值信息（当前C值, 触发值，掉落区间，掉落概率，掉落卡ID，价值）
	QueryLossInfo(ctx context.Context, req *QueryLossInfoReq) (resp *QueryLossInfoResp, err error)
}

var GivenSvc GivenBMServer

func givenGetSystemConf(c *bm.Context) {
	p := new(GetSystemConfReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.GetSystemConf(c, p)
	c.JSON(resp, err)
}

func givenQueryUserInfo(c *bm.Context) {
	p := new(QueryUserInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.QueryUserInfo(c, p)
	c.JSON(resp, err)
}

func givenUpdateUserInfo(c *bm.Context) {
	p := new(UpdateUserInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.UpdateUserInfo(c, p)
	c.JSON(resp, err)
}

func givenQueryCard(c *bm.Context) {
	p := new(QueryCardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.QueryCard(c, p)
	c.JSON(resp, err)
}

func givenDropCardTrigger(c *bm.Context) {
	p := new(DropCardTriggerReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.DropCardTrigger(c, p)
	c.JSON(resp, err)
}

func givenDropCard(c *bm.Context) {
	p := new(DropCardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.DropCard(c, p)
	c.JSON(resp, err)
}

func givenScratchCard(c *bm.Context) {
	p := new(ScratchCardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.ScratchCard(c, p)
	c.JSON(resp, err)
}

func givenExchangeCard(c *bm.Context) {
	p := new(ExchangeCardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.ExchangeCard(c, p)
	c.JSON(resp, err)
}

func givenUpdateLossInfo(c *bm.Context) {
	p := new(UpdateLossInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.UpdateLossInfo(c, p)
	c.JSON(resp, err)
}

func givenQueryLossInfo(c *bm.Context) {
	p := new(QueryLossInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GivenSvc.QueryLossInfo(c, p)
	c.JSON(resp, err)
}

// RegisterGivenBMServer Register the blademaster route
func RegisterGivenBMServer(e *bm.Engine, server GivenBMServer) {
	GivenSvc = server
	e.POST("/given/GetSystemConf", givenGetSystemConf)
	e.POST("/given/QueryUserInfo", givenQueryUserInfo)
	e.POST("/given/UpdateUserInfo", givenUpdateUserInfo)
	e.POST("/given/QueryCard", givenQueryCard)
	e.POST("/given/DropCardTrigger", givenDropCardTrigger)
	e.POST("/given/DropCard", givenDropCard)
	e.POST("/given/ScratchCard", givenScratchCard)
	e.POST("/given/ExchangeCard", givenExchangeCard)
	e.POST("/given/UpdateLossInfo", givenUpdateLossInfo)
	e.POST("/given/QueryLossInfo", givenQueryLossInfo)
}
