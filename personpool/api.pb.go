// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//奖池状态
type PersonPoolStatusCode int32

const (
	PersonPoolStatusCode_InitCode       PersonPoolStatusCode = 0
	PersonPoolStatusCode_CanLottery     PersonPoolStatusCode = 1
	PersonPoolStatusCode_NotLottery     PersonPoolStatusCode = 2
	PersonPoolStatusCode_StopUploadPool PersonPoolStatusCode = 3
	PersonPoolStatusCode_LimitPool      PersonPoolStatusCode = 4
)

var PersonPoolStatusCode_name = map[int32]string{
	0: "InitCode",
	1: "CanLottery",
	2: "NotLottery",
	3: "StopUploadPool",
	4: "LimitPool",
}

var PersonPoolStatusCode_value = map[string]int32{
	"InitCode":       0,
	"CanLottery":     1,
	"NotLottery":     2,
	"StopUploadPool": 3,
	"LimitPool":      4,
}

func (x PersonPoolStatusCode) String() string {
	return proto.EnumName(PersonPoolStatusCode_name, int32(x))
}

func (PersonPoolStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type PersonPoolID int32

const (
	PersonPoolID_PoolIDInitCode PersonPoolID = 0
	PersonPoolID_FishCatch      PersonPoolID = 1001
)

var PersonPoolID_name = map[int32]string{
	0:    "PoolIDInitCode",
	1001: "FishCatch",
}

var PersonPoolID_value = map[string]int32{
	"PoolIDInitCode": 0,
	"FishCatch":      1001,
}

func (x PersonPoolID) String() string {
	return proto.EnumName(PersonPoolID_name, int32(x))
}

func (PersonPoolID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type PersonPoolErrCode int32

const (
	PersonPoolErrCode_ThingNotModify          PersonPoolErrCode = 0
	PersonPoolErrCode_GetPersonPoolConfigFail PersonPoolErrCode = 100200
	PersonPoolErrCode_PersonPoolLimit         PersonPoolErrCode = 100201
	PersonPoolErrCode_UserNotLottery          PersonPoolErrCode = 100202
	PersonPoolErrCode_NotFoundUserData        PersonPoolErrCode = 100203
	PersonPoolErrCode_UploadDataFail          PersonPoolErrCode = 100204
	PersonPoolErrCode_LockComplete            PersonPoolErrCode = 100205
)

var PersonPoolErrCode_name = map[int32]string{
	0:      "ThingNotModify",
	100200: "GetPersonPoolConfigFail",
	100201: "PersonPoolLimit",
	100202: "UserNotLottery",
	100203: "NotFoundUserData",
	100204: "UploadDataFail",
	100205: "LockComplete",
}

var PersonPoolErrCode_value = map[string]int32{
	"ThingNotModify":          0,
	"GetPersonPoolConfigFail": 100200,
	"PersonPoolLimit":         100201,
	"UserNotLottery":          100202,
	"NotFoundUserData":        100203,
	"UploadDataFail":          100204,
	"LockComplete":            100205,
}

func (x PersonPoolErrCode) String() string {
	return proto.EnumName(PersonPoolErrCode_name, int32(x))
}

func (PersonPoolErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

type RewardThingType int32

const (
	RewardThingType_ThingTypeInit RewardThingType = 0
	RewardThingType_Gold          RewardThingType = 1
	RewardThingType_Ticket        RewardThingType = 2
	RewardThingType_Missile       RewardThingType = 3
)

var RewardThingType_name = map[int32]string{
	0: "ThingTypeInit",
	1: "Gold",
	2: "Ticket",
	3: "Missile",
}

var RewardThingType_value = map[string]int32{
	"ThingTypeInit": 0,
	"Gold":          1,
	"Ticket":        2,
	"Missile":       3,
}

func (x RewardThingType) String() string {
	return proto.EnumName(RewardThingType_name, int32(x))
}

func (RewardThingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

type CommonReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PoolID               int64    `protobuf:"varint,2,opt,name=PoolID,proto3" json:"PoolID" form:"PoolID" validate:"required"`
	UserID               int64    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonReq) Reset()         { *m = CommonReq{} }
func (m *CommonReq) String() string { return proto.CompactTextString(m) }
func (*CommonReq) ProtoMessage()    {}
func (*CommonReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CommonReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonReq.Merge(m, src)
}
func (m *CommonReq) XXX_Size() int {
	return m.Size()
}
func (m *CommonReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonReq.DiscardUnknown(m)
}

var xxx_messageInfo_CommonReq proto.InternalMessageInfo

type ConfigInfoResp struct {
	PersonPollMaxNum     int64            `protobuf:"varint,1,opt,name=PersonPollMaxNum,proto3" json:"PersonPollMaxNum" form:"PersonPollMaxNum" `
	PersonPollKillRate   float32          `protobuf:"fixed32,2,opt,name=PersonPollKillRate,proto3" json:"PersonPollKillRate" form:"PersonPollKillRate" `
	MonsterList          []int64          `protobuf:"varint,3,rep,packed,name=MonsterList,proto3" json:"MonsterList" form:"MonsterList" `
	ClosePoolButton      bool             `protobuf:"varint,4,opt,name=ClosePoolButton,proto3" json:"ClosePoolButton" form:"ClosePoolButton" `
	LotteryList          []*LotteryDetail `protobuf:"bytes,5,rep,name=LotteryList,proto3" json:"LotteryList" form:"LotteryList" `
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ConfigInfoResp) Reset()         { *m = ConfigInfoResp{} }
func (m *ConfigInfoResp) String() string { return proto.CompactTextString(m) }
func (*ConfigInfoResp) ProtoMessage()    {}
func (*ConfigInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ConfigInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigInfoResp.Merge(m, src)
}
func (m *ConfigInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *ConfigInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigInfoResp proto.InternalMessageInfo

type LotteryDetail struct {
	LotteryName          string         `protobuf:"bytes,1,opt,name=LotteryName,proto3" json:"LotteryName" form:"LotteryName"`
	LotteryID            int32          `protobuf:"varint,2,opt,name=LotteryID,proto3" json:"LotteryID" form:"LotteryID"`
	TargetNum            int64          `protobuf:"varint,3,opt,name=TargetNum,proto3" json:"TargetNum" form:"TargetNum"`
	LotteryReward        []*ThingDetail `protobuf:"bytes,4,rep,name=LotteryReward,proto3" json:"LotteryReward" form:"LotteryReward"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LotteryDetail) Reset()         { *m = LotteryDetail{} }
func (m *LotteryDetail) String() string { return proto.CompactTextString(m) }
func (*LotteryDetail) ProtoMessage()    {}
func (*LotteryDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *LotteryDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryDetail.Merge(m, src)
}
func (m *LotteryDetail) XXX_Size() int {
	return m.Size()
}
func (m *LotteryDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryDetail.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryDetail proto.InternalMessageInfo

type ThingDetail struct {
	Name                 string          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name" form:"Name"`
	ID                   int64           `protobuf:"varint,2,opt,name=ID,proto3" json:"ID" form:"ID"`
	TypeID               RewardThingType `protobuf:"varint,3,opt,name=TypeID,proto3,enum=demo.service.v1.RewardThingType" json:"TypeID" form:"TypeID"`
	ImagePath            string          `protobuf:"bytes,4,opt,name=ImagePath,proto3" json:"ImagePath" form:"ImagePath"`
	Num                  int64           `protobuf:"varint,5,opt,name=Num,proto3" json:"Num" form:"Num"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ThingDetail) Reset()         { *m = ThingDetail{} }
func (m *ThingDetail) String() string { return proto.CompactTextString(m) }
func (*ThingDetail) ProtoMessage()    {}
func (*ThingDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ThingDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThingDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThingDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThingDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThingDetail.Merge(m, src)
}
func (m *ThingDetail) XXX_Size() int {
	return m.Size()
}
func (m *ThingDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ThingDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ThingDetail proto.InternalMessageInfo

type GetRewardReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PoolID               int64    `protobuf:"varint,2,opt,name=PoolID,proto3" json:"PoolID" form:"PoolID" validate:"required"`
	UserID               int64    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	LotteryType          int32    `protobuf:"varint,4,opt,name=LotteryType,proto3" json:"LotteryType" form:"LotteryType"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRewardReq) Reset()         { *m = GetRewardReq{} }
func (m *GetRewardReq) String() string { return proto.CompactTextString(m) }
func (*GetRewardReq) ProtoMessage()    {}
func (*GetRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GetRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRewardReq.Merge(m, src)
}
func (m *GetRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRewardReq proto.InternalMessageInfo

type GetRewardResp struct {
	LotteryReward        []*ThingDetail `protobuf:"bytes,1,rep,name=LotteryReward,proto3" json:"LotteryReward" form:"LotteryReward"`
	NowPoolScore         int64          `protobuf:"varint,2,opt,name=NowPoolScore,proto3" json:"NowPoolScore" form:"NowPoolScore"`
	GoodList             []*ThingDetail `protobuf:"bytes,3,rep,name=GoodList,proto3" json:"GoodList" form:"GoodList"`
	RewardID             string         `protobuf:"bytes,4,opt,name=RewardID,proto3" json:"RewardID" form:"RewardID"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetRewardResp) Reset()         { *m = GetRewardResp{} }
func (m *GetRewardResp) String() string { return proto.CompactTextString(m) }
func (*GetRewardResp) ProtoMessage()    {}
func (*GetRewardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetRewardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRewardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRewardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRewardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRewardResp.Merge(m, src)
}
func (m *GetRewardResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRewardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRewardResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRewardResp proto.InternalMessageInfo

type PoolInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PoolID               int64    `protobuf:"varint,2,opt,name=PoolID,proto3" json:"PoolID" form:"PoolID" validate:"required"`
	UserID               int64    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolInfoReq) Reset()         { *m = PoolInfoReq{} }
func (m *PoolInfoReq) String() string { return proto.CompactTextString(m) }
func (*PoolInfoReq) ProtoMessage()    {}
func (*PoolInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *PoolInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfoReq.Merge(m, src)
}
func (m *PoolInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfoReq proto.InternalMessageInfo

type PoolInfoResp struct {
	NowPoolNum           int64    `protobuf:"varint,1,opt,name=NowPoolNum,proto3" json:"NowPoolNum" form:"NowPoolNum"`
	PoolButton           bool     `protobuf:"varint,2,opt,name=PoolButton,proto3" json:"PoolButton" form:"PoolButton"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolInfoResp) Reset()         { *m = PoolInfoResp{} }
func (m *PoolInfoResp) String() string { return proto.CompactTextString(m) }
func (*PoolInfoResp) ProtoMessage()    {}
func (*PoolInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *PoolInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfoResp.Merge(m, src)
}
func (m *PoolInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfoResp proto.InternalMessageInfo

type UploadPoolReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	PoolID               int64    `protobuf:"varint,2,opt,name=PoolID,proto3" json:"PoolID" form:"PoolID" validate:"required"`
	UserID               int64    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	PoolButton           bool     `protobuf:"varint,4,opt,name=PoolButton,proto3" json:"PoolButton" form:"PoolButton"`
	PoolScore            uint64   `protobuf:"varint,5,opt,name=PoolScore,proto3" json:"PoolScore" form:"PoolScore" `
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadPoolReq) Reset()         { *m = UploadPoolReq{} }
func (m *UploadPoolReq) String() string { return proto.CompactTextString(m) }
func (*UploadPoolReq) ProtoMessage()    {}
func (*UploadPoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *UploadPoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadPoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadPoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadPoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPoolReq.Merge(m, src)
}
func (m *UploadPoolReq) XXX_Size() int {
	return m.Size()
}
func (m *UploadPoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPoolReq proto.InternalMessageInfo

type UploadPoolResp struct {
	IsUpload             bool     `protobuf:"varint,1,opt,name=IsUpload,proto3" json:"IsUpload" form:"IsUpload" `
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadPoolResp) Reset()         { *m = UploadPoolResp{} }
func (m *UploadPoolResp) String() string { return proto.CompactTextString(m) }
func (*UploadPoolResp) ProtoMessage()    {}
func (*UploadPoolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *UploadPoolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadPoolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadPoolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadPoolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPoolResp.Merge(m, src)
}
func (m *UploadPoolResp) XXX_Size() int {
	return m.Size()
}
func (m *UploadPoolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPoolResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPoolResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("demo.service.v1.PersonPoolStatusCode", PersonPoolStatusCode_name, PersonPoolStatusCode_value)
	proto.RegisterEnum("demo.service.v1.PersonPoolID", PersonPoolID_name, PersonPoolID_value)
	proto.RegisterEnum("demo.service.v1.PersonPoolErrCode", PersonPoolErrCode_name, PersonPoolErrCode_value)
	proto.RegisterEnum("demo.service.v1.RewardThingType", RewardThingType_name, RewardThingType_value)
	proto.RegisterType((*CommonReq)(nil), "demo.service.v1.CommonReq")
	proto.RegisterType((*ConfigInfoResp)(nil), "demo.service.v1.ConfigInfoResp")
	proto.RegisterType((*LotteryDetail)(nil), "demo.service.v1.LotteryDetail")
	proto.RegisterType((*ThingDetail)(nil), "demo.service.v1.ThingDetail")
	proto.RegisterType((*GetRewardReq)(nil), "demo.service.v1.GetRewardReq")
	proto.RegisterType((*GetRewardResp)(nil), "demo.service.v1.GetRewardResp")
	proto.RegisterType((*PoolInfoReq)(nil), "demo.service.v1.PoolInfoReq")
	proto.RegisterType((*PoolInfoResp)(nil), "demo.service.v1.PoolInfoResp")
	proto.RegisterType((*UploadPoolReq)(nil), "demo.service.v1.UploadPoolReq")
	proto.RegisterType((*UploadPoolResp)(nil), "demo.service.v1.UploadPoolResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0x8e, 0x3f, 0xe2, 0xc6, 0x27, 0x5f, 0x9b, 0xe9, 0x97, 0xeb, 0x24, 0x5e, 0x77, 0xfa, 0xbe,
	0x34, 0x04, 0x61, 0x43, 0x40, 0x5c, 0x14, 0x24, 0x90, 0xed, 0xd6, 0x58, 0x4d, 0xa2, 0xb0, 0x4d,
	0x25, 0x40, 0xdc, 0x6c, 0xe3, 0x89, 0xb3, 0x74, 0xed, 0xd9, 0xee, 0x8e, 0x53, 0x72, 0xcb, 0x0f,
	0xc8, 0x0d, 0x37, 0xbd, 0xe4, 0x37, 0x20, 0xf1, 0x1f, 0xca, 0x1d, 0x12, 0xf7, 0x2b, 0x48, 0x11,
	0x6a, 0x17, 0xb8, 0xc0, 0x7f, 0x00, 0x34, 0x33, 0xeb, 0x9d, 0xd9, 0x38, 0x2d, 0x12, 0x82, 0x9b,
	0xde, 0xf9, 0x3c, 0xe7, 0xcc, 0x73, 0xce, 0x79, 0x66, 0xce, 0x8c, 0x17, 0x8a, 0xb6, 0xe7, 0xd4,
	0x3c, 0x9f, 0x32, 0x8a, 0x16, 0xbb, 0xa4, 0x4f, 0x6b, 0x01, 0xf1, 0x0f, 0x9d, 0x3d, 0x52, 0x3b,
	0x7c, 0xb3, 0xfc, 0x7a, 0xcf, 0x61, 0x07, 0xc3, 0x7b, 0xb5, 0x3d, 0xda, 0xaf, 0xf7, 0x68, 0x8f,
	0xd6, 0x45, 0xdc, 0xbd, 0xe1, 0xbe, 0xb0, 0x84, 0x21, 0x7e, 0xc9, 0xf5, 0xe5, 0xe5, 0x1e, 0xa5,
	0x3d, 0x97, 0xa8, 0x28, 0xd2, 0xf7, 0xd8, 0x51, 0xec, 0x5c, 0x89, 0x9d, 0xb6, 0xe7, 0xd4, 0xed,
	0xc1, 0x80, 0x32, 0x9b, 0x39, 0x74, 0x10, 0x48, 0x2f, 0xfe, 0x25, 0x03, 0xc5, 0x26, 0xed, 0xf7,
	0xe9, 0xc0, 0x22, 0x0f, 0x50, 0x1b, 0x0a, 0x6d, 0xbb, 0x4f, 0x3a, 0xad, 0x52, 0xa6, 0x9a, 0x59,
	0x9b, 0x6e, 0xd4, 0xa3, 0xd0, 0x8c, 0x91, 0x51, 0x68, 0x5e, 0xdd, 0xa7, 0x7e, 0xff, 0x06, 0x96,
	0x36, 0xae, 0x1e, 0xda, 0xae, 0xd3, 0xb5, 0x19, 0xb9, 0x81, 0x7d, 0xf2, 0x60, 0xe8, 0xf8, 0xa4,
	0x8b, 0xad, 0x38, 0x98, 0x13, 0xed, 0x50, 0xea, 0x76, 0x5a, 0xa5, 0x6c, 0x35, 0xb3, 0x96, 0x93,
	0x44, 0x12, 0x51, 0x44, 0xd2, 0x7e, 0x0e, 0x91, 0x74, 0x72, 0xa2, 0xbb, 0x01, 0xf1, 0x3b, 0xad,
	0x52, 0x4e, 0x11, 0x49, 0x44, 0x11, 0x49, 0xfb, 0x39, 0x44, 0xb1, 0xf3, 0x24, 0x07, 0x0b, 0x4d,
	0x3a, 0xd8, 0x77, 0x7a, 0x9d, 0xc1, 0x3e, 0xb5, 0x48, 0xe0, 0xa1, 0xcf, 0xc0, 0xd8, 0x21, 0x7e,
	0x40, 0x07, 0x3b, 0xd4, 0x75, 0xb7, 0xec, 0x2f, 0xb6, 0x87, 0x7d, 0xd1, 0x77, 0xae, 0xf1, 0x46,
	0x14, 0x9a, 0x13, 0xbe, 0x51, 0x68, 0x96, 0xe2, 0xc2, 0x4f, 0x79, 0x70, 0xd5, 0x9a, 0x88, 0x46,
	0x5d, 0x40, 0x0a, 0xbb, 0xed, 0xb8, 0xae, 0x65, 0x33, 0x22, 0xe4, 0xc8, 0x36, 0xde, 0x8e, 0x42,
	0xf3, 0x0c, 0xef, 0x28, 0x34, 0xcb, 0xa7, 0x33, 0x8c, 0x7d, 0xb8, 0x6a, 0x9d, 0xb1, 0x02, 0x7d,
	0x08, 0xb3, 0x5b, 0x74, 0x10, 0x30, 0xe2, 0x6f, 0x3a, 0x01, 0x2b, 0xe5, 0xaa, 0xb9, 0xb5, 0x5c,
	0xe3, 0x95, 0x28, 0x34, 0x75, 0x78, 0x14, 0x9a, 0xe7, 0x25, 0xaf, 0x06, 0xe2, 0xaa, 0xa5, 0xc7,
	0xa0, 0x8f, 0x61, 0xb1, 0xe9, 0xd2, 0x80, 0x70, 0xe1, 0x1b, 0x43, 0xc6, 0xe8, 0xa0, 0x94, 0xaf,
	0x66, 0xd6, 0x66, 0x1a, 0xb5, 0x28, 0x34, 0x4f, 0xbb, 0x46, 0xa1, 0x79, 0x59, 0x32, 0x9e, 0x72,
	0xe0, 0xaa, 0x75, 0x3a, 0x16, 0x1d, 0xc0, 0xec, 0x26, 0x65, 0x8c, 0xf8, 0x47, 0xa2, 0xc6, 0xe9,
	0x6a, 0x6e, 0x6d, 0x76, 0xa3, 0x52, 0x3b, 0x75, 0xe8, 0x6b, 0x71, 0x4c, 0x8b, 0x30, 0xdb, 0x71,
	0x65, 0x0f, 0xda, 0x32, 0xd5, 0x83, 0x06, 0xf2, 0x1e, 0x74, 0xf3, 0xbb, 0x2c, 0xcc, 0xa7, 0x68,
	0x50, 0x3b, 0xc9, 0xbd, 0x6d, 0xf7, 0x89, 0xd8, 0xde, 0x62, 0xe3, 0xff, 0x1a, 0x37, 0x87, 0x47,
	0xa1, 0x89, 0x52, 0xdc, 0x1c, 0xc4, 0x96, 0x1e, 0x82, 0xde, 0x87, 0x62, 0x6c, 0xc6, 0x87, 0x7a,
	0xba, 0x71, 0x35, 0x0a, 0x4d, 0x05, 0x8e, 0x42, 0xd3, 0x48, 0x91, 0x74, 0x5a, 0xd8, 0x52, 0x6e,
	0x4e, 0xb0, 0x6b, 0xfb, 0x3d, 0xc2, 0xf8, 0x31, 0x93, 0x87, 0x59, 0x10, 0x24, 0xa0, 0x22, 0x48,
	0x20, 0x6c, 0x29, 0x37, 0xea, 0x27, 0xbd, 0x59, 0xe4, 0xa1, 0xed, 0x77, 0x4b, 0x79, 0x21, 0xe4,
	0xca, 0x84, 0x90, 0xbb, 0x07, 0xce, 0xa0, 0x17, 0xcb, 0xf8, 0x6a, 0x14, 0x9a, 0xe9, 0x65, 0xa3,
	0xd0, 0xbc, 0x90, 0xaa, 0x53, 0xc2, 0xd8, 0x4a, 0x87, 0xe1, 0xaf, 0xb3, 0x30, 0xab, 0x31, 0xa1,
	0xd7, 0x20, 0xaf, 0x49, 0x78, 0x39, 0x0a, 0xcd, 0x7c, 0xac, 0xdd, 0xac, 0xa4, 0x93, 0xa2, 0x09,
	0x10, 0x5d, 0x83, 0x6c, 0x32, 0xfb, 0xe7, 0xa3, 0xd0, 0xcc, 0x0a, 0x7d, 0x8a, 0x32, 0x90, 0x0b,
	0x93, 0xed, 0xb4, 0xd0, 0x5d, 0x28, 0xec, 0x1e, 0x79, 0x24, 0x9e, 0xed, 0x85, 0x8d, 0xea, 0x44,
	0x27, 0xb2, 0x14, 0x51, 0x05, 0x8f, 0x6c, 0x2c, 0xf3, 0xe9, 0x97, 0x6b, 0x46, 0xa1, 0x39, 0x1f,
	0xab, 0x25, 0x6c, 0x6c, 0xc5, 0x0e, 0x2e, 0x74, 0xa7, 0x6f, 0xf7, 0xc8, 0x8e, 0xcd, 0x0e, 0xc4,
	0x11, 0x2e, 0x4a, 0xa1, 0x13, 0x50, 0x09, 0x9d, 0x40, 0xd8, 0x52, 0x6e, 0x74, 0x1d, 0x72, 0x7c,
	0x8f, 0xa6, 0x45, 0xf5, 0x17, 0xa3, 0xd0, 0xcc, 0xc9, 0xdd, 0x81, 0xb8, 0x4f, 0xbe, 0x2f, 0x1c,
	0xc2, 0xdf, 0x64, 0x61, 0xae, 0x4d, 0x98, 0xac, 0xf2, 0xe5, 0xbe, 0x3f, 0xb5, 0x41, 0xe2, 0x32,
	0x0b, 0x5d, 0xa7, 0x53, 0x83, 0xc4, 0xe1, 0x89, 0x41, 0xe2, 0xa0, 0x1a, 0x24, 0x61, 0x3d, 0xc9,
	0xc2, 0xbc, 0x26, 0x5a, 0xe0, 0x4d, 0x1e, 0xec, 0xcc, 0x7f, 0x79, 0xb0, 0xd1, 0x6d, 0x98, 0xdb,
	0xa6, 0x0f, 0xb9, 0x3e, 0x77, 0xf6, 0xa8, 0x4f, 0x62, 0x85, 0xaf, 0x47, 0xa1, 0x99, 0xc2, 0xd5,
	0x85, 0xa3, 0xa3, 0xd8, 0x4a, 0x05, 0xa1, 0x4f, 0x60, 0xa6, 0x4d, 0x69, 0x37, 0xb9, 0x7c, 0xff,
	0xae, 0x6c, 0x33, 0x0a, 0xcd, 0x64, 0xc5, 0x28, 0x34, 0x17, 0xe3, 0x33, 0x11, 0x23, 0xd8, 0x4a,
	0x9c, 0xe8, 0x5d, 0x98, 0x91, 0x15, 0x77, 0x5a, 0xf1, 0x31, 0x16, 0x8b, 0xc7, 0x98, 0x5a, 0x3c,
	0x46, 0xb0, 0x95, 0x38, 0xf1, 0xd3, 0x0c, 0xcc, 0x8a, 0x23, 0x20, 0x1e, 0xbb, 0x97, 0xfa, 0x65,
	0x7f, 0x94, 0x81, 0x39, 0xd5, 0x6a, 0xe0, 0xa1, 0x26, 0x40, 0xbc, 0x47, 0xea, 0x45, 0xbf, 0x16,
	0x85, 0xa6, 0x86, 0x8e, 0x42, 0x73, 0x29, 0xb5, 0xb9, 0x62, 0xa8, 0xb5, 0x00, 0x4e, 0xa2, 0xbd,
	0x84, 0x59, 0xf1, 0x12, 0x0a, 0x92, 0xd4, 0x23, 0xb8, 0xa4, 0xfa, 0x8d, 0xdf, 0x3f, 0x4b, 0x0b,
	0xc0, 0x7f, 0x64, 0x61, 0xfe, 0xae, 0xe7, 0x52, 0xbb, 0xcb, 0xc1, 0x97, 0xfc, 0x86, 0x48, 0x2b,
	0x96, 0xff, 0x47, 0x8a, 0xa1, 0x0f, 0xa0, 0xa8, 0x26, 0x93, 0xdf, 0xc0, 0xf9, 0x06, 0xe6, 0x97,
	0xb7, 0x3e, 0x96, 0x1a, 0x85, 0x9c, 0xc9, 0xaa, 0xa5, 0xfc, 0x78, 0x1b, 0x16, 0x74, 0xc9, 0x03,
	0x0f, 0xbd, 0x07, 0x33, 0x9d, 0x40, 0x62, 0x42, 0xf5, 0x99, 0x46, 0x95, 0x0f, 0xd2, 0x18, 0xd3,
	0x9e, 0x83, 0x18, 0xc1, 0x55, 0x2b, 0xf1, 0xae, 0xf7, 0xe0, 0xc2, 0xf8, 0x7f, 0x17, 0x75, 0xef,
	0x30, 0x9b, 0x0d, 0x83, 0x26, 0xed, 0x12, 0x34, 0x07, 0x33, 0x9d, 0x81, 0xc3, 0xf8, 0x6f, 0x63,
	0x0a, 0x2d, 0x00, 0x34, 0xed, 0x41, 0x7c, 0xd1, 0x18, 0x19, 0x6e, 0x6f, 0x53, 0x36, 0xb6, 0xb3,
	0x08, 0xc1, 0xc2, 0x1d, 0x46, 0x3d, 0x55, 0x99, 0x91, 0x43, 0xf3, 0x50, 0xdc, 0x74, 0xfa, 0x0e,
	0x13, 0x66, 0x7e, 0x7d, 0x03, 0xe6, 0x54, 0xa2, 0x4e, 0x8b, 0x2f, 0x91, 0xbf, 0x52, 0x69, 0x8a,
	0xb7, 0x9c, 0xe0, 0xa0, 0x69, 0xb3, 0xbd, 0x03, 0xe3, 0xd9, 0xb9, 0xf5, 0x6f, 0x33, 0xb0, 0xa4,
	0x16, 0xdd, 0xf4, 0x7d, 0x51, 0x1a, 0x82, 0x05, 0x71, 0xe7, 0x6c, 0x53, 0xb6, 0x45, 0xbb, 0xce,
	0xfe, 0x91, 0x31, 0x85, 0x56, 0xe1, 0x72, 0x9b, 0x30, 0x15, 0x2b, 0xff, 0x0b, 0xdf, 0xb2, 0x1d,
	0xd7, 0x78, 0x7a, 0x5c, 0x40, 0x17, 0x61, 0x51, 0xf9, 0x44, 0x55, 0xc6, 0xb3, 0xe3, 0x02, 0xba,
	0x00, 0x0b, 0x7c, 0x77, 0xb5, 0x56, 0xa2, 0xe3, 0x02, 0xba, 0x04, 0xc6, 0x36, 0x65, 0xb7, 0xe8,
	0x70, 0xd0, 0xe5, 0xde, 0x96, 0xcd, 0x6c, 0xe3, 0xd7, 0x38, 0x5a, 0x34, 0xc8, 0x11, 0x41, 0xfd,
	0xdb, 0x71, 0x01, 0x21, 0x98, 0xdb, 0xa4, 0x7b, 0xf7, 0x9b, 0xb4, 0xef, 0xb9, 0x84, 0x11, 0xe3,
	0xf7, 0xe3, 0xc2, 0x7a, 0x1b, 0x16, 0x4f, 0xbd, 0xed, 0x68, 0x09, 0xe6, 0x13, 0x83, 0x77, 0x6c,
	0x4c, 0xa1, 0x19, 0xc8, 0xb7, 0xa9, 0xdb, 0x35, 0x32, 0x08, 0xa0, 0xb0, 0xeb, 0xec, 0xdd, 0x27,
	0xcc, 0xc8, 0xa2, 0x59, 0x38, 0xb7, 0xe5, 0x04, 0x81, 0xe3, 0x12, 0x23, 0xb7, 0xf1, 0x67, 0x1e,
	0x40, 0x15, 0x8e, 0xde, 0x81, 0xfc, 0x8e, 0x33, 0xe8, 0xa1, 0x4b, 0x35, 0xf9, 0xd5, 0x53, 0x1b,
	0x7f, 0x12, 0xd5, 0x6e, 0xf2, 0x4f, 0xa2, 0xf2, 0x73, 0x70, 0x44, 0x01, 0xd4, 0xc7, 0x01, 0x2a,
	0x4f, 0x5c, 0xe1, 0xc9, 0x27, 0x52, 0xd9, 0x3c, 0xc3, 0xa7, 0x7f, 0x55, 0xe0, 0xff, 0x7d, 0xf9,
	0xc3, 0xcf, 0x5f, 0x65, 0x2b, 0x78, 0xa5, 0xae, 0xea, 0xaa, 0x7f, 0x34, 0x24, 0xfe, 0x51, 0x5d,
	0x4b, 0xf1, 0x39, 0x14, 0x93, 0x47, 0x10, 0xad, 0x4e, 0x70, 0xea, 0xff, 0x2a, 0xca, 0x95, 0x17,
	0xb9, 0x03, 0x0f, 0x57, 0x44, 0xc6, 0x12, 0xbe, 0xa4, 0x67, 0x6c, 0x13, 0x56, 0x8f, 0xe9, 0x3d,
	0x98, 0x17, 0xf9, 0xc7, 0x97, 0x24, 0x9a, 0x7c, 0xa2, 0xb4, 0xa7, 0xa2, 0xbc, 0xfa, 0x02, 0x6f,
	0xe0, 0x61, 0x2c, 0xb2, 0xad, 0xe0, 0xf2, 0x64, 0x7f, 0x49, 0x82, 0x43, 0x7d, 0x06, 0x05, 0x32,
	0xd9, 0x43, 0xea, 0x5e, 0x3c, 0x43, 0xd6, 0xf4, 0x10, 0xe3, 0x6b, 0x22, 0xed, 0x2a, 0x5e, 0xd6,
	0xd3, 0xca, 0x18, 0x95, 0xd7, 0x87, 0xb9, 0x9b, 0x5d, 0x39, 0x50, 0xff, 0x4e, 0xd6, 0xab, 0x22,
	0xeb, 0x32, 0xbe, 0xa2, 0x67, 0xe5, 0x29, 0x92, 0x9c, 0x8d, 0x2b, 0x8f, 0x7f, 0xaa, 0x4c, 0x3d,
	0x3e, 0xa9, 0x64, 0xbe, 0x3f, 0xa9, 0x64, 0x7e, 0x3c, 0xa9, 0x64, 0x1e, 0x3d, 0xa9, 0x4c, 0x7d,
	0x9a, 0xb3, 0x3d, 0xe7, 0x5e, 0x41, 0x9c, 0xb2, 0xb7, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x1f,
	0x6d, 0x09, 0xe7, 0xeb, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PersonPoolClient is the client API for PersonPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersonPoolClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// 3、奖金怪物查询
	ConfigInfo(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*ConfigInfoResp, error)
	// 5、玩家抽奖奖励获取
	GetReward(ctx context.Context, in *GetRewardReq, opts ...grpc.CallOption) (*GetRewardResp, error)
	// 7、查询数据
	QueryPoolInfo(ctx context.Context, in *PoolInfoReq, opts ...grpc.CallOption) (*PoolInfoResp, error)
	// 6、更新将池状态和分数
	UploadPoolInfo(ctx context.Context, in *UploadPoolReq, opts ...grpc.CallOption) (*UploadPoolResp, error)
	// 7、更新将池状态和分数(重构版本使用)
	EditPoolInfo(ctx context.Context, in *UploadPoolReq, opts ...grpc.CallOption) (*UploadPoolResp, error)
}

type personPoolClient struct {
	cc *grpc.ClientConn
}

func NewPersonPoolClient(cc *grpc.ClientConn) PersonPoolClient {
	return &personPoolClient{cc}
}

func (c *personPoolClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.PersonPool/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personPoolClient) ConfigInfo(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*ConfigInfoResp, error) {
	out := new(ConfigInfoResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.PersonPool/ConfigInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personPoolClient) GetReward(ctx context.Context, in *GetRewardReq, opts ...grpc.CallOption) (*GetRewardResp, error) {
	out := new(GetRewardResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.PersonPool/GetReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personPoolClient) QueryPoolInfo(ctx context.Context, in *PoolInfoReq, opts ...grpc.CallOption) (*PoolInfoResp, error) {
	out := new(PoolInfoResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.PersonPool/QueryPoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personPoolClient) UploadPoolInfo(ctx context.Context, in *UploadPoolReq, opts ...grpc.CallOption) (*UploadPoolResp, error) {
	out := new(UploadPoolResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.PersonPool/UploadPoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personPoolClient) EditPoolInfo(ctx context.Context, in *UploadPoolReq, opts ...grpc.CallOption) (*UploadPoolResp, error) {
	out := new(UploadPoolResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.PersonPool/EditPoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonPoolServer is the server API for PersonPool service.
type PersonPoolServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// 3、奖金怪物查询
	ConfigInfo(context.Context, *CommonReq) (*ConfigInfoResp, error)
	// 5、玩家抽奖奖励获取
	GetReward(context.Context, *GetRewardReq) (*GetRewardResp, error)
	// 7、查询数据
	QueryPoolInfo(context.Context, *PoolInfoReq) (*PoolInfoResp, error)
	// 6、更新将池状态和分数
	UploadPoolInfo(context.Context, *UploadPoolReq) (*UploadPoolResp, error)
	// 7、更新将池状态和分数(重构版本使用)
	EditPoolInfo(context.Context, *UploadPoolReq) (*UploadPoolResp, error)
}

// UnimplementedPersonPoolServer can be embedded to have forward compatible implementations.
type UnimplementedPersonPoolServer struct {
}

func (*UnimplementedPersonPoolServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPersonPoolServer) ConfigInfo(ctx context.Context, req *CommonReq) (*ConfigInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigInfo not implemented")
}
func (*UnimplementedPersonPoolServer) GetReward(ctx context.Context, req *GetRewardReq) (*GetRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReward not implemented")
}
func (*UnimplementedPersonPoolServer) QueryPoolInfo(ctx context.Context, req *PoolInfoReq) (*PoolInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolInfo not implemented")
}
func (*UnimplementedPersonPoolServer) UploadPoolInfo(ctx context.Context, req *UploadPoolReq) (*UploadPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPoolInfo not implemented")
}
func (*UnimplementedPersonPoolServer) EditPoolInfo(ctx context.Context, req *UploadPoolReq) (*UploadPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPoolInfo not implemented")
}

func RegisterPersonPoolServer(s *grpc.Server, srv PersonPoolServer) {
	s.RegisterService(&_PersonPool_serviceDesc, srv)
}

func _PersonPool_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonPoolServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.PersonPool/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonPoolServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonPool_ConfigInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonPoolServer).ConfigInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.PersonPool/ConfigInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonPoolServer).ConfigInfo(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonPool_GetReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonPoolServer).GetReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.PersonPool/GetReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonPoolServer).GetReward(ctx, req.(*GetRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonPool_QueryPoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonPoolServer).QueryPoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.PersonPool/QueryPoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonPoolServer).QueryPoolInfo(ctx, req.(*PoolInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonPool_UploadPoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonPoolServer).UploadPoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.PersonPool/UploadPoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonPoolServer).UploadPoolInfo(ctx, req.(*UploadPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonPool_EditPoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonPoolServer).EditPoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.PersonPool/EditPoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonPoolServer).EditPoolInfo(ctx, req.(*UploadPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersonPool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.service.v1.PersonPool",
	HandlerType: (*PersonPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PersonPool_Ping_Handler,
		},
		{
			MethodName: "ConfigInfo",
			Handler:    _PersonPool_ConfigInfo_Handler,
		},
		{
			MethodName: "GetReward",
			Handler:    _PersonPool_GetReward_Handler,
		},
		{
			MethodName: "QueryPoolInfo",
			Handler:    _PersonPool_QueryPoolInfo_Handler,
		},
		{
			MethodName: "UploadPoolInfo",
			Handler:    _PersonPool_UploadPoolInfo_Handler,
		},
		{
			MethodName: "EditPoolInfo",
			Handler:    _PersonPool_EditPoolInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CommonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LotteryList) > 0 {
		for iNdEx := len(m.LotteryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LotteryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ClosePoolButton {
		i--
		if m.ClosePoolButton {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.MonsterList) > 0 {
		dAtA2 := make([]byte, len(m.MonsterList)*10)
		var j1 int
		for _, num1 := range m.MonsterList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.PersonPollKillRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PersonPollKillRate))))
		i--
		dAtA[i] = 0x15
	}
	if m.PersonPollMaxNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PersonPollMaxNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LotteryDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LotteryReward) > 0 {
		for iNdEx := len(m.LotteryReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LotteryReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TargetNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TargetNum))
		i--
		dAtA[i] = 0x18
	}
	if m.LotteryID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LotteryID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LotteryName) > 0 {
		i -= len(m.LotteryName)
		copy(dAtA[i:], m.LotteryName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LotteryName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThingDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThingDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThingDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ImagePath) > 0 {
		i -= len(m.ImagePath)
		copy(dAtA[i:], m.ImagePath)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImagePath)))
		i--
		dAtA[i] = 0x22
	}
	if m.TypeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRewardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRewardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LotteryType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LotteryType))
		i--
		dAtA[i] = 0x20
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRewardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRewardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRewardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RewardID) > 0 {
		i -= len(m.RewardID)
		copy(dAtA[i:], m.RewardID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RewardID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GoodList) > 0 {
		for iNdEx := len(m.GoodList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NowPoolScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NowPoolScore))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LotteryReward) > 0 {
		for iNdEx := len(m.LotteryReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LotteryReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoolInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PoolButton {
		i--
		if m.PoolButton {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.NowPoolNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NowPoolNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadPoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadPoolReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadPoolReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PoolScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoolScore))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolButton {
		i--
		if m.PoolButton {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadPoolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadPoolResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadPoolResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsUpload {
		i--
		if m.IsUpload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PoolID != 0 {
		n += 1 + sovApi(uint64(m.PoolID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PersonPollMaxNum != 0 {
		n += 1 + sovApi(uint64(m.PersonPollMaxNum))
	}
	if m.PersonPollKillRate != 0 {
		n += 5
	}
	if len(m.MonsterList) > 0 {
		l = 0
		for _, e := range m.MonsterList {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.ClosePoolButton {
		n += 2
	}
	if len(m.LotteryList) > 0 {
		for _, e := range m.LotteryList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LotteryName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LotteryID != 0 {
		n += 1 + sovApi(uint64(m.LotteryID))
	}
	if m.TargetNum != 0 {
		n += 1 + sovApi(uint64(m.TargetNum))
	}
	if len(m.LotteryReward) > 0 {
		for _, e := range m.LotteryReward {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThingDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.TypeID != 0 {
		n += 1 + sovApi(uint64(m.TypeID))
	}
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PoolID != 0 {
		n += 1 + sovApi(uint64(m.PoolID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.LotteryType != 0 {
		n += 1 + sovApi(uint64(m.LotteryType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRewardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LotteryReward) > 0 {
		for _, e := range m.LotteryReward {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.NowPoolScore != 0 {
		n += 1 + sovApi(uint64(m.NowPoolScore))
	}
	if len(m.GoodList) > 0 {
		for _, e := range m.GoodList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.RewardID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PoolInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PoolID != 0 {
		n += 1 + sovApi(uint64(m.PoolID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PoolInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NowPoolNum != 0 {
		n += 1 + sovApi(uint64(m.NowPoolNum))
	}
	if m.PoolButton {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadPoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PoolID != 0 {
		n += 1 + sovApi(uint64(m.PoolID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.PoolButton {
		n += 2
	}
	if m.PoolScore != 0 {
		n += 1 + sovApi(uint64(m.PoolScore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadPoolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsUpload {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonPollMaxNum", wireType)
			}
			m.PersonPollMaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PersonPollMaxNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonPollKillRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PersonPollKillRate = float32(math.Float32frombits(v))
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MonsterList = append(m.MonsterList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MonsterList) == 0 {
					m.MonsterList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MonsterList = append(m.MonsterList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterList", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosePoolButton", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClosePoolButton = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryList = append(m.LotteryList, &LotteryDetail{})
			if err := m.LotteryList[len(m.LotteryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryID", wireType)
			}
			m.LotteryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNum", wireType)
			}
			m.TargetNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryReward = append(m.LotteryReward, &ThingDetail{})
			if err := m.LotteryReward[len(m.LotteryReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThingDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThingDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThingDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= RewardThingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryType", wireType)
			}
			m.LotteryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRewardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRewardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRewardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryReward = append(m.LotteryReward, &ThingDetail{})
			if err := m.LotteryReward[len(m.LotteryReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowPoolScore", wireType)
			}
			m.NowPoolScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowPoolScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodList = append(m.GoodList, &ThingDetail{})
			if err := m.GoodList[len(m.GoodList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowPoolNum", wireType)
			}
			m.NowPoolNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowPoolNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolButton", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolButton = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadPoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadPoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadPoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolButton", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolButton = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolScore", wireType)
			}
			m.PoolScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolScore |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadPoolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadPoolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadPoolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUpload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUpload = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
