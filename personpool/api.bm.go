// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathPersonPoolPing = "/demo.service.v1.PersonPool/Ping"
var PathPersonPoolConfigInfo = "/PersonPool/Query/ConfigInfo"
var PathPersonPoolGetReward = "/PersonPool/Get/Reward"
var PathPersonPoolQueryPoolInfo = "/PersonPool/Query/PoolInfo"
var PathPersonPoolUploadPoolInfo = "/PersonPool/Upload/PoolInfo"
var PathPersonPoolEditPoolInfo = "/PersonPool/Edit/PoolInfo"

// PersonPoolBMServer is the server API for PersonPool service.
type PersonPoolBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 3、奖金怪物查询
	ConfigInfo(ctx context.Context, req *CommonReq) (resp *ConfigInfoResp, err error)

	// 5、玩家抽奖奖励获取
	GetReward(ctx context.Context, req *GetRewardReq) (resp *GetRewardResp, err error)

	// 7、查询数据
	QueryPoolInfo(ctx context.Context, req *PoolInfoReq) (resp *PoolInfoResp, err error)

	// 6、更新将池状态和分数
	UploadPoolInfo(ctx context.Context, req *UploadPoolReq) (resp *UploadPoolResp, err error)

	// 7、更新将池状态和分数(重构版本使用)
	EditPoolInfo(ctx context.Context, req *UploadPoolReq) (resp *UploadPoolResp, err error)
}

var PersonPoolSvc PersonPoolBMServer

func personPoolPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PersonPoolSvc.Ping(c, p)
	c.JSON(resp, err)
}

func personPoolConfigInfo(c *bm.Context) {
	p := new(CommonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PersonPoolSvc.ConfigInfo(c, p)
	c.JSON(resp, err)
}

func personPoolGetReward(c *bm.Context) {
	p := new(GetRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PersonPoolSvc.GetReward(c, p)
	c.JSON(resp, err)
}

func personPoolQueryPoolInfo(c *bm.Context) {
	p := new(PoolInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PersonPoolSvc.QueryPoolInfo(c, p)
	c.JSON(resp, err)
}

func personPoolUploadPoolInfo(c *bm.Context) {
	p := new(UploadPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PersonPoolSvc.UploadPoolInfo(c, p)
	c.JSON(resp, err)
}

func personPoolEditPoolInfo(c *bm.Context) {
	p := new(UploadPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PersonPoolSvc.EditPoolInfo(c, p)
	c.JSON(resp, err)
}

// RegisterPersonPoolBMServer Register the blademaster route
func RegisterPersonPoolBMServer(e *bm.Engine, server PersonPoolBMServer) {
	PersonPoolSvc = server
	e.GET("/demo.service.v1.PersonPool/Ping", personPoolPing)
	e.POST("/PersonPool/Query/ConfigInfo", personPoolConfigInfo)
	e.POST("/PersonPool/Get/Reward", personPoolGetReward)
	e.POST("/PersonPool/Query/PoolInfo", personPoolQueryPoolInfo)
	e.POST("/PersonPool/Upload/PoolInfo", personPoolUploadPoolInfo)
	e.POST("/PersonPool/Edit/PoolInfo", personPoolEditPoolInfo)
}
