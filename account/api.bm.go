// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAccountGetLoginLimit = "/account/get_login_limit"
var PathAccountLoginLimit = "/account/login_limit"
var PathAccountIsOldUser = "/account/is_old_user"
var PathAccountOnGetPlayerShowData = "/account/OnGetPlayerShowData"
var PathAccountOnEditPlayerShowData = "/account/OnEditPlayerShowData"
var PathAccountOnModifyPassword = "/account/OnModifyPassword"

// AccountBMServer is the server API for Account service.
type AccountBMServer interface {
	GetLoginLimit(ctx context.Context, req *GetLoginLimitReq) (resp *GetLoginLimitResp, err error)

	// rpc GetLoginLimitURL(LoginLimitReq) returns (LoginLimitResp) {
	//     option (google.api.http) = {
	//         get:"/account/get_login_limit"
	//     };
	// };
	LoginLimit(ctx context.Context, req *LoginLimitReq) (resp *LoginLimitResp, err error)

	IsOldUser(ctx context.Context, req *IsOldUserReq) (resp *IsOldUserResp, err error)

	OnGetPlayerShowData(ctx context.Context, req *GetPlayerShowDataReq) (resp *GetPlayerShowDataRsp, err error)

	OnEditPlayerShowData(ctx context.Context, req *EditPlayerShowDataReq) (resp *CommonResp, err error)

	OnModifyPassword(ctx context.Context, req *ModifyPasswordReq) (resp *CommonResp, err error)
}

var AccountSvc AccountBMServer

func accountGetLoginLimit(c *bm.Context) {
	p := new(GetLoginLimitReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.GetLoginLimit(c, p)
	c.JSON(resp, err)
}

func accountLoginLimit(c *bm.Context) {
	p := new(LoginLimitReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.LoginLimit(c, p)
	c.JSON(resp, err)
}

func accountIsOldUser(c *bm.Context) {
	p := new(IsOldUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.IsOldUser(c, p)
	c.JSON(resp, err)
}

func accountOnGetPlayerShowData(c *bm.Context) {
	p := new(GetPlayerShowDataReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.OnGetPlayerShowData(c, p)
	c.JSON(resp, err)
}

func accountOnEditPlayerShowData(c *bm.Context) {
	p := new(EditPlayerShowDataReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.OnEditPlayerShowData(c, p)
	c.JSON(resp, err)
}

func accountOnModifyPassword(c *bm.Context) {
	p := new(ModifyPasswordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AccountSvc.OnModifyPassword(c, p)
	c.JSON(resp, err)
}

// RegisterAccountBMServer Register the blademaster route
func RegisterAccountBMServer(e *bm.Engine, server AccountBMServer) {
	AccountSvc = server
	e.POST("/account/get_login_limit", accountGetLoginLimit)
	e.POST("/account/login_limit", accountLoginLimit)
	e.POST("/account/is_old_user", accountIsOldUser)
	e.POST("/account/OnGetPlayerShowData", accountOnGetPlayerShowData)
	e.POST("/account/OnEditPlayerShowData", accountOnEditPlayerShowData)
	e.POST("/account/OnModifyPassword", accountOnModifyPassword)
}
