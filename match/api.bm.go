// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathRaceMatchDetail = "/match/matchdetail"
var PathRaceChessSum = "/match/chesssum"
var PathRaceCatchSum = "/match/catchsum"
var PathRaceCatchRoundSum = "/match/catchroundsum"
var PathRaceRoundRank = "/match/roundrank"
var PathRaceDayRank = "/match/dayrank"
var PathRaceCatchDayRank = "/match/catchdayrank"
var PathRaceWeekRank = "/match/weekrank"
var PathRaceGetRankReward = "/match/getrankreward"
var PathRaceMatchSign = "/match/matchsign"
var PathRaceWeekResult = "/match/weekresult"
var PathRaceGetUserRank = "/match/getuserrank"
var PathRaceUserDayRank = "/match/userdayrank"
var PathRaceRoundEnd = "/match/roundend"
var PathRaceMatchEnd = "/match/endreport"
var PathRaceWeekRewardReport = "/match/weekrewardreport"
var PathRaceCheckUserReward = "/match/checkuserreward"
var PathRaceGetFloatBonusPool = "/match/getbonuspool"
var PathRaceGetFamousHall = "/match/getfamoushall"
var PathRacePullRewardList = "/match/pullrewardlist"
var PathRaceMatchStatus = "/match/matchstatus"
var PathRaceFullMatchSign = "/match/fullmatchsign"
var PathRaceCancelMatchSign = "/match/cancelmatchsign"
var PathRaceGetOnlineRound = "/match/getonlineround"

// RaceBMServer is the server API for Race service.
type RaceBMServer interface {
	// 获取比赛详情
	MatchDetail(ctx context.Context, req *MatchDetailReq) (resp *MatchDetailRsp, err error)

	// 棋牌每局结算
	ChessSum(ctx context.Context, req *ChessSumReq) (resp *CommonRsp, err error)

	// 捕鱼每局结算
	CatchSum(ctx context.Context, req *CatchSumReq) (resp *CatchSumRsp, err error)

	// 多人快速赛局内积分上报
	CatchRoundSum(ctx context.Context, req *CatchRoundSumReq) (resp *CommonRsp, err error)

	// 获取比赛局内排行
	RoundRank(ctx context.Context, req *RoundReq) (resp *RoundRankRsp, err error)

	// 获取每日榜单
	DayRank(ctx context.Context, req *DayRankReq) (resp *DayRankRsp, err error)

	// 获取奖励以及对应名但（大师赛独有）
	CatchDayRank(ctx context.Context, req *CatchDayRankReq) (resp *CatchDayRankRsp, err error)

	// 获取每周榜单
	WeekRank(ctx context.Context, req *WeekRankReq) (resp *WeekRankRsp, err error)

	// 获取日榜奖励
	GetRankReward(ctx context.Context, req *RankRewardReq) (resp *RankRewardRsp, err error)

	// 比赛报名
	MatchSign(ctx context.Context, req *MatchSignReq) (resp *MatchSignRsp, err error)

	// 本周战绩
	WeekResult(ctx context.Context, req *WeekResultReq) (resp *WeekResultRsp, err error)

	// 获取玩家排名（按期数）
	GetUserRank(ctx context.Context, req *CommonReq) (resp *UserRankRsp, err error)

	// 获取排名（按天数算）
	UserDayRank(ctx context.Context, req *CommonReq) (resp *UserRankRsp, err error)

	// 比赛内一局结算发将
	RoundEnd(ctx context.Context, req *RoundReq) (resp *RoundEndRsp, err error)

	// 比赛结束发奖
	MatchEnd(ctx context.Context, req *MatchEndReq) (resp *CommonRsp, err error)

	// 周榜单发奖励
	WeekRewardReport(ctx context.Context, req *WeekRewardReportReq) (resp *CommonRsp, err error)

	// 查询玩家奖励
	CheckUserReward(ctx context.Context, req *UserRewardReq) (resp *UserRewardRsp, err error)

	// 获取浮动奖金池
	GetFloatBonusPool(ctx context.Context, req *FloatBonusPoolReq) (resp *FloatBonusPoolRsp, err error)

	// 获取名人堂
	GetFamousHall(ctx context.Context, req *FamousHallReq) (resp *FamousHallRsp, err error)

	// 拉去奖励的列表
	PullRewardList(ctx context.Context, req *RewardListReq) (resp *RewardListRsp, err error)

	// 获取比赛状态
	MatchStatus(ctx context.Context, req *MatchStatusReq) (resp *MatchStatusRsp, err error)

	// 多人同时报名
	FullMatchSign(ctx context.Context, req *FullMatchSignReq) (resp *FullMatchSignRsp, err error)

	// 取消报名
	CancelMatchSign(ctx context.Context, req *CancelMatchSignReq) (resp *CancelMatchSignRsp, err error)

	// 取消报名
	GetOnlineRound(ctx context.Context, req *GetOnlineRoundReq) (resp *GetOnlineRoundRsp, err error)
}

var RaceSvc RaceBMServer

func raceMatchDetail(c *bm.Context) {
	p := new(MatchDetailReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.MatchDetail(c, p)
	c.JSON(resp, err)
}

func raceChessSum(c *bm.Context) {
	p := new(ChessSumReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.ChessSum(c, p)
	c.JSON(resp, err)
}

func raceCatchSum(c *bm.Context) {
	p := new(CatchSumReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.CatchSum(c, p)
	c.JSON(resp, err)
}

func raceCatchRoundSum(c *bm.Context) {
	p := new(CatchRoundSumReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.CatchRoundSum(c, p)
	c.JSON(resp, err)
}

func raceRoundRank(c *bm.Context) {
	p := new(RoundReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.RoundRank(c, p)
	c.JSON(resp, err)
}

func raceDayRank(c *bm.Context) {
	p := new(DayRankReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.DayRank(c, p)
	c.JSON(resp, err)
}

func raceCatchDayRank(c *bm.Context) {
	p := new(CatchDayRankReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.CatchDayRank(c, p)
	c.JSON(resp, err)
}

func raceWeekRank(c *bm.Context) {
	p := new(WeekRankReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.WeekRank(c, p)
	c.JSON(resp, err)
}

func raceGetRankReward(c *bm.Context) {
	p := new(RankRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.GetRankReward(c, p)
	c.JSON(resp, err)
}

func raceMatchSign(c *bm.Context) {
	p := new(MatchSignReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.MatchSign(c, p)
	c.JSON(resp, err)
}

func raceWeekResult(c *bm.Context) {
	p := new(WeekResultReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.WeekResult(c, p)
	c.JSON(resp, err)
}

func raceGetUserRank(c *bm.Context) {
	p := new(CommonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.GetUserRank(c, p)
	c.JSON(resp, err)
}

func raceUserDayRank(c *bm.Context) {
	p := new(CommonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.UserDayRank(c, p)
	c.JSON(resp, err)
}

func raceRoundEnd(c *bm.Context) {
	p := new(RoundReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.RoundEnd(c, p)
	c.JSON(resp, err)
}

func raceMatchEnd(c *bm.Context) {
	p := new(MatchEndReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.MatchEnd(c, p)
	c.JSON(resp, err)
}

func raceWeekRewardReport(c *bm.Context) {
	p := new(WeekRewardReportReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.WeekRewardReport(c, p)
	c.JSON(resp, err)
}

func raceCheckUserReward(c *bm.Context) {
	p := new(UserRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.CheckUserReward(c, p)
	c.JSON(resp, err)
}

func raceGetFloatBonusPool(c *bm.Context) {
	p := new(FloatBonusPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.GetFloatBonusPool(c, p)
	c.JSON(resp, err)
}

func raceGetFamousHall(c *bm.Context) {
	p := new(FamousHallReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.GetFamousHall(c, p)
	c.JSON(resp, err)
}

func racePullRewardList(c *bm.Context) {
	p := new(RewardListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.PullRewardList(c, p)
	c.JSON(resp, err)
}

func raceMatchStatus(c *bm.Context) {
	p := new(MatchStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.MatchStatus(c, p)
	c.JSON(resp, err)
}

func raceFullMatchSign(c *bm.Context) {
	p := new(FullMatchSignReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.FullMatchSign(c, p)
	c.JSON(resp, err)
}

func raceCancelMatchSign(c *bm.Context) {
	p := new(CancelMatchSignReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.CancelMatchSign(c, p)
	c.JSON(resp, err)
}

func raceGetOnlineRound(c *bm.Context) {
	p := new(GetOnlineRoundReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RaceSvc.GetOnlineRound(c, p)
	c.JSON(resp, err)
}

// RegisterRaceBMServer Register the blademaster route
func RegisterRaceBMServer(e *bm.Engine, server RaceBMServer) {
	RaceSvc = server
	e.POST("/match/matchdetail", raceMatchDetail)
	e.POST("/match/chesssum", raceChessSum)
	e.POST("/match/catchsum", raceCatchSum)
	e.POST("/match/catchroundsum", raceCatchRoundSum)
	e.POST("/match/roundrank", raceRoundRank)
	e.POST("/match/dayrank", raceDayRank)
	e.POST("/match/catchdayrank", raceCatchDayRank)
	e.POST("/match/weekrank", raceWeekRank)
	e.POST("/match/getrankreward", raceGetRankReward)
	e.POST("/match/matchsign", raceMatchSign)
	e.POST("/match/weekresult", raceWeekResult)
	e.POST("/match/getuserrank", raceGetUserRank)
	e.POST("/match/userdayrank", raceUserDayRank)
	e.POST("/match/roundend", raceRoundEnd)
	e.POST("/match/endreport", raceMatchEnd)
	e.POST("/match/weekrewardreport", raceWeekRewardReport)
	e.POST("/match/checkuserreward", raceCheckUserReward)
	e.POST("/match/getbonuspool", raceGetFloatBonusPool)
	e.POST("/match/getfamoushall", raceGetFamousHall)
	e.POST("/match/pullrewardlist", racePullRewardList)
	e.POST("/match/matchstatus", raceMatchStatus)
	e.POST("/match/fullmatchsign", raceFullMatchSign)
	e.POST("/match/cancelmatchsign", raceCancelMatchSign)
	e.POST("/match/getonlineround", raceGetOnlineRound)
}
