// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathRewardPoolPing = "/rewardpool.service.v1.RewardPool/Ping"
var PathRewardPoolQueryPool = "/RewardPool/QueryPool"
var PathRewardPoolUpdatePool = "/RewardPool/UpdatePool"
var PathRewardPoolAddRewardRecord = "/RewardPool/AddRewardRecord"
var PathRewardPoolQueryGamePools = "/RewardPool/QueryGamePools"
var PathRewardPoolQueryRewardRecord = "/RewardPool/QueryRewardRecord"

// RewardPoolBMServer is the server API for RewardPool service.
type RewardPoolBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 奖池信息查询
	QueryPool(ctx context.Context, req *QueryPoolReq) (resp *QueryPoolRsp, err error)

	// 更新奖池金额
	UpdatePool(ctx context.Context, req *UpdatePoolReq) (resp *CommonResp, err error)

	AddRewardRecord(ctx context.Context, req *AddRewardRecordReq) (resp *CommonResp, err error)

	// 查询游戏的所有奖池值(对外)
	QueryGamePools(ctx context.Context, req *QueryGamePoolsReq) (resp *QueryGamePoolsRsp, err error)

	// 查询指定游戏的中奖记录(对外)
	QueryRewardRecord(ctx context.Context, req *QueryRewardRecordReq) (resp *QueryRewardRecordRsp, err error)
}

var RewardPoolSvc RewardPoolBMServer

func rewardPoolPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RewardPoolSvc.Ping(c, p)
	c.JSON(resp, err)
}

func rewardPoolQueryPool(c *bm.Context) {
	p := new(QueryPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RewardPoolSvc.QueryPool(c, p)
	c.JSON(resp, err)
}

func rewardPoolUpdatePool(c *bm.Context) {
	p := new(UpdatePoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RewardPoolSvc.UpdatePool(c, p)
	c.JSON(resp, err)
}

func rewardPoolAddRewardRecord(c *bm.Context) {
	p := new(AddRewardRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RewardPoolSvc.AddRewardRecord(c, p)
	c.JSON(resp, err)
}

func rewardPoolQueryGamePools(c *bm.Context) {
	p := new(QueryGamePoolsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RewardPoolSvc.QueryGamePools(c, p)
	c.JSON(resp, err)
}

func rewardPoolQueryRewardRecord(c *bm.Context) {
	p := new(QueryRewardRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RewardPoolSvc.QueryRewardRecord(c, p)
	c.JSON(resp, err)
}

// RegisterRewardPoolBMServer Register the blademaster route
func RegisterRewardPoolBMServer(e *bm.Engine, server RewardPoolBMServer) {
	RewardPoolSvc = server
	e.GET("/rewardpool.service.v1.RewardPool/Ping", rewardPoolPing)
	e.POST("/RewardPool/QueryPool", rewardPoolQueryPool)
	e.POST("/RewardPool/UpdatePool", rewardPoolUpdatePool)
	e.POST("/RewardPool/AddRewardRecord", rewardPoolAddRewardRecord)
	e.POST("/RewardPool/QueryGamePools", rewardPoolQueryGamePools)
	e.POST("/RewardPool/QueryRewardRecord", rewardPoolQueryRewardRecord)
}
