// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnumRecordStatus int32

const (
	EnumRecordStatus_RERS_NONE     EnumRecordStatus = 0
	EnumRecordStatus_RERS_START    EnumRecordStatus = 1
	EnumRecordStatus_RERS_CONTINUE EnumRecordStatus = 2
	EnumRecordStatus_RERS_END      EnumRecordStatus = 3
)

var EnumRecordStatus_name = map[int32]string{
	0: "RERS_NONE",
	1: "RERS_START",
	2: "RERS_CONTINUE",
	3: "RERS_END",
}

var EnumRecordStatus_value = map[string]int32{
	"RERS_NONE":     0,
	"RERS_START":    1,
	"RERS_CONTINUE": 2,
	"RERS_END":      3,
}

func (x EnumRecordStatus) Enum() *EnumRecordStatus {
	p := new(EnumRecordStatus)
	*p = x
	return p
}

func (x EnumRecordStatus) String() string {
	return proto.EnumName(EnumRecordStatus_name, int32(x))
}

func (x *EnumRecordStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EnumRecordStatus_value, data, "EnumRecordStatus")
	if err != nil {
		return err
	}
	*x = EnumRecordStatus(value)
	return nil
}

func (EnumRecordStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type EnumRecordType int32

const (
	EnumRecordType_NONE     EnumRecordType = 0
	EnumRecordType_GRAND    EnumRecordType = 1
	EnumRecordType_PERSONAL EnumRecordType = 2
	EnumRecordType_NORMAL   EnumRecordType = 3
)

var EnumRecordType_name = map[int32]string{
	0: "NONE",
	1: "GRAND",
	2: "PERSONAL",
	3: "NORMAL",
}

var EnumRecordType_value = map[string]int32{
	"NONE":     0,
	"GRAND":    1,
	"PERSONAL": 2,
	"NORMAL":   3,
}

func (x EnumRecordType) Enum() *EnumRecordType {
	p := new(EnumRecordType)
	*p = x
	return p
}

func (x EnumRecordType) String() string {
	return proto.EnumName(EnumRecordType_name, int32(x))
}

func (x *EnumRecordType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EnumRecordType_value, data, "EnumRecordType")
	if err != nil {
		return err
	}
	*x = EnumRecordType(value)
	return nil
}

func (EnumRecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type UserLoginReq struct {
	UserID               *int64   `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	GameID               *int32   `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLoginReq) Reset()         { *m = UserLoginReq{} }
func (m *UserLoginReq) String() string { return proto.CompactTextString(m) }
func (*UserLoginReq) ProtoMessage()    {}
func (*UserLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *UserLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginReq.Merge(m, src)
}
func (m *UserLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginReq proto.InternalMessageInfo

// 请求打开红包
type HallOpenRedEnvelopesReq struct {
	UserDbid             *int32   `protobuf:"varint,1,req,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	Avata                *string  `protobuf:"bytes,2,req,name=avata" json:"avata,omitempty"`
	Nickname             *string  `protobuf:"bytes,3,req,name=nickname" json:"nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HallOpenRedEnvelopesReq) Reset()         { *m = HallOpenRedEnvelopesReq{} }
func (m *HallOpenRedEnvelopesReq) String() string { return proto.CompactTextString(m) }
func (*HallOpenRedEnvelopesReq) ProtoMessage()    {}
func (*HallOpenRedEnvelopesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *HallOpenRedEnvelopesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallOpenRedEnvelopesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallOpenRedEnvelopesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallOpenRedEnvelopesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallOpenRedEnvelopesReq.Merge(m, src)
}
func (m *HallOpenRedEnvelopesReq) XXX_Size() int {
	return m.Size()
}
func (m *HallOpenRedEnvelopesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HallOpenRedEnvelopesReq.DiscardUnknown(m)
}

var xxx_messageInfo_HallOpenRedEnvelopesReq proto.InternalMessageInfo

// 玩家打开红包返回
type HallOpenRedEnvelopesRsp struct {
	BonusPool            *int64            `protobuf:"varint,1,opt,name=bonus_pool,json=bonusPool" json:"bonus_pool,omitempty"`
	RedEnvelopesCount    *int32            `protobuf:"varint,2,opt,name=red_envelopes_count,json=redEnvelopesCount" json:"red_envelopes_count,omitempty"`
	UserCoin             *int64            `protobuf:"varint,3,opt,name=user_coin,json=userCoin" json:"user_coin,omitempty"`
	RedEnvelopesInfo     *RedEnvelopesInfo `protobuf:"bytes,4,opt,name=red_envelopes_info,json=redEnvelopesInfo" json:"red_envelopes_info,omitempty"`
	Status               *int32            `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HallOpenRedEnvelopesRsp) Reset()         { *m = HallOpenRedEnvelopesRsp{} }
func (m *HallOpenRedEnvelopesRsp) String() string { return proto.CompactTextString(m) }
func (*HallOpenRedEnvelopesRsp) ProtoMessage()    {}
func (*HallOpenRedEnvelopesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *HallOpenRedEnvelopesRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallOpenRedEnvelopesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallOpenRedEnvelopesRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallOpenRedEnvelopesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallOpenRedEnvelopesRsp.Merge(m, src)
}
func (m *HallOpenRedEnvelopesRsp) XXX_Size() int {
	return m.Size()
}
func (m *HallOpenRedEnvelopesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HallOpenRedEnvelopesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HallOpenRedEnvelopesRsp proto.InternalMessageInfo

//红包信息
type RedEnvelopesInfo struct {
	UserDbid             *int32   `protobuf:"varint,1,opt,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	Avata                *string  `protobuf:"bytes,2,opt,name=avata" json:"avata,omitempty"`
	Nickname             *string  `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	Tick                 *uint64  `protobuf:"varint,4,opt,name=tick" json:"tick,omitempty"`
	Data                 *string  `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	Coin                 *int64   `protobuf:"varint,6,opt,name=coin" json:"coin,omitempty"`
	LuckCoin             *int64   `protobuf:"varint,7,opt,name=luck_coin,json=luckCoin" json:"luck_coin,omitempty"`
	LuckType             *int32   `protobuf:"varint,8,opt,name=luck_type,json=luckType" json:"luck_type,omitempty"`
	GrandPrize           *bool    `protobuf:"varint,9,opt,name=grand_prize,json=grandPrize" json:"grand_prize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedEnvelopesInfo) Reset()         { *m = RedEnvelopesInfo{} }
func (m *RedEnvelopesInfo) String() string { return proto.CompactTextString(m) }
func (*RedEnvelopesInfo) ProtoMessage()    {}
func (*RedEnvelopesInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *RedEnvelopesInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedEnvelopesInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedEnvelopesInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedEnvelopesInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedEnvelopesInfo.Merge(m, src)
}
func (m *RedEnvelopesInfo) XXX_Size() int {
	return m.Size()
}
func (m *RedEnvelopesInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RedEnvelopesInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RedEnvelopesInfo proto.InternalMessageInfo

// 用户登录时 发送游戏内红包记录及红包活动信息
type HallRedEnvelopesInfoRsp struct {
	UserDbid             *int32   `protobuf:"varint,1,opt,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	RedEnvelopesCount    *int32   `protobuf:"varint,2,opt,name=red_envelopes_count,json=redEnvelopesCount" json:"red_envelopes_count,omitempty"`
	LuckyNum             *int64   `protobuf:"varint,3,opt,name=luckyNum" json:"luckyNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HallRedEnvelopesInfoRsp) Reset()         { *m = HallRedEnvelopesInfoRsp{} }
func (m *HallRedEnvelopesInfoRsp) String() string { return proto.CompactTextString(m) }
func (*HallRedEnvelopesInfoRsp) ProtoMessage()    {}
func (*HallRedEnvelopesInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *HallRedEnvelopesInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallRedEnvelopesInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallRedEnvelopesInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallRedEnvelopesInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallRedEnvelopesInfoRsp.Merge(m, src)
}
func (m *HallRedEnvelopesInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *HallRedEnvelopesInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HallRedEnvelopesInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HallRedEnvelopesInfoRsp proto.InternalMessageInfo

// 给用户发送红包记录（大奖、个人红包记录 共用此协议 e_type区分）
type HallRedEnvelopesRecordRsp struct {
	GrandPrizeRecore     []*RedEnvelopesInfo `protobuf:"bytes,1,rep,name=grand_prize_recore,json=grandPrizeRecore" json:"grand_prize_recore,omitempty"`
	Idx                  *int32              `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	EType                *int32              `protobuf:"varint,3,opt,name=e_type,json=eType" json:"e_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HallRedEnvelopesRecordRsp) Reset()         { *m = HallRedEnvelopesRecordRsp{} }
func (m *HallRedEnvelopesRecordRsp) String() string { return proto.CompactTextString(m) }
func (*HallRedEnvelopesRecordRsp) ProtoMessage()    {}
func (*HallRedEnvelopesRecordRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *HallRedEnvelopesRecordRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallRedEnvelopesRecordRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallRedEnvelopesRecordRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallRedEnvelopesRecordRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallRedEnvelopesRecordRsp.Merge(m, src)
}
func (m *HallRedEnvelopesRecordRsp) XXX_Size() int {
	return m.Size()
}
func (m *HallRedEnvelopesRecordRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HallRedEnvelopesRecordRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HallRedEnvelopesRecordRsp proto.InternalMessageInfo

// 玩家中大奖时 广播提示
type HallRedEnvelopesNotice struct {
	LuckNumber           *int64            `protobuf:"varint,1,opt,name=luckNumber" json:"luckNumber,omitempty"`
	RedEnvelopesInfo     *RedEnvelopesInfo `protobuf:"bytes,2,opt,name=red_envelopes_info,json=redEnvelopesInfo" json:"red_envelopes_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HallRedEnvelopesNotice) Reset()         { *m = HallRedEnvelopesNotice{} }
func (m *HallRedEnvelopesNotice) String() string { return proto.CompactTextString(m) }
func (*HallRedEnvelopesNotice) ProtoMessage()    {}
func (*HallRedEnvelopesNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *HallRedEnvelopesNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallRedEnvelopesNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallRedEnvelopesNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallRedEnvelopesNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallRedEnvelopesNotice.Merge(m, src)
}
func (m *HallRedEnvelopesNotice) XXX_Size() int {
	return m.Size()
}
func (m *HallRedEnvelopesNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_HallRedEnvelopesNotice.DiscardUnknown(m)
}

var xxx_messageInfo_HallRedEnvelopesNotice proto.InternalMessageInfo

type ShareAddCountReq struct {
	UserDbid             *int32   `protobuf:"varint,1,req,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareAddCountReq) Reset()         { *m = ShareAddCountReq{} }
func (m *ShareAddCountReq) String() string { return proto.CompactTextString(m) }
func (*ShareAddCountReq) ProtoMessage()    {}
func (*ShareAddCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *ShareAddCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareAddCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareAddCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareAddCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareAddCountReq.Merge(m, src)
}
func (m *ShareAddCountReq) XXX_Size() int {
	return m.Size()
}
func (m *ShareAddCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareAddCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShareAddCountReq proto.InternalMessageInfo

type ShareData struct {
	UserDbid             *int32   `protobuf:"varint,1,opt,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	Share                *bool    `protobuf:"varint,2,opt,name=share" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareData) Reset()         { *m = ShareData{} }
func (m *ShareData) String() string { return proto.CompactTextString(m) }
func (*ShareData) ProtoMessage()    {}
func (*ShareData) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *ShareData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareData.Merge(m, src)
}
func (m *ShareData) XXX_Size() int {
	return m.Size()
}
func (m *ShareData) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareData.DiscardUnknown(m)
}

var xxx_messageInfo_ShareData proto.InternalMessageInfo

//////////////////戳泡泡
type HallBubbleReq struct {
	UserDbid             *int32   `protobuf:"varint,1,req,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	BublesId             *int32   `protobuf:"varint,2,req,name=bubles_id,json=bublesId" json:"bubles_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HallBubbleReq) Reset()         { *m = HallBubbleReq{} }
func (m *HallBubbleReq) String() string { return proto.CompactTextString(m) }
func (*HallBubbleReq) ProtoMessage()    {}
func (*HallBubbleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *HallBubbleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallBubbleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallBubbleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallBubbleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallBubbleReq.Merge(m, src)
}
func (m *HallBubbleReq) XXX_Size() int {
	return m.Size()
}
func (m *HallBubbleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HallBubbleReq.DiscardUnknown(m)
}

var xxx_messageInfo_HallBubbleReq proto.InternalMessageInfo

type HallBubbleResp struct {
	UserDbid             *int32   `protobuf:"varint,1,req,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	Count                *int32   `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	CanGet               *bool    `protobuf:"varint,3,opt,name=can_get,json=canGet" json:"can_get,omitempty"`
	BublesId             *int32   `protobuf:"varint,4,req,name=bubles_id,json=bublesId" json:"bubles_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HallBubbleResp) Reset()         { *m = HallBubbleResp{} }
func (m *HallBubbleResp) String() string { return proto.CompactTextString(m) }
func (*HallBubbleResp) ProtoMessage()    {}
func (*HallBubbleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *HallBubbleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallBubbleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallBubbleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallBubbleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallBubbleResp.Merge(m, src)
}
func (m *HallBubbleResp) XXX_Size() int {
	return m.Size()
}
func (m *HallBubbleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HallBubbleResp.DiscardUnknown(m)
}

var xxx_messageInfo_HallBubbleResp proto.InternalMessageInfo

////////////////////// 查询活动信息
type QueryGameActivityInfoReq struct {
	GameId               *int32   `protobuf:"varint,1,req,name=game_id,json=gameId" json:"game_id,omitempty"`
	UserDbid             *int32   `protobuf:"varint,2,req,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryGameActivityInfoReq) Reset()         { *m = QueryGameActivityInfoReq{} }
func (m *QueryGameActivityInfoReq) String() string { return proto.CompactTextString(m) }
func (*QueryGameActivityInfoReq) ProtoMessage()    {}
func (*QueryGameActivityInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *QueryGameActivityInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGameActivityInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGameActivityInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGameActivityInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGameActivityInfoReq.Merge(m, src)
}
func (m *QueryGameActivityInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryGameActivityInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGameActivityInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGameActivityInfoReq proto.InternalMessageInfo

type QueryGameActivityInfoRsp struct {
	Result               *int32   `protobuf:"varint,1,req,name=result" json:"result,omitempty"`
	GameId               *int32   `protobuf:"varint,2,req,name=game_id,json=gameId" json:"game_id,omitempty"`
	UserDbid             *int32   `protobuf:"varint,3,req,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	Data                 *string  `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryGameActivityInfoRsp) Reset()         { *m = QueryGameActivityInfoRsp{} }
func (m *QueryGameActivityInfoRsp) String() string { return proto.CompactTextString(m) }
func (*QueryGameActivityInfoRsp) ProtoMessage()    {}
func (*QueryGameActivityInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *QueryGameActivityInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGameActivityInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGameActivityInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGameActivityInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGameActivityInfoRsp.Merge(m, src)
}
func (m *QueryGameActivityInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryGameActivityInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGameActivityInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGameActivityInfoRsp proto.InternalMessageInfo

type UpdateGameActivityInfoReq struct {
	GameId               *int32   `protobuf:"varint,1,req,name=game_id,json=gameId" json:"game_id,omitempty"`
	UserDbid             *int32   `protobuf:"varint,2,req,name=user_dbid,json=userDbid" json:"user_dbid,omitempty"`
	Count                *int32   `protobuf:"varint,3,req,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGameActivityInfoReq) Reset()         { *m = UpdateGameActivityInfoReq{} }
func (m *UpdateGameActivityInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateGameActivityInfoReq) ProtoMessage()    {}
func (*UpdateGameActivityInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *UpdateGameActivityInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGameActivityInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGameActivityInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGameActivityInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGameActivityInfoReq.Merge(m, src)
}
func (m *UpdateGameActivityInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGameActivityInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGameActivityInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGameActivityInfoReq proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("HallActivity.service.v1.EnumRecordStatus", EnumRecordStatus_name, EnumRecordStatus_value)
	proto.RegisterEnum("HallActivity.service.v1.EnumRecordType", EnumRecordType_name, EnumRecordType_value)
	proto.RegisterType((*UserLoginReq)(nil), "HallActivity.service.v1.UserLoginReq")
	proto.RegisterType((*HallOpenRedEnvelopesReq)(nil), "HallActivity.service.v1.HallOpenRedEnvelopesReq")
	proto.RegisterType((*HallOpenRedEnvelopesRsp)(nil), "HallActivity.service.v1.HallOpenRedEnvelopesRsp")
	proto.RegisterType((*RedEnvelopesInfo)(nil), "HallActivity.service.v1.RedEnvelopesInfo")
	proto.RegisterType((*HallRedEnvelopesInfoRsp)(nil), "HallActivity.service.v1.HallRedEnvelopesInfoRsp")
	proto.RegisterType((*HallRedEnvelopesRecordRsp)(nil), "HallActivity.service.v1.HallRedEnvelopesRecordRsp")
	proto.RegisterType((*HallRedEnvelopesNotice)(nil), "HallActivity.service.v1.HallRedEnvelopesNotice")
	proto.RegisterType((*ShareAddCountReq)(nil), "HallActivity.service.v1.ShareAddCountReq")
	proto.RegisterType((*ShareData)(nil), "HallActivity.service.v1.ShareData")
	proto.RegisterType((*HallBubbleReq)(nil), "HallActivity.service.v1.HallBubbleReq")
	proto.RegisterType((*HallBubbleResp)(nil), "HallActivity.service.v1.HallBubbleResp")
	proto.RegisterType((*QueryGameActivityInfoReq)(nil), "HallActivity.service.v1.QueryGameActivityInfoReq")
	proto.RegisterType((*QueryGameActivityInfoRsp)(nil), "HallActivity.service.v1.QueryGameActivityInfoRsp")
	proto.RegisterType((*UpdateGameActivityInfoReq)(nil), "HallActivity.service.v1.UpdateGameActivityInfoReq")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdf, 0x6e, 0xe3, 0xc4,
	0x17, 0xee, 0xc4, 0x49, 0x36, 0x39, 0xfd, 0xf3, 0xf3, 0xce, 0x8f, 0xed, 0xba, 0x6e, 0x09, 0xd1,
	0xb0, 0x0b, 0xa1, 0x88, 0x94, 0xed, 0x03, 0x2c, 0xca, 0x36, 0x51, 0x09, 0x2a, 0x4e, 0x71, 0x5b,
	0xad, 0xc4, 0x4d, 0xe4, 0x3f, 0xd3, 0xd4, 0xaa, 0xe3, 0xf1, 0xfa, 0x4f, 0x45, 0xd0, 0x5e, 0xf5,
	0x0d, 0x10, 0x37, 0x48, 0x88, 0x07, 0xe0, 0x4d, 0xf6, 0x12, 0x89, 0x07, 0x00, 0x0a, 0xcf, 0x80,
	0xb8, 0x44, 0x33, 0x76, 0x12, 0xc7, 0xad, 0x5b, 0x2a, 0xb8, 0x9b, 0x73, 0x66, 0xe6, 0x3b, 0xdf,
	0x7c, 0x73, 0xe6, 0x1b, 0xa8, 0x1b, 0xbe, 0xd3, 0xf6, 0x03, 0x16, 0x31, 0xfc, 0xf8, 0x53, 0xc3,
	0x75, 0x3b, 0x56, 0xe4, 0x5c, 0x38, 0xd1, 0xa4, 0x1d, 0xd2, 0xe0, 0xc2, 0xb1, 0x68, 0xfb, 0xe2,
	0x99, 0xfa, 0xd1, 0xc8, 0x89, 0xce, 0x62, 0xb3, 0x6d, 0xb1, 0xf1, 0xce, 0x88, 0x8d, 0xd8, 0x8e,
	0x58, 0x6f, 0xc6, 0xa7, 0x22, 0x12, 0x81, 0x18, 0x25, 0x38, 0xea, 0xe6, 0x88, 0xb1, 0x91, 0x4b,
	0xe7, 0xab, 0xe8, 0xd8, 0x8f, 0x26, 0xe9, 0xe4, 0x56, 0x3a, 0x69, 0xf8, 0xce, 0x8e, 0xe1, 0x79,
	0x2c, 0x32, 0x22, 0x87, 0x79, 0x61, 0x32, 0x4b, 0x9e, 0xc3, 0xca, 0x49, 0x48, 0x83, 0x03, 0x36,
	0x72, 0x3c, 0x9d, 0xbe, 0xc2, 0xeb, 0x50, 0xe5, 0x71, 0xbf, 0xab, 0xa0, 0x66, 0xa9, 0x25, 0xe9,
	0x69, 0xc4, 0xf3, 0xfb, 0xc6, 0x98, 0xf6, 0xbb, 0x4a, 0xa9, 0x59, 0x6a, 0x55, 0xf4, 0x34, 0x22,
	0x67, 0x20, 0x0e, 0x31, 0xf0, 0xa9, 0xa7, 0x53, 0xbb, 0xe7, 0x5d, 0x50, 0x97, 0xf9, 0x34, 0xe4,
	0x50, 0x9b, 0x50, 0x8f, 0x43, 0x1a, 0x0c, 0x6d, 0xd3, 0xb1, 0x05, 0x5a, 0x45, 0xaf, 0xf1, 0x44,
	0xd7, 0x74, 0x6c, 0xfc, 0x16, 0x54, 0x8c, 0x0b, 0x23, 0x32, 0x04, 0x5c, 0x5d, 0x4f, 0x02, 0xac,
	0x42, 0xcd, 0x73, 0xac, 0x73, 0xcf, 0x18, 0x53, 0x45, 0x12, 0x13, 0xb3, 0x98, 0xfc, 0x89, 0x0a,
	0x4a, 0x85, 0x3e, 0x7e, 0x1b, 0xc0, 0x64, 0x5e, 0x1c, 0x0e, 0x7d, 0xc6, 0x5c, 0x05, 0x35, 0x51,
	0x4b, 0xd2, 0xeb, 0x22, 0x73, 0xc8, 0x98, 0x8b, 0xdb, 0xf0, 0xff, 0x80, 0xda, 0x43, 0x3a, 0xdd,
	0x32, 0xb4, 0x58, 0xec, 0x45, 0x4a, 0xa9, 0x89, 0x5a, 0x15, 0xfd, 0x61, 0x90, 0x01, 0xdb, 0xe3,
	0x13, 0x33, 0xe6, 0x16, 0x73, 0x3c, 0x45, 0x12, 0x68, 0x82, 0xf9, 0x1e, 0x73, 0x3c, 0xfc, 0x12,
	0xf0, 0x22, 0x98, 0xe3, 0x9d, 0x32, 0xa5, 0xdc, 0x44, 0xad, 0xe5, 0xdd, 0x0f, 0xda, 0x05, 0x37,
	0xda, 0xce, 0x32, 0xee, 0x7b, 0xa7, 0x4c, 0x97, 0x83, 0x5c, 0x86, 0x4b, 0x1c, 0x46, 0x46, 0x14,
	0x87, 0x4a, 0x45, 0x10, 0x4b, 0x23, 0xf2, 0x17, 0x02, 0x39, 0xbf, 0x3d, 0x2f, 0x2e, 0x2a, 0x12,
	0x17, 0x15, 0x89, 0x8b, 0xb2, 0xe2, 0x62, 0x0c, 0xe5, 0xc8, 0xb1, 0xce, 0xc5, 0x31, 0xca, 0xba,
	0x18, 0xf3, 0x9c, 0xcd, 0x41, 0x2a, 0x62, 0xad, 0x18, 0xf3, 0x9c, 0x10, 0xa5, 0x2a, 0x44, 0x11,
	0x63, 0x4e, 0xc5, 0x8d, 0xad, 0xf3, 0x44, 0xad, 0x07, 0x89, 0x5a, 0x3c, 0xb1, 0x97, 0x9d, 0x8c,
	0x26, 0x3e, 0x55, 0x6a, 0x09, 0x4f, 0x9e, 0x38, 0x9e, 0xf8, 0x14, 0xbf, 0x03, 0xcb, 0xa3, 0xc0,
	0xf0, 0xec, 0xa1, 0x1f, 0x38, 0x5f, 0x53, 0xa5, 0xde, 0x44, 0xad, 0x9a, 0x0e, 0x22, 0x75, 0xc8,
	0x33, 0xe4, 0x32, 0xbd, 0xf3, 0x6b, 0xea, 0x85, 0xfe, 0xed, 0x0a, 0xdc, 0xf7, 0xc6, 0x55, 0x10,
	0xac, 0x26, 0x5a, 0x3c, 0x9e, 0x5e, 0xf8, 0x34, 0x26, 0x3f, 0x20, 0xd8, 0xc8, 0x93, 0xd0, 0xa9,
	0xc5, 0x02, 0x9b, 0xd3, 0x78, 0x09, 0x38, 0x73, 0x86, 0x61, 0xc0, 0x27, 0xa8, 0x82, 0x9a, 0xd2,
	0x3d, 0xdb, 0x61, 0x7e, 0x6a, 0x81, 0x4d, 0xb1, 0x0c, 0x92, 0x63, 0x7f, 0x95, 0x52, 0xe6, 0x43,
	0xfc, 0x08, 0xaa, 0x34, 0x11, 0x52, 0x12, 0xc9, 0x0a, 0xe5, 0x2a, 0x92, 0x6f, 0x10, 0xac, 0xe7,
	0xf9, 0x69, 0x2c, 0x72, 0x2c, 0x8a, 0x1b, 0x00, 0xfc, 0x18, 0x5a, 0x3c, 0x36, 0x69, 0x90, 0xbe,
	0x8b, 0x4c, 0xa6, 0xa0, 0x97, 0x4b, 0xff, 0xba, 0x97, 0xc9, 0x0e, 0xc8, 0x47, 0x67, 0x46, 0x40,
	0x3b, 0xb6, 0x2d, 0x04, 0xbe, 0xcb, 0x0f, 0xc8, 0x73, 0xa8, 0x8b, 0x0d, 0x5d, 0xde, 0x65, 0x77,
	0x35, 0x77, 0xc8, 0x57, 0x0a, 0x9a, 0x35, 0x3d, 0x09, 0x48, 0x1f, 0x56, 0x39, 0xdd, 0x17, 0xb1,
	0x69, 0xba, 0xf4, 0x4e, 0xf7, 0xd9, 0x84, 0xba, 0x19, 0x9b, 0x2e, 0x3f, 0xb0, 0x9d, 0x1a, 0x5a,
	0x2d, 0x49, 0xf4, 0x6d, 0x32, 0x81, 0xb5, 0x2c, 0xd4, 0xf5, 0x56, 0xbb, 0xe6, 0x64, 0xd3, 0xe6,
	0xe2, 0x13, 0x49, 0x80, 0x1f, 0xc3, 0x03, 0xcb, 0xf0, 0x86, 0x23, 0x1a, 0x89, 0xcb, 0xaa, 0xe9,
	0x55, 0xcb, 0xf0, 0xf6, 0x69, 0xb4, 0x58, 0xba, 0x9c, 0x2b, 0x7d, 0x08, 0xca, 0x17, 0x31, 0x0d,
	0x26, 0xdc, 0x5c, 0xa7, 0xca, 0x0b, 0x85, 0xe9, 0x2b, 0x8e, 0x38, 0x32, 0xc6, 0x74, 0x38, 0xa3,
	0x50, 0xe5, 0x61, 0xdf, 0x5e, 0x64, 0x57, 0xca, 0xe9, 0xfa, 0xba, 0x08, 0x31, 0xf4, 0xb9, 0xe1,
	0x04, 0x34, 0x8c, 0xdd, 0x68, 0x0a, 0x98, 0x44, 0xd9, 0x4a, 0xa5, 0xe2, 0x4a, 0x52, 0x4e, 0x87,
	0xa9, 0x5d, 0x94, 0xe7, 0x76, 0x41, 0x46, 0xb0, 0x71, 0xe2, 0xdb, 0x46, 0x44, 0xff, 0xb3, 0x03,
	0xcd, 0xe5, 0x96, 0x32, 0x72, 0x6f, 0xeb, 0x20, 0x53, 0x2f, 0x1e, 0x27, 0xcf, 0xf2, 0x48, 0xf8,
	0x26, 0x5e, 0x85, 0xba, 0xde, 0xd3, 0x8f, 0x86, 0xda, 0x40, 0xeb, 0xc9, 0x4b, 0x78, 0x0d, 0x40,
	0x84, 0x47, 0xc7, 0x1d, 0xfd, 0x58, 0x46, 0xf8, 0x21, 0xac, 0x8a, 0x78, 0x6f, 0xa0, 0x1d, 0xf7,
	0xb5, 0x93, 0x9e, 0x5c, 0xc2, 0x2b, 0x50, 0x13, 0xa9, 0x9e, 0xd6, 0x95, 0xa5, 0xed, 0x4f, 0x60,
	0x6d, 0x8e, 0x29, 0xfc, 0xaa, 0x06, 0xe5, 0x14, 0xac, 0x0e, 0x95, 0x7d, 0xbd, 0xa3, 0x75, 0x65,
	0xc4, 0x37, 0x1d, 0xf6, 0xf4, 0xa3, 0x81, 0xd6, 0x39, 0x90, 0x4b, 0x18, 0xa0, 0xaa, 0x0d, 0xf4,
	0xcf, 0x3b, 0x07, 0xb2, 0xb4, 0xfb, 0x4b, 0x15, 0x56, 0xb2, 0x6f, 0x08, 0x7b, 0xb0, 0x3c, 0xf0,
	0x66, 0xdf, 0x2d, 0x7e, 0x5a, 0xf8, 0xc2, 0xb2, 0x5f, 0xb2, 0xba, 0xde, 0x4e, 0x7e, 0xf0, 0xf6,
	0xf4, 0x7b, 0x6f, 0xf7, 0xf8, 0xf7, 0x4e, 0x9a, 0x97, 0x3f, 0xff, 0xf1, 0x6d, 0x49, 0x25, 0xca,
	0x99, 0xe1, 0xba, 0x46, 0x8a, 0xb2, 0x93, 0x2d, 0xf0, 0x3d, 0x82, 0xff, 0xe5, 0xbe, 0x4b, 0xfc,
	0x71, 0x61, 0xd1, 0x82, 0x7f, 0x5c, 0xbd, 0xe7, 0x8e, 0xd0, 0x27, 0x4f, 0x04, 0xb3, 0x06, 0xd9,
	0x5a, 0x64, 0x96, 0x63, 0x72, 0x89, 0x60, 0x75, 0xc1, 0x24, 0x70, 0xb1, 0xe5, 0xe4, 0xcd, 0x44,
	0x25, 0xb7, 0x2f, 0xe5, 0x36, 0x42, 0x88, 0xa0, 0xb1, 0x45, 0xd4, 0x05, 0x1a, 0x8b, 0x25, 0x5f,
	0x43, 0xfd, 0x33, 0xc3, 0x4c, 0xde, 0x3a, 0x7e, 0xef, 0xd6, 0x93, 0xce, 0xbc, 0x45, 0x7d, 0xff,
	0x1f, 0xad, 0x0b, 0x7d, 0xd2, 0x10, 0x0c, 0x14, 0xb2, 0xbe, 0xc0, 0x60, 0x5e, 0xf0, 0x47, 0x04,
	0x8f, 0x6e, 0x7c, 0x9e, 0xf8, 0x59, 0x61, 0x89, 0x22, 0x83, 0x50, 0xef, 0xbb, 0x25, 0xf4, 0xc9,
	0xb6, 0xe0, 0xf7, 0x84, 0x90, 0x05, 0x7e, 0x37, 0x33, 0xe2, 0xdf, 0xcc, 0xcd, 0x8f, 0x19, 0xef,
	0x16, 0x37, 0x72, 0xd1, 0xeb, 0x2f, 0xec, 0xea, 0x0f, 0x05, 0xa5, 0xa7, 0xe4, 0xdd, 0x05, 0x4a,
	0x37, 0xe3, 0xbc, 0xd8, 0x78, 0xf3, 0x5b, 0x63, 0xe9, 0xcd, 0x55, 0x03, 0xfd, 0x74, 0xd5, 0x40,
	0xbf, 0x5e, 0x35, 0xd0, 0x77, 0xbf, 0x37, 0x96, 0xbe, 0x94, 0x0c, 0xdf, 0xf9, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x9d, 0x9a, 0xd8, 0x30, 0x67, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HallActivityClient is the client API for HallActivity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HallActivityClient interface {
	// 客户端登录后获取红包相关的数据
	OnUserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 开红包
	OpenRedEnvelope(ctx context.Context, in *HallOpenRedEnvelopesReq, opts ...grpc.CallOption) (*HallOpenRedEnvelopesRsp, error)
	// 分享增加可抢红包的次数
	ShareAddCount(ctx context.Context, in *ShareAddCountReq, opts ...grpc.CallOption) (*ShareData, error)
	// 戳泡泡
	JabBubble(ctx context.Context, in *HallBubbleReq, opts ...grpc.CallOption) (*HallBubbleResp, error)
	// 查询体验场活动信息
	QueryGameActivityInfo(ctx context.Context, in *QueryGameActivityInfoReq, opts ...grpc.CallOption) (*QueryGameActivityInfoRsp, error)
	// 更新体验场活动次数信息
	UpdateGameActivityInfo(ctx context.Context, in *UpdateGameActivityInfoReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type hallActivityClient struct {
	cc *grpc.ClientConn
}

func NewHallActivityClient(cc *grpc.ClientConn) HallActivityClient {
	return &hallActivityClient{cc}
}

func (c *hallActivityClient) OnUserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/HallActivity.service.v1.HallActivity/OnUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallActivityClient) OpenRedEnvelope(ctx context.Context, in *HallOpenRedEnvelopesReq, opts ...grpc.CallOption) (*HallOpenRedEnvelopesRsp, error) {
	out := new(HallOpenRedEnvelopesRsp)
	err := c.cc.Invoke(ctx, "/HallActivity.service.v1.HallActivity/OpenRedEnvelope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallActivityClient) ShareAddCount(ctx context.Context, in *ShareAddCountReq, opts ...grpc.CallOption) (*ShareData, error) {
	out := new(ShareData)
	err := c.cc.Invoke(ctx, "/HallActivity.service.v1.HallActivity/ShareAddCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallActivityClient) JabBubble(ctx context.Context, in *HallBubbleReq, opts ...grpc.CallOption) (*HallBubbleResp, error) {
	out := new(HallBubbleResp)
	err := c.cc.Invoke(ctx, "/HallActivity.service.v1.HallActivity/JabBubble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallActivityClient) QueryGameActivityInfo(ctx context.Context, in *QueryGameActivityInfoReq, opts ...grpc.CallOption) (*QueryGameActivityInfoRsp, error) {
	out := new(QueryGameActivityInfoRsp)
	err := c.cc.Invoke(ctx, "/HallActivity.service.v1.HallActivity/QueryGameActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallActivityClient) UpdateGameActivityInfo(ctx context.Context, in *UpdateGameActivityInfoReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/HallActivity.service.v1.HallActivity/UpdateGameActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HallActivityServer is the server API for HallActivity service.
type HallActivityServer interface {
	// 客户端登录后获取红包相关的数据
	OnUserLogin(context.Context, *UserLoginReq) (*empty.Empty, error)
	// 开红包
	OpenRedEnvelope(context.Context, *HallOpenRedEnvelopesReq) (*HallOpenRedEnvelopesRsp, error)
	// 分享增加可抢红包的次数
	ShareAddCount(context.Context, *ShareAddCountReq) (*ShareData, error)
	// 戳泡泡
	JabBubble(context.Context, *HallBubbleReq) (*HallBubbleResp, error)
	// 查询体验场活动信息
	QueryGameActivityInfo(context.Context, *QueryGameActivityInfoReq) (*QueryGameActivityInfoRsp, error)
	// 更新体验场活动次数信息
	UpdateGameActivityInfo(context.Context, *UpdateGameActivityInfoReq) (*empty.Empty, error)
}

// UnimplementedHallActivityServer can be embedded to have forward compatible implementations.
type UnimplementedHallActivityServer struct {
}

func (*UnimplementedHallActivityServer) OnUserLogin(ctx context.Context, req *UserLoginReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUserLogin not implemented")
}
func (*UnimplementedHallActivityServer) OpenRedEnvelope(ctx context.Context, req *HallOpenRedEnvelopesReq) (*HallOpenRedEnvelopesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenRedEnvelope not implemented")
}
func (*UnimplementedHallActivityServer) ShareAddCount(ctx context.Context, req *ShareAddCountReq) (*ShareData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareAddCount not implemented")
}
func (*UnimplementedHallActivityServer) JabBubble(ctx context.Context, req *HallBubbleReq) (*HallBubbleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JabBubble not implemented")
}
func (*UnimplementedHallActivityServer) QueryGameActivityInfo(ctx context.Context, req *QueryGameActivityInfoReq) (*QueryGameActivityInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGameActivityInfo not implemented")
}
func (*UnimplementedHallActivityServer) UpdateGameActivityInfo(ctx context.Context, req *UpdateGameActivityInfoReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameActivityInfo not implemented")
}

func RegisterHallActivityServer(s *grpc.Server, srv HallActivityServer) {
	s.RegisterService(&_HallActivity_serviceDesc, srv)
}

func _HallActivity_OnUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallActivityServer).OnUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HallActivity.service.v1.HallActivity/OnUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallActivityServer).OnUserLogin(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallActivity_OpenRedEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HallOpenRedEnvelopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallActivityServer).OpenRedEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HallActivity.service.v1.HallActivity/OpenRedEnvelope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallActivityServer).OpenRedEnvelope(ctx, req.(*HallOpenRedEnvelopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallActivity_ShareAddCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareAddCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallActivityServer).ShareAddCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HallActivity.service.v1.HallActivity/ShareAddCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallActivityServer).ShareAddCount(ctx, req.(*ShareAddCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallActivity_JabBubble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HallBubbleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallActivityServer).JabBubble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HallActivity.service.v1.HallActivity/JabBubble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallActivityServer).JabBubble(ctx, req.(*HallBubbleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallActivity_QueryGameActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGameActivityInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallActivityServer).QueryGameActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HallActivity.service.v1.HallActivity/QueryGameActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallActivityServer).QueryGameActivityInfo(ctx, req.(*QueryGameActivityInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallActivity_UpdateGameActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameActivityInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallActivityServer).UpdateGameActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HallActivity.service.v1.HallActivity/UpdateGameActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallActivityServer).UpdateGameActivityInfo(ctx, req.(*UpdateGameActivityInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HallActivity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HallActivity.service.v1.HallActivity",
	HandlerType: (*HallActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnUserLogin",
			Handler:    _HallActivity_OnUserLogin_Handler,
		},
		{
			MethodName: "OpenRedEnvelope",
			Handler:    _HallActivity_OpenRedEnvelope_Handler,
		},
		{
			MethodName: "ShareAddCount",
			Handler:    _HallActivity_ShareAddCount_Handler,
		},
		{
			MethodName: "JabBubble",
			Handler:    _HallActivity_JabBubble_Handler,
		},
		{
			MethodName: "QueryGameActivityInfo",
			Handler:    _HallActivity_QueryGameActivityInfo_Handler,
		},
		{
			MethodName: "UpdateGameActivityInfo",
			Handler:    _HallActivity_UpdateGameActivityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *UserLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HallOpenRedEnvelopesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallOpenRedEnvelopesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HallOpenRedEnvelopesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nickname == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Nickname)
		copy(dAtA[i:], *m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(*m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Avata == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Avata)
		copy(dAtA[i:], *m.Avata)
		i = encodeVarintApi(dAtA, i, uint64(len(*m.Avata)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserDbid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HallOpenRedEnvelopesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallOpenRedEnvelopesRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HallOpenRedEnvelopesRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.RedEnvelopesInfo != nil {
		{
			size, err := m.RedEnvelopesInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserCoin != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserCoin))
		i--
		dAtA[i] = 0x18
	}
	if m.RedEnvelopesCount != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.RedEnvelopesCount))
		i--
		dAtA[i] = 0x10
	}
	if m.BonusPool != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.BonusPool))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RedEnvelopesInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedEnvelopesInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedEnvelopesInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GrandPrize != nil {
		i--
		if *m.GrandPrize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.LuckType != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.LuckType))
		i--
		dAtA[i] = 0x40
	}
	if m.LuckCoin != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.LuckCoin))
		i--
		dAtA[i] = 0x38
	}
	if m.Coin != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.Coin))
		i--
		dAtA[i] = 0x30
	}
	if m.Data != nil {
		i -= len(*m.Data)
		copy(dAtA[i:], *m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(*m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Tick != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.Tick))
		i--
		dAtA[i] = 0x20
	}
	if m.Nickname != nil {
		i -= len(*m.Nickname)
		copy(dAtA[i:], *m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(*m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Avata != nil {
		i -= len(*m.Avata)
		copy(dAtA[i:], *m.Avata)
		i = encodeVarintApi(dAtA, i, uint64(len(*m.Avata)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserDbid != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HallRedEnvelopesInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallRedEnvelopesInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HallRedEnvelopesInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LuckyNum != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.LuckyNum))
		i--
		dAtA[i] = 0x18
	}
	if m.RedEnvelopesCount != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.RedEnvelopesCount))
		i--
		dAtA[i] = 0x10
	}
	if m.UserDbid != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HallRedEnvelopesRecordRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallRedEnvelopesRecordRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HallRedEnvelopesRecordRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EType != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.EType))
		i--
		dAtA[i] = 0x18
	}
	if m.Idx != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.Idx))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GrandPrizeRecore) > 0 {
		for iNdEx := len(m.GrandPrizeRecore) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GrandPrizeRecore[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HallRedEnvelopesNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallRedEnvelopesNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HallRedEnvelopesNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RedEnvelopesInfo != nil {
		{
			size, err := m.RedEnvelopesInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LuckNumber != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.LuckNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareAddCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareAddCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareAddCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserDbid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Share != nil {
		i--
		if *m.Share {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UserDbid != nil {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HallBubbleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallBubbleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HallBubbleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BublesId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.BublesId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserDbid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HallBubbleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallBubbleResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HallBubbleResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BublesId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.BublesId))
		i--
		dAtA[i] = 0x20
	}
	if m.CanGet != nil {
		i--
		if *m.CanGet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.UserDbid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGameActivityInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGameActivityInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGameActivityInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserDbid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGameActivityInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGameActivityInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGameActivityInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		i -= len(*m.Data)
		copy(dAtA[i:], *m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(*m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserDbid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGameActivityInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGameActivityInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGameActivityInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.UserDbid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.UserDbid))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintApi(dAtA, i, uint64(*m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != nil {
		n += 1 + sovApi(uint64(*m.UserID))
	}
	if m.GameID != nil {
		n += 1 + sovApi(uint64(*m.GameID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HallOpenRedEnvelopesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.Avata != nil {
		l = len(*m.Avata)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Nickname != nil {
		l = len(*m.Nickname)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HallOpenRedEnvelopesRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BonusPool != nil {
		n += 1 + sovApi(uint64(*m.BonusPool))
	}
	if m.RedEnvelopesCount != nil {
		n += 1 + sovApi(uint64(*m.RedEnvelopesCount))
	}
	if m.UserCoin != nil {
		n += 1 + sovApi(uint64(*m.UserCoin))
	}
	if m.RedEnvelopesInfo != nil {
		l = m.RedEnvelopesInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovApi(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedEnvelopesInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.Avata != nil {
		l = len(*m.Avata)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Nickname != nil {
		l = len(*m.Nickname)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Tick != nil {
		n += 1 + sovApi(uint64(*m.Tick))
	}
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Coin != nil {
		n += 1 + sovApi(uint64(*m.Coin))
	}
	if m.LuckCoin != nil {
		n += 1 + sovApi(uint64(*m.LuckCoin))
	}
	if m.LuckType != nil {
		n += 1 + sovApi(uint64(*m.LuckType))
	}
	if m.GrandPrize != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HallRedEnvelopesInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.RedEnvelopesCount != nil {
		n += 1 + sovApi(uint64(*m.RedEnvelopesCount))
	}
	if m.LuckyNum != nil {
		n += 1 + sovApi(uint64(*m.LuckyNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HallRedEnvelopesRecordRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GrandPrizeRecore) > 0 {
		for _, e := range m.GrandPrizeRecore {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Idx != nil {
		n += 1 + sovApi(uint64(*m.Idx))
	}
	if m.EType != nil {
		n += 1 + sovApi(uint64(*m.EType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HallRedEnvelopesNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LuckNumber != nil {
		n += 1 + sovApi(uint64(*m.LuckNumber))
	}
	if m.RedEnvelopesInfo != nil {
		l = m.RedEnvelopesInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareAddCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.Share != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HallBubbleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.BublesId != nil {
		n += 1 + sovApi(uint64(*m.BublesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HallBubbleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.Count != nil {
		n += 1 + sovApi(uint64(*m.Count))
	}
	if m.CanGet != nil {
		n += 2
	}
	if m.BublesId != nil {
		n += 1 + sovApi(uint64(*m.BublesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryGameActivityInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != nil {
		n += 1 + sovApi(uint64(*m.GameId))
	}
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryGameActivityInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovApi(uint64(*m.Result))
	}
	if m.GameId != nil {
		n += 1 + sovApi(uint64(*m.GameId))
	}
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateGameActivityInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != nil {
		n += 1 + sovApi(uint64(*m.GameId))
	}
	if m.UserDbid != nil {
		n += 1 + sovApi(uint64(*m.UserDbid))
	}
	if m.Count != nil {
		n += 1 + sovApi(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserLoginReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserID = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameID = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallOpenRedEnvelopesReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallOpenRedEnvelopesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallOpenRedEnvelopesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Avata = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Nickname = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallOpenRedEnvelopesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallOpenRedEnvelopesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallOpenRedEnvelopesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusPool", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BonusPool = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedEnvelopesCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedEnvelopesCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserCoin = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedEnvelopesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedEnvelopesInfo == nil {
				m.RedEnvelopesInfo = &RedEnvelopesInfo{}
			}
			if err := m.RedEnvelopesInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedEnvelopesInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedEnvelopesInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedEnvelopesInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Avata = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Nickname = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tick = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckCoin = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandPrize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.GrandPrize = &b
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallRedEnvelopesInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallRedEnvelopesInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallRedEnvelopesInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedEnvelopesCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedEnvelopesCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckyNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallRedEnvelopesRecordRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallRedEnvelopesRecordRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallRedEnvelopesRecordRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandPrizeRecore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrandPrizeRecore = append(m.GrandPrizeRecore, &RedEnvelopesInfo{})
			if err := m.GrandPrizeRecore[len(m.GrandPrizeRecore)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Idx = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallRedEnvelopesNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallRedEnvelopesNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallRedEnvelopesNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckNumber", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LuckNumber = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedEnvelopesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedEnvelopesInfo == nil {
				m.RedEnvelopesInfo = &RedEnvelopesInfo{}
			}
			if err := m.RedEnvelopesInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareAddCountReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareAddCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareAddCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Share = &b
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallBubbleReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallBubbleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallBubbleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BublesId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BublesId = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallBubbleResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallBubbleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallBubbleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanGet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CanGet = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BublesId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BublesId = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGameActivityInfoReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGameActivityInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGameActivityInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGameActivityInfoRsp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGameActivityInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGameActivityInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameId = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGameActivityInfoReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGameActivityInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGameActivityInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserDbid = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
