// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddPlayerPropReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	PropID               int64    `protobuf:"varint,3,opt,name=PropID,proto3" json:"PropID" form:"PropID" validate:"required"`
	PropNum              int64    `protobuf:"varint,4,opt,name=PropNum,proto3" json:"PropNum" form:"PropNum" validate:"required"`
	Proptype             int64    `protobuf:"varint,5,opt,name=Proptype,proto3" json:"Proptype" form:"Proptype" validate:"required"`
	OnlyValue            string   `protobuf:"bytes,6,opt,name=OnlyValue,proto3" json:"OnlyValue" form:"OnlyValue" validate:"required"`
	SourceType           string   `protobuf:"bytes,7,opt,name=SourceType,proto3" json:"SourceType" form:"SourceType"`
	Remark               string   `protobuf:"bytes,8,opt,name=Remark,proto3" json:"Remark" form:"Remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPlayerPropReq) Reset()         { *m = AddPlayerPropReq{} }
func (m *AddPlayerPropReq) String() string { return proto.CompactTextString(m) }
func (*AddPlayerPropReq) ProtoMessage()    {}
func (*AddPlayerPropReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *AddPlayerPropReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerPropReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerPropReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerPropReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerPropReq.Merge(m, src)
}
func (m *AddPlayerPropReq) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerPropReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerPropReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerPropReq proto.InternalMessageInfo

type AddPlayerPropResp struct {
	PropID               int64    `protobuf:"varint,1,opt,name=PropID,proto3" json:"PropID" form:"PropID"`
	PropBeforeNum        int64    `protobuf:"varint,2,opt,name=PropBeforeNum,proto3" json:"PropBeforeNum" form:"PropBeforeNum"`
	PropAfterNum         int64    `protobuf:"varint,3,opt,name=PropAfterNum,proto3" json:"PropAfterNum" form:"PropAfterNum"`
	SourceType           string   `protobuf:"bytes,4,opt,name=SourceType,proto3" json:"SourceType" form:"SourceType"`
	Remark               string   `protobuf:"bytes,5,opt,name=Remark,proto3" json:"Remark" form:"Remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPlayerPropResp) Reset()         { *m = AddPlayerPropResp{} }
func (m *AddPlayerPropResp) String() string { return proto.CompactTextString(m) }
func (*AddPlayerPropResp) ProtoMessage()    {}
func (*AddPlayerPropResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *AddPlayerPropResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPlayerPropResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPlayerPropResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPlayerPropResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlayerPropResp.Merge(m, src)
}
func (m *AddPlayerPropResp) XXX_Size() int {
	return m.Size()
}
func (m *AddPlayerPropResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlayerPropResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlayerPropResp proto.InternalMessageInfo

type QueryPlayerPropInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryPlayerPropInfoReq) Reset()         { *m = QueryPlayerPropInfoReq{} }
func (m *QueryPlayerPropInfoReq) String() string { return proto.CompactTextString(m) }
func (*QueryPlayerPropInfoReq) ProtoMessage()    {}
func (*QueryPlayerPropInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *QueryPlayerPropInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlayerPropInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlayerPropInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlayerPropInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlayerPropInfoReq.Merge(m, src)
}
func (m *QueryPlayerPropInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlayerPropInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlayerPropInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlayerPropInfoReq proto.InternalMessageInfo

type PropInfo struct {
	PropID               int64    `protobuf:"varint,1,opt,name=PropID,proto3" json:"PropID" form:"PropID"`
	PropNum              int64    `protobuf:"varint,2,opt,name=PropNum,proto3" json:"PropNum" form:"PropNum"`
	PropType             int32    `protobuf:"varint,3,opt,name=PropType,proto3" json:"PropType" form:"PropType"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropInfo) Reset()         { *m = PropInfo{} }
func (m *PropInfo) String() string { return proto.CompactTextString(m) }
func (*PropInfo) ProtoMessage()    {}
func (*PropInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *PropInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PropInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PropInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PropInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropInfo.Merge(m, src)
}
func (m *PropInfo) XXX_Size() int {
	return m.Size()
}
func (m *PropInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PropInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PropInfo proto.InternalMessageInfo

type QueryPlayerPropInfoResp struct {
	PropList             []*PropInfo `protobuf:"bytes,1,rep,name=PropList,proto3" json:"PropList" form:"PropList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *QueryPlayerPropInfoResp) Reset()         { *m = QueryPlayerPropInfoResp{} }
func (m *QueryPlayerPropInfoResp) String() string { return proto.CompactTextString(m) }
func (*QueryPlayerPropInfoResp) ProtoMessage()    {}
func (*QueryPlayerPropInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *QueryPlayerPropInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlayerPropInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlayerPropInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlayerPropInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlayerPropInfoResp.Merge(m, src)
}
func (m *QueryPlayerPropInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlayerPropInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlayerPropInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlayerPropInfoResp proto.InternalMessageInfo

type ConsumePlayerPropReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	PropID               int64    `protobuf:"varint,3,opt,name=PropID,proto3" json:"PropID" form:"PropID" validate:"required"`
	PropNum              int64    `protobuf:"varint,4,opt,name=PropNum,proto3" json:"PropNum" form:"PropNum" validate:"required"`
	OnlyValue            string   `protobuf:"bytes,5,opt,name=OnlyValue,proto3" json:"OnlyValue" form:"OnlyValue" validate:"required"`
	SourceType           string   `protobuf:"bytes,6,opt,name=SourceType,proto3" json:"SourceType" form:"SourceType"`
	Remark               string   `protobuf:"bytes,7,opt,name=Remark,proto3" json:"Remark" form:"Remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumePlayerPropReq) Reset()         { *m = ConsumePlayerPropReq{} }
func (m *ConsumePlayerPropReq) String() string { return proto.CompactTextString(m) }
func (*ConsumePlayerPropReq) ProtoMessage()    {}
func (*ConsumePlayerPropReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *ConsumePlayerPropReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumePlayerPropReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumePlayerPropReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumePlayerPropReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumePlayerPropReq.Merge(m, src)
}
func (m *ConsumePlayerPropReq) XXX_Size() int {
	return m.Size()
}
func (m *ConsumePlayerPropReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumePlayerPropReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumePlayerPropReq proto.InternalMessageInfo

type ConsumePlayerPropResp struct {
	PropID               int64    `protobuf:"varint,1,opt,name=PropID,proto3" json:"PropID" form:"PropID"`
	PropBeforeNum        int64    `protobuf:"varint,2,opt,name=PropBeforeNum,proto3" json:"PropBeforeNum" form:"PropBeforeNum"`
	PropAfterNum         int64    `protobuf:"varint,3,opt,name=PropAfterNum,proto3" json:"PropAfterNum" form:"PropAfterNum"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumePlayerPropResp) Reset()         { *m = ConsumePlayerPropResp{} }
func (m *ConsumePlayerPropResp) String() string { return proto.CompactTextString(m) }
func (*ConsumePlayerPropResp) ProtoMessage()    {}
func (*ConsumePlayerPropResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ConsumePlayerPropResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumePlayerPropResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumePlayerPropResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumePlayerPropResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumePlayerPropResp.Merge(m, src)
}
func (m *ConsumePlayerPropResp) XXX_Size() int {
	return m.Size()
}
func (m *ConsumePlayerPropResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumePlayerPropResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumePlayerPropResp proto.InternalMessageInfo

type RechargeGiftItemsReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	RechargeAmount       int32    `protobuf:"varint,3,opt,name=RechargeAmount,proto3" json:"RechargeAmount" form:"RechargeAmount" validate:"required"`
	OnlyValue            string   `protobuf:"bytes,4,opt,name=OnlyValue,proto3" json:"OnlyValue" form:"OnlyValue" validate:"required"`
	SourceType           string   `protobuf:"bytes,5,opt,name=SourceType,proto3" json:"SourceType" form:"SourceType"`
	Remark               string   `protobuf:"bytes,6,opt,name=Remark,proto3" json:"Remark" form:"Remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RechargeGiftItemsReq) Reset()         { *m = RechargeGiftItemsReq{} }
func (m *RechargeGiftItemsReq) String() string { return proto.CompactTextString(m) }
func (*RechargeGiftItemsReq) ProtoMessage()    {}
func (*RechargeGiftItemsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *RechargeGiftItemsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeGiftItemsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeGiftItemsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeGiftItemsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeGiftItemsReq.Merge(m, src)
}
func (m *RechargeGiftItemsReq) XXX_Size() int {
	return m.Size()
}
func (m *RechargeGiftItemsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeGiftItemsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeGiftItemsReq proto.InternalMessageInfo

type Prop struct {
	PropID               int64    `protobuf:"varint,1,opt,name=PropID,proto3" json:"PropID" form:"PropID"`
	PropNum              int64    `protobuf:"varint,2,opt,name=PropNum,proto3" json:"PropNum" form:"PropNum"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Prop) Reset()         { *m = Prop{} }
func (m *Prop) String() string { return proto.CompactTextString(m) }
func (*Prop) ProtoMessage()    {}
func (*Prop) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *Prop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Prop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prop.Merge(m, src)
}
func (m *Prop) XXX_Size() int {
	return m.Size()
}
func (m *Prop) XXX_DiscardUnknown() {
	xxx_messageInfo_Prop.DiscardUnknown(m)
}

var xxx_messageInfo_Prop proto.InternalMessageInfo

type RechargeGiftItemsResp struct {
	RechargeAmount       int32    `protobuf:"varint,1,opt,name=RechargeAmount,proto3" json:"RechargeAmount" form:"RechargeAmount"`
	HandselNum           int64    `protobuf:"varint,2,opt,name=HandselNum,proto3" json:"HandselNum" form:"HandselNum"`
	TotalNum             int64    `protobuf:"varint,3,opt,name=TotalNum,proto3" json:"TotalNum" form:"TotalNum"`
	PropList             []*Prop  `protobuf:"bytes,4,rep,name=PropList,proto3" json:"PropList" form:"PropList"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RechargeGiftItemsResp) Reset()         { *m = RechargeGiftItemsResp{} }
func (m *RechargeGiftItemsResp) String() string { return proto.CompactTextString(m) }
func (*RechargeGiftItemsResp) ProtoMessage()    {}
func (*RechargeGiftItemsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *RechargeGiftItemsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeGiftItemsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeGiftItemsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeGiftItemsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeGiftItemsResp.Merge(m, src)
}
func (m *RechargeGiftItemsResp) XXX_Size() int {
	return m.Size()
}
func (m *RechargeGiftItemsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeGiftItemsResp.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeGiftItemsResp proto.InternalMessageInfo

type QueryPlayerRechargeInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID" form:"UserID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryPlayerRechargeInfoReq) Reset()         { *m = QueryPlayerRechargeInfoReq{} }
func (m *QueryPlayerRechargeInfoReq) String() string { return proto.CompactTextString(m) }
func (*QueryPlayerRechargeInfoReq) ProtoMessage()    {}
func (*QueryPlayerRechargeInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *QueryPlayerRechargeInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlayerRechargeInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlayerRechargeInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlayerRechargeInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlayerRechargeInfoReq.Merge(m, src)
}
func (m *QueryPlayerRechargeInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlayerRechargeInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlayerRechargeInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlayerRechargeInfoReq proto.InternalMessageInfo

type RechargeInfo struct {
	RechargeAmount       int32    `protobuf:"varint,1,opt,name=RechargeAmount,proto3" json:"RechargeAmount" form:"RechargeAmount"`
	HandselNum           int64    `protobuf:"varint,2,opt,name=HandselNum,proto3" json:"HandselNum" form:"HandselNum"`
	TotalNum             int64    `protobuf:"varint,3,opt,name=TotalNum,proto3" json:"TotalNum" form:"TotalNum"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RechargeInfo) Reset()         { *m = RechargeInfo{} }
func (m *RechargeInfo) String() string { return proto.CompactTextString(m) }
func (*RechargeInfo) ProtoMessage()    {}
func (*RechargeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *RechargeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeInfo.Merge(m, src)
}
func (m *RechargeInfo) XXX_Size() int {
	return m.Size()
}
func (m *RechargeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeInfo proto.InternalMessageInfo

type QueryPlayerRechargeInfoResp struct {
	RechargeInfoList     []*RechargeInfo `protobuf:"bytes,1,rep,name=RechargeInfoList,proto3" json:"RechargeInfoList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryPlayerRechargeInfoResp) Reset()         { *m = QueryPlayerRechargeInfoResp{} }
func (m *QueryPlayerRechargeInfoResp) String() string { return proto.CompactTextString(m) }
func (*QueryPlayerRechargeInfoResp) ProtoMessage()    {}
func (*QueryPlayerRechargeInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *QueryPlayerRechargeInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPlayerRechargeInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPlayerRechargeInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPlayerRechargeInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPlayerRechargeInfoResp.Merge(m, src)
}
func (m *QueryPlayerRechargeInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryPlayerRechargeInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPlayerRechargeInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPlayerRechargeInfoResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddPlayerPropReq)(nil), "gameprop_v1.service.v1.AddPlayerPropReq")
	proto.RegisterType((*AddPlayerPropResp)(nil), "gameprop_v1.service.v1.AddPlayerPropResp")
	proto.RegisterType((*QueryPlayerPropInfoReq)(nil), "gameprop_v1.service.v1.QueryPlayerPropInfoReq")
	proto.RegisterType((*PropInfo)(nil), "gameprop_v1.service.v1.PropInfo")
	proto.RegisterType((*QueryPlayerPropInfoResp)(nil), "gameprop_v1.service.v1.QueryPlayerPropInfoResp")
	proto.RegisterType((*ConsumePlayerPropReq)(nil), "gameprop_v1.service.v1.ConsumePlayerPropReq")
	proto.RegisterType((*ConsumePlayerPropResp)(nil), "gameprop_v1.service.v1.ConsumePlayerPropResp")
	proto.RegisterType((*RechargeGiftItemsReq)(nil), "gameprop_v1.service.v1.RechargeGiftItemsReq")
	proto.RegisterType((*Prop)(nil), "gameprop_v1.service.v1.Prop")
	proto.RegisterType((*RechargeGiftItemsResp)(nil), "gameprop_v1.service.v1.RechargeGiftItemsResp")
	proto.RegisterType((*QueryPlayerRechargeInfoReq)(nil), "gameprop_v1.service.v1.QueryPlayerRechargeInfoReq")
	proto.RegisterType((*RechargeInfo)(nil), "gameprop_v1.service.v1.RechargeInfo")
	proto.RegisterType((*QueryPlayerRechargeInfoResp)(nil), "gameprop_v1.service.v1.QueryPlayerRechargeInfoResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1090 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xee, 0xc4, 0x8e, 0xd3, 0x4c, 0x9b, 0xd2, 0x6c, 0x93, 0x60, 0x9c, 0xe0, 0x31, 0x93, 0x40,
	0x1d, 0x95, 0xee, 0x2a, 0x89, 0x00, 0xa9, 0x1c, 0x50, 0x3e, 0x50, 0xb0, 0x8a, 0x9a, 0xb0, 0x29,
	0x95, 0x40, 0x42, 0xd5, 0x26, 0x1e, 0xbb, 0x2b, 0xbc, 0x9e, 0xed, 0x7e, 0x44, 0xf8, 0xca, 0x11,
	0x89, 0x13, 0x12, 0xe2, 0x02, 0x3f, 0x80, 0x03, 0x17, 0xc4, 0x7f, 0x28, 0x37, 0x24, 0x6e, 0x1c,
	0x56, 0x21, 0xc0, 0xc5, 0x47, 0xff, 0x02, 0x34, 0x33, 0xbb, 0x9e, 0xdd, 0xf5, 0x2e, 0x72, 0x1a,
	0x15, 0x45, 0x55, 0x6f, 0x3b, 0xcf, 0xbc, 0xf3, 0xcc, 0xbb, 0xf3, 0xbc, 0x1f, 0x33, 0x70, 0xda,
	0xb0, 0x4d, 0xd5, 0x76, 0xa8, 0x47, 0x95, 0x85, 0xb6, 0x61, 0x11, 0xdb, 0xa1, 0xf6, 0xc3, 0xe3,
	0x35, 0xd5, 0x25, 0xce, 0xb1, 0x79, 0x44, 0xd4, 0xe3, 0xb5, 0xca, 0xed, 0xb6, 0xe9, 0x3d, 0xf2,
	0x0f, 0xd5, 0x23, 0x6a, 0x69, 0x6d, 0xda, 0xa6, 0x1a, 0x37, 0x3f, 0xf4, 0x5b, 0x7c, 0xc4, 0x07,
	0xfc, 0x4b, 0xd0, 0x54, 0x16, 0xdb, 0x94, 0xb6, 0x3b, 0x44, 0x5a, 0x11, 0xcb, 0xf6, 0x7a, 0xe1,
	0xe4, 0x52, 0x38, 0x69, 0xd8, 0xa6, 0x66, 0x74, 0xbb, 0xd4, 0x33, 0x3c, 0x93, 0x76, 0x5d, 0x31,
	0x8b, 0xff, 0x28, 0xc2, 0xeb, 0x9b, 0xcd, 0xe6, 0x7e, 0xc7, 0xe8, 0x11, 0x67, 0xdf, 0xa1, 0xb6,
	0x4e, 0x1e, 0x2b, 0xbb, 0xb0, 0xb4, 0x6b, 0x58, 0xa4, 0xb1, 0x53, 0x06, 0x35, 0x50, 0x9f, 0xdc,
	0xd2, 0xfa, 0x01, 0x0a, 0x91, 0x41, 0x80, 0x5e, 0x6b, 0x51, 0xc7, 0xba, 0x83, 0xc5, 0x18, 0xd7,
	0x8e, 0x8d, 0x8e, 0xd9, 0x34, 0x3c, 0x72, 0x07, 0x3b, 0xe4, 0xb1, 0x6f, 0x3a, 0xa4, 0x89, 0xf5,
	0xd0, 0x98, 0x11, 0x7d, 0xec, 0x12, 0xa7, 0xb1, 0x53, 0x9e, 0xa8, 0x81, 0x7a, 0x41, 0x10, 0x09,
	0x44, 0x12, 0x89, 0x71, 0x0e, 0x91, 0x98, 0x64, 0x44, 0xcc, 0xb9, 0xc6, 0x4e, 0xb9, 0x20, 0x89,
	0x04, 0x22, 0x89, 0xc4, 0x38, 0x87, 0x48, 0x4c, 0x2a, 0x77, 0xe1, 0x14, 0xfb, 0xba, 0xe7, 0x5b,
	0xe5, 0x22, 0x67, 0x5a, 0xeb, 0x07, 0x28, 0x82, 0x06, 0x01, 0xc2, 0x92, 0xea, 0x9e, 0x6f, 0x65,
	0x73, 0x45, 0xe6, 0xca, 0x1e, 0xbc, 0xcc, 0x3e, 0xbd, 0x9e, 0x4d, 0xca, 0x93, 0x9c, 0x6d, 0xa3,
	0x1f, 0xa0, 0x21, 0x36, 0x08, 0xd0, 0xb2, 0xa4, 0x63, 0x48, 0x36, 0xdf, 0x70, 0x81, 0x72, 0x00,
	0xa7, 0xf7, 0xba, 0x9d, 0xde, 0x03, 0xa3, 0xe3, 0x93, 0x72, 0xa9, 0x06, 0xea, 0xd3, 0x5b, 0x6f,
	0xf5, 0x03, 0x24, 0xc1, 0x41, 0x80, 0x56, 0x04, 0xe5, 0x10, 0xca, 0xe6, 0x94, 0x4b, 0x94, 0x6d,
	0x08, 0x0f, 0xa8, 0xef, 0x1c, 0x91, 0xfb, 0xcc, 0xcf, 0x29, 0xce, 0xba, 0xdc, 0x0f, 0x50, 0x0c,
	0x1d, 0x04, 0x68, 0x56, 0xd0, 0x4a, 0x0c, 0xeb, 0x31, 0x03, 0x65, 0x03, 0x96, 0x74, 0x62, 0x19,
	0xce, 0xe7, 0xe5, 0xcb, 0x9c, 0x60, 0x91, 0x09, 0x20, 0x90, 0x41, 0x80, 0x66, 0xc4, 0x62, 0x31,
	0xc6, 0x7a, 0x38, 0x81, 0x4f, 0x26, 0xe0, 0x6c, 0x2a, 0xb8, 0x5c, 0x9b, 0x51, 0x85, 0x5a, 0x02,
	0x7e, 0x66, 0x8b, 0x09, 0x2d, 0x67, 0x12, 0x5a, 0x0e, 0x75, 0xdb, 0x83, 0x33, 0xec, 0x6b, 0x8b,
	0xb4, 0xa8, 0x43, 0x98, 0x7a, 0x22, 0xa0, 0x56, 0xfb, 0x01, 0x4a, 0x4e, 0x0c, 0x02, 0x34, 0x27,
	0x29, 0x86, 0x30, 0xd6, 0x93, 0x66, 0xca, 0x5d, 0x78, 0x95, 0x01, 0x9b, 0x2d, 0x8f, 0x38, 0x8c,
	0x4f, 0xc4, 0xd5, 0xcd, 0x7e, 0x80, 0x12, 0xf8, 0x20, 0x40, 0x37, 0x24, 0x5d, 0x84, 0x62, 0x3d,
	0x61, 0x94, 0x3a, 0xe2, 0xe2, 0x79, 0x8f, 0x78, 0x72, 0xfc, 0x23, 0xfe, 0x11, 0xc0, 0x85, 0x8f,
	0x7c, 0xe2, 0xf4, 0xe4, 0x21, 0x37, 0xba, 0x2d, 0x7a, 0x21, 0xb3, 0x18, 0xff, 0x02, 0x44, 0xc2,
	0x30, 0x0f, 0x9f, 0x2e, 0x0c, 0xde, 0x91, 0xe9, 0x2b, 0x7c, 0x79, 0x35, 0x99, 0xbe, 0xd7, 0x92,
	0xe9, 0x2b, 0x53, 0xf5, 0x5d, 0xb1, 0x33, 0xd7, 0xa7, 0xc0, 0x8f, 0x03, 0x45, 0xa9, 0x1a, 0xaa,
	0xf3, 0x92, 0x5c, 0x2a, 0xb4, 0x19, 0x4e, 0xe2, 0x2f, 0xe0, 0xcb, 0x99, 0x67, 0xec, 0xda, 0xca,
	0x67, 0x82, 0xf7, 0x43, 0xd3, 0xf5, 0xca, 0xa0, 0x56, 0xa8, 0x5f, 0x59, 0xaf, 0xa9, 0xd9, 0x45,
	0x5d, 0x8d, 0xd6, 0xc9, 0x9d, 0xd9, 0xaa, 0xe4, 0xce, 0x0c, 0x09, 0x77, 0xe6, 0x9f, 0x5f, 0x17,
	0xe1, 0xdc, 0x36, 0xed, 0xba, 0xbe, 0x45, 0x5e, 0x94, 0xe8, 0xa7, 0x29, 0xd1, 0x89, 0x8a, 0x3a,
	0xf9, 0x4c, 0x2a, 0x6a, 0xe9, 0xbc, 0xe9, 0x3e, 0x35, 0x7e, 0xba, 0xf7, 0x01, 0x9c, 0xcf, 0x88,
	0x87, 0xe7, 0xb2, 0xaa, 0xe2, 0x93, 0x02, 0x9c, 0xd3, 0xc9, 0xd1, 0x23, 0xc3, 0x69, 0x93, 0x5d,
	0xb3, 0xe5, 0x35, 0x3c, 0x62, 0xb9, 0x17, 0x33, 0xf8, 0xdb, 0xf0, 0x5a, 0xe4, 0xe9, 0xa6, 0x45,
	0xfd, 0xae, 0x17, 0x16, 0x99, 0xf7, 0xfa, 0x01, 0x4a, 0xcd, 0x0c, 0x02, 0xb4, 0x1a, 0x89, 0x1b,
	0xc7, 0xb3, 0x37, 0x48, 0x2d, 0x4e, 0xc6, 0x73, 0xf1, 0x99, 0xc4, 0xf3, 0xe4, 0x79, 0xe3, 0xb9,
	0x34, 0x7e, 0x3c, 0x7b, 0xb0, 0xc8, 0x24, 0xff, 0x7f, 0x9b, 0x01, 0xfe, 0x75, 0x02, 0xce, 0x67,
	0x04, 0x96, 0x6b, 0x2b, 0x07, 0x23, 0x3a, 0x8a, 0x08, 0xbb, 0x95, 0xa9, 0xe3, 0x7c, 0xa6, 0x8e,
	0x23, 0x9a, 0x6d, 0x43, 0xf8, 0x81, 0xd1, 0x6d, 0xba, 0xa4, 0x23, 0x5d, 0xe5, 0xc7, 0x2b, 0x51,
	0x79, 0xbc, 0x12, 0xc3, 0x7a, 0xcc, 0x80, 0x35, 0xb0, 0xfb, 0xd4, 0x33, 0x3a, 0x32, 0xab, 0x78,
	0x1b, 0x89, 0x30, 0xd9, 0x46, 0x22, 0x04, 0xeb, 0xc3, 0x49, 0xe5, 0x93, 0x58, 0x97, 0x2a, 0xf2,
	0x2e, 0xb5, 0xf4, 0x5f, 0x5d, 0xea, 0x2c, 0x1d, 0xea, 0x27, 0x00, 0x2b, 0xb1, 0xe6, 0x18, 0xfd,
	0xfa, 0xc5, 0xbd, 0x84, 0xfc, 0x03, 0xe0, 0xd5, 0xb8, 0x97, 0xcf, 0xa9, 0xe6, 0x98, 0xc2, 0xc5,
	0x5c, 0x5d, 0x5c, 0x5b, 0xd9, 0x87, 0xd7, 0xe3, 0x58, 0xec, 0x02, 0xb3, 0x92, 0x17, 0x1a, 0x09,
	0x8e, 0x91, 0xd5, 0xeb, 0xa7, 0x25, 0x78, 0x85, 0x89, 0xc5, 0x42, 0xe3, 0xe1, 0x83, 0x35, 0xe5,
	0x6d, 0x58, 0xdc, 0x37, 0xbb, 0x6d, 0x65, 0x41, 0x15, 0x2f, 0x50, 0x35, 0x7a, 0x9e, 0xaa, 0xef,
	0xb3, 0xe7, 0x69, 0x25, 0x07, 0x57, 0xbe, 0x02, 0xa9, 0x57, 0x03, 0x57, 0xa9, 0x9e, 0xe7, 0x55,
	0xfa, 0xf5, 0x5a, 0x59, 0x1d, 0xd3, 0xd2, 0xb5, 0x71, 0xed, 0xcb, 0xdf, 0xff, 0xfe, 0x66, 0xa2,
	0x82, 0xcb, 0x5a, 0xe4, 0xb8, 0xb6, 0xd9, 0x6c, 0x6a, 0xd2, 0x4a, 0xf9, 0x01, 0xc0, 0x1b, 0x19,
	0x77, 0x3f, 0x45, 0xcd, 0xdb, 0x24, 0xfb, 0x32, 0x5e, 0xd1, 0xce, 0x64, 0xef, 0xda, 0xf8, 0x0d,
	0xee, 0x5a, 0x0d, 0x57, 0xa5, 0x6b, 0xdc, 0x54, 0x4b, 0x39, 0xf2, 0x2d, 0x80, 0xb3, 0x23, 0x37,
	0x02, 0xe5, 0xcd, 0xbc, 0xed, 0xb2, 0x2e, 0x93, 0x95, 0xdb, 0x67, 0xb0, 0x76, 0x6d, 0xbc, 0xc2,
	0x5d, 0xab, 0xe2, 0x25, 0xe9, 0x5a, 0x68, 0x18, 0x3f, 0xb9, 0xef, 0x01, 0x9c, 0x1d, 0x29, 0xb2,
	0xf9, 0x8e, 0x65, 0x35, 0xfa, 0x7c, 0xc7, 0x32, 0xab, 0x37, 0xbe, 0xc5, 0x1d, 0x7b, 0x1d, 0x2f,
	0x4b, 0xc7, 0xc2, 0x6c, 0xd2, 0x46, 0x3d, 0xf9, 0x19, 0x24, 0x6e, 0xf5, 0x89, 0x92, 0xb0, 0x3e,
	0x86, 0x5a, 0xa9, 0x4a, 0x57, 0xd9, 0x38, 0xf3, 0x1a, 0xd7, 0xc6, 0x1a, 0xf7, 0x78, 0x15, 0xdf,
	0x4c, 0xab, 0x9c, 0xb3, 0x68, 0xeb, 0x95, 0x27, 0x7f, 0x56, 0x2f, 0x3d, 0x39, 0xad, 0x82, 0xdf,
	0x4e, 0xab, 0xe0, 0xe4, 0xb4, 0x0a, 0xbe, 0xfb, 0xab, 0x7a, 0xe9, 0xd3, 0x82, 0x61, 0x9b, 0x87,
	0x25, 0x9e, 0x47, 0x1b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x86, 0x54, 0x41, 0xae, 0x60, 0x12,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameProp_V1Client is the client API for GameProp_V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameProp_V1Client interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// 添加玩家道具信息
	AddPlayerPropInfo(ctx context.Context, in *AddPlayerPropReq, opts ...grpc.CallOption) (*AddPlayerPropResp, error)
	// 查询玩家道具信息
	QueryPlayerPropInfo(ctx context.Context, in *QueryPlayerPropInfoReq, opts ...grpc.CallOption) (*QueryPlayerPropInfoResp, error)
	// 玩家消耗道具
	ConsumePlayerProp(ctx context.Context, in *ConsumePlayerPropReq, opts ...grpc.CallOption) (*ConsumePlayerPropResp, error)
	// 玩家充值道具赠送
	RechargeGiftItems(ctx context.Context, in *RechargeGiftItemsReq, opts ...grpc.CallOption) (*RechargeGiftItemsResp, error)
	// 查询玩家通知信息
	QueryPlayerRechargeInfo(ctx context.Context, in *QueryPlayerRechargeInfoReq, opts ...grpc.CallOption) (*QueryPlayerRechargeInfoResp, error)
}

type gameProp_V1Client struct {
	cc *grpc.ClientConn
}

func NewGameProp_V1Client(cc *grpc.ClientConn) GameProp_V1Client {
	return &gameProp_V1Client{cc}
}

func (c *gameProp_V1Client) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gameprop_v1.service.v1.GameProp_V1/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProp_V1Client) AddPlayerPropInfo(ctx context.Context, in *AddPlayerPropReq, opts ...grpc.CallOption) (*AddPlayerPropResp, error) {
	out := new(AddPlayerPropResp)
	err := c.cc.Invoke(ctx, "/gameprop_v1.service.v1.GameProp_V1/AddPlayerPropInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProp_V1Client) QueryPlayerPropInfo(ctx context.Context, in *QueryPlayerPropInfoReq, opts ...grpc.CallOption) (*QueryPlayerPropInfoResp, error) {
	out := new(QueryPlayerPropInfoResp)
	err := c.cc.Invoke(ctx, "/gameprop_v1.service.v1.GameProp_V1/QueryPlayerPropInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProp_V1Client) ConsumePlayerProp(ctx context.Context, in *ConsumePlayerPropReq, opts ...grpc.CallOption) (*ConsumePlayerPropResp, error) {
	out := new(ConsumePlayerPropResp)
	err := c.cc.Invoke(ctx, "/gameprop_v1.service.v1.GameProp_V1/ConsumePlayerProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProp_V1Client) RechargeGiftItems(ctx context.Context, in *RechargeGiftItemsReq, opts ...grpc.CallOption) (*RechargeGiftItemsResp, error) {
	out := new(RechargeGiftItemsResp)
	err := c.cc.Invoke(ctx, "/gameprop_v1.service.v1.GameProp_V1/RechargeGiftItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProp_V1Client) QueryPlayerRechargeInfo(ctx context.Context, in *QueryPlayerRechargeInfoReq, opts ...grpc.CallOption) (*QueryPlayerRechargeInfoResp, error) {
	out := new(QueryPlayerRechargeInfoResp)
	err := c.cc.Invoke(ctx, "/gameprop_v1.service.v1.GameProp_V1/QueryPlayerRechargeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameProp_V1Server is the server API for GameProp_V1 service.
type GameProp_V1Server interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// 添加玩家道具信息
	AddPlayerPropInfo(context.Context, *AddPlayerPropReq) (*AddPlayerPropResp, error)
	// 查询玩家道具信息
	QueryPlayerPropInfo(context.Context, *QueryPlayerPropInfoReq) (*QueryPlayerPropInfoResp, error)
	// 玩家消耗道具
	ConsumePlayerProp(context.Context, *ConsumePlayerPropReq) (*ConsumePlayerPropResp, error)
	// 玩家充值道具赠送
	RechargeGiftItems(context.Context, *RechargeGiftItemsReq) (*RechargeGiftItemsResp, error)
	// 查询玩家通知信息
	QueryPlayerRechargeInfo(context.Context, *QueryPlayerRechargeInfoReq) (*QueryPlayerRechargeInfoResp, error)
}

// UnimplementedGameProp_V1Server can be embedded to have forward compatible implementations.
type UnimplementedGameProp_V1Server struct {
}

func (*UnimplementedGameProp_V1Server) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGameProp_V1Server) AddPlayerPropInfo(ctx context.Context, req *AddPlayerPropReq) (*AddPlayerPropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayerPropInfo not implemented")
}
func (*UnimplementedGameProp_V1Server) QueryPlayerPropInfo(ctx context.Context, req *QueryPlayerPropInfoReq) (*QueryPlayerPropInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlayerPropInfo not implemented")
}
func (*UnimplementedGameProp_V1Server) ConsumePlayerProp(ctx context.Context, req *ConsumePlayerPropReq) (*ConsumePlayerPropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumePlayerProp not implemented")
}
func (*UnimplementedGameProp_V1Server) RechargeGiftItems(ctx context.Context, req *RechargeGiftItemsReq) (*RechargeGiftItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeGiftItems not implemented")
}
func (*UnimplementedGameProp_V1Server) QueryPlayerRechargeInfo(ctx context.Context, req *QueryPlayerRechargeInfoReq) (*QueryPlayerRechargeInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlayerRechargeInfo not implemented")
}

func RegisterGameProp_V1Server(s *grpc.Server, srv GameProp_V1Server) {
	s.RegisterService(&_GameProp_V1_serviceDesc, srv)
}

func _GameProp_V1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProp_V1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameprop_v1.service.v1.GameProp_V1/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProp_V1Server).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProp_V1_AddPlayerPropInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayerPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProp_V1Server).AddPlayerPropInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameprop_v1.service.v1.GameProp_V1/AddPlayerPropInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProp_V1Server).AddPlayerPropInfo(ctx, req.(*AddPlayerPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProp_V1_QueryPlayerPropInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlayerPropInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProp_V1Server).QueryPlayerPropInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameprop_v1.service.v1.GameProp_V1/QueryPlayerPropInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProp_V1Server).QueryPlayerPropInfo(ctx, req.(*QueryPlayerPropInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProp_V1_ConsumePlayerProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumePlayerPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProp_V1Server).ConsumePlayerProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameprop_v1.service.v1.GameProp_V1/ConsumePlayerProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProp_V1Server).ConsumePlayerProp(ctx, req.(*ConsumePlayerPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProp_V1_RechargeGiftItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeGiftItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProp_V1Server).RechargeGiftItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameprop_v1.service.v1.GameProp_V1/RechargeGiftItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProp_V1Server).RechargeGiftItems(ctx, req.(*RechargeGiftItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProp_V1_QueryPlayerRechargeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlayerRechargeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProp_V1Server).QueryPlayerRechargeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameprop_v1.service.v1.GameProp_V1/QueryPlayerRechargeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProp_V1Server).QueryPlayerRechargeInfo(ctx, req.(*QueryPlayerRechargeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameProp_V1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gameprop_v1.service.v1.GameProp_V1",
	HandlerType: (*GameProp_V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GameProp_V1_Ping_Handler,
		},
		{
			MethodName: "AddPlayerPropInfo",
			Handler:    _GameProp_V1_AddPlayerPropInfo_Handler,
		},
		{
			MethodName: "QueryPlayerPropInfo",
			Handler:    _GameProp_V1_QueryPlayerPropInfo_Handler,
		},
		{
			MethodName: "ConsumePlayerProp",
			Handler:    _GameProp_V1_ConsumePlayerProp_Handler,
		},
		{
			MethodName: "RechargeGiftItems",
			Handler:    _GameProp_V1_RechargeGiftItems_Handler,
		},
		{
			MethodName: "QueryPlayerRechargeInfo",
			Handler:    _GameProp_V1_QueryPlayerRechargeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *AddPlayerPropReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerPropReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerPropReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OnlyValue) > 0 {
		i -= len(m.OnlyValue)
		copy(dAtA[i:], m.OnlyValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OnlyValue)))
		i--
		dAtA[i] = 0x32
	}
	if m.Proptype != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Proptype))
		i--
		dAtA[i] = 0x28
	}
	if m.PropNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropNum))
		i--
		dAtA[i] = 0x20
	}
	if m.PropID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPlayerPropResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPlayerPropResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPlayerPropResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x22
	}
	if m.PropAfterNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropAfterNum))
		i--
		dAtA[i] = 0x18
	}
	if m.PropBeforeNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropBeforeNum))
		i--
		dAtA[i] = 0x10
	}
	if m.PropID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlayerPropInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlayerPropInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlayerPropInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PropInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PropInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PropType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropType))
		i--
		dAtA[i] = 0x18
	}
	if m.PropNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropNum))
		i--
		dAtA[i] = 0x10
	}
	if m.PropID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlayerPropInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlayerPropInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlayerPropInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PropList) > 0 {
		for iNdEx := len(m.PropList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PropList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumePlayerPropReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumePlayerPropReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumePlayerPropReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OnlyValue) > 0 {
		i -= len(m.OnlyValue)
		copy(dAtA[i:], m.OnlyValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OnlyValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PropNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropNum))
		i--
		dAtA[i] = 0x20
	}
	if m.PropID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumePlayerPropResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumePlayerPropResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumePlayerPropResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PropAfterNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropAfterNum))
		i--
		dAtA[i] = 0x18
	}
	if m.PropBeforeNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropBeforeNum))
		i--
		dAtA[i] = 0x10
	}
	if m.PropID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RechargeGiftItemsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeGiftItemsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RechargeGiftItemsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OnlyValue) > 0 {
		i -= len(m.OnlyValue)
		copy(dAtA[i:], m.OnlyValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OnlyValue)))
		i--
		dAtA[i] = 0x22
	}
	if m.RechargeAmount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RechargeAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Prop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Prop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PropNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropNum))
		i--
		dAtA[i] = 0x10
	}
	if m.PropID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RechargeGiftItemsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeGiftItemsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RechargeGiftItemsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PropList) > 0 {
		for iNdEx := len(m.PropList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PropList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TotalNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x18
	}
	if m.HandselNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HandselNum))
		i--
		dAtA[i] = 0x10
	}
	if m.RechargeAmount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RechargeAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlayerRechargeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlayerRechargeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlayerRechargeInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RechargeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RechargeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x18
	}
	if m.HandselNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HandselNum))
		i--
		dAtA[i] = 0x10
	}
	if m.RechargeAmount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RechargeAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPlayerRechargeInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPlayerRechargeInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPlayerRechargeInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RechargeInfoList) > 0 {
		for iNdEx := len(m.RechargeInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RechargeInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddPlayerPropReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.PropID != 0 {
		n += 1 + sovApi(uint64(m.PropID))
	}
	if m.PropNum != 0 {
		n += 1 + sovApi(uint64(m.PropNum))
	}
	if m.Proptype != 0 {
		n += 1 + sovApi(uint64(m.Proptype))
	}
	l = len(m.OnlyValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPlayerPropResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropID != 0 {
		n += 1 + sovApi(uint64(m.PropID))
	}
	if m.PropBeforeNum != 0 {
		n += 1 + sovApi(uint64(m.PropBeforeNum))
	}
	if m.PropAfterNum != 0 {
		n += 1 + sovApi(uint64(m.PropAfterNum))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryPlayerPropInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PropInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropID != 0 {
		n += 1 + sovApi(uint64(m.PropID))
	}
	if m.PropNum != 0 {
		n += 1 + sovApi(uint64(m.PropNum))
	}
	if m.PropType != 0 {
		n += 1 + sovApi(uint64(m.PropType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryPlayerPropInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PropList) > 0 {
		for _, e := range m.PropList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsumePlayerPropReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.PropID != 0 {
		n += 1 + sovApi(uint64(m.PropID))
	}
	if m.PropNum != 0 {
		n += 1 + sovApi(uint64(m.PropNum))
	}
	l = len(m.OnlyValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsumePlayerPropResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropID != 0 {
		n += 1 + sovApi(uint64(m.PropID))
	}
	if m.PropBeforeNum != 0 {
		n += 1 + sovApi(uint64(m.PropBeforeNum))
	}
	if m.PropAfterNum != 0 {
		n += 1 + sovApi(uint64(m.PropAfterNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeGiftItemsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.RechargeAmount != 0 {
		n += 1 + sovApi(uint64(m.RechargeAmount))
	}
	l = len(m.OnlyValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Prop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropID != 0 {
		n += 1 + sovApi(uint64(m.PropID))
	}
	if m.PropNum != 0 {
		n += 1 + sovApi(uint64(m.PropNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeGiftItemsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RechargeAmount != 0 {
		n += 1 + sovApi(uint64(m.RechargeAmount))
	}
	if m.HandselNum != 0 {
		n += 1 + sovApi(uint64(m.HandselNum))
	}
	if m.TotalNum != 0 {
		n += 1 + sovApi(uint64(m.TotalNum))
	}
	if len(m.PropList) > 0 {
		for _, e := range m.PropList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryPlayerRechargeInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RechargeAmount != 0 {
		n += 1 + sovApi(uint64(m.RechargeAmount))
	}
	if m.HandselNum != 0 {
		n += 1 + sovApi(uint64(m.HandselNum))
	}
	if m.TotalNum != 0 {
		n += 1 + sovApi(uint64(m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryPlayerRechargeInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RechargeInfoList) > 0 {
		for _, e := range m.RechargeInfoList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddPlayerPropReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerPropReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerPropReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			m.PropNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proptype", wireType)
			}
			m.Proptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proptype |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlyValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPlayerPropResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPlayerPropResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPlayerPropResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropBeforeNum", wireType)
			}
			m.PropBeforeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropBeforeNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropAfterNum", wireType)
			}
			m.PropAfterNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropAfterNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlayerPropInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlayerPropInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlayerPropInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PropInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			m.PropNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropType", wireType)
			}
			m.PropType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlayerPropInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlayerPropInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlayerPropInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropList = append(m.PropList, &PropInfo{})
			if err := m.PropList[len(m.PropList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumePlayerPropReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumePlayerPropReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumePlayerPropReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			m.PropNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlyValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumePlayerPropResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumePlayerPropResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumePlayerPropResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropBeforeNum", wireType)
			}
			m.PropBeforeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropBeforeNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropAfterNum", wireType)
			}
			m.PropAfterNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropAfterNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeGiftItemsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeGiftItemsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeGiftItemsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeAmount", wireType)
			}
			m.RechargeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RechargeAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlyValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Prop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			m.PropNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeGiftItemsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeGiftItemsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeGiftItemsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeAmount", wireType)
			}
			m.RechargeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RechargeAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandselNum", wireType)
			}
			m.HandselNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandselNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropList = append(m.PropList, &Prop{})
			if err := m.PropList[len(m.PropList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlayerRechargeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlayerRechargeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlayerRechargeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeAmount", wireType)
			}
			m.RechargeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RechargeAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandselNum", wireType)
			}
			m.HandselNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandselNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPlayerRechargeInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPlayerRechargeInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPlayerRechargeInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RechargeInfoList = append(m.RechargeInfoList, &RechargeInfo{})
			if err := m.RechargeInfoList[len(m.RechargeInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
