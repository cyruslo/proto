// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathFilterFilterForbidWord = "/filter/FilterForbidWord"
var PathFilterFilterForbidWords = "/filter/FilterForbidWords"
var PathFilterFilterAdsWord = "/filter/FilterAdsWord"

// FilterBMServer is the server API for Filter service.
type FilterBMServer interface {
	// 过滤违禁词
	FilterForbidWord(ctx context.Context, req *ForbidFilterReq) (resp *ForbidFilterRsp, err error)

	// 批量过滤违禁词
	FilterForbidWords(ctx context.Context, req *ForbidFilterWordsReq) (resp *ForbidFilterWordsRsp, err error)

	// 查询是否包含广告词
	FilterAdsWord(ctx context.Context, req *AdsFilterReq) (resp *AdsFilterRsp, err error)
}

var FilterSvc FilterBMServer

func filterFilterForbidWord(c *bm.Context) {
	p := new(ForbidFilterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FilterSvc.FilterForbidWord(c, p)
	c.JSON(resp, err)
}

func filterFilterForbidWords(c *bm.Context) {
	p := new(ForbidFilterWordsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FilterSvc.FilterForbidWords(c, p)
	c.JSON(resp, err)
}

func filterFilterAdsWord(c *bm.Context) {
	p := new(AdsFilterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FilterSvc.FilterAdsWord(c, p)
	c.JSON(resp, err)
}

// RegisterFilterBMServer Register the blademaster route
func RegisterFilterBMServer(e *bm.Engine, server FilterBMServer) {
	FilterSvc = server
	e.POST("/filter/FilterForbidWord", filterFilterForbidWord)
	e.POST("/filter/FilterForbidWords", filterFilterForbidWords)
	e.POST("/filter/FilterAdsWord", filterFilterAdsWord)
}
