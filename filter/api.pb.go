// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//违禁词过滤
type ForbidFilterReq struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForbidFilterReq) Reset()         { *m = ForbidFilterReq{} }
func (m *ForbidFilterReq) String() string { return proto.CompactTextString(m) }
func (*ForbidFilterReq) ProtoMessage()    {}
func (*ForbidFilterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *ForbidFilterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbidFilterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForbidFilterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForbidFilterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidFilterReq.Merge(m, src)
}
func (m *ForbidFilterReq) XXX_Size() int {
	return m.Size()
}
func (m *ForbidFilterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidFilterReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidFilterReq proto.InternalMessageInfo

type ForbidFilterRsp struct {
	IsForbid             bool     `protobuf:"varint,1,opt,name=is_forbid,json=isForbid,proto3" json:"is_forbid,omitempty"`
	Word                 string   `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForbidFilterRsp) Reset()         { *m = ForbidFilterRsp{} }
func (m *ForbidFilterRsp) String() string { return proto.CompactTextString(m) }
func (*ForbidFilterRsp) ProtoMessage()    {}
func (*ForbidFilterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ForbidFilterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbidFilterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForbidFilterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForbidFilterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidFilterRsp.Merge(m, src)
}
func (m *ForbidFilterRsp) XXX_Size() int {
	return m.Size()
}
func (m *ForbidFilterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidFilterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidFilterRsp proto.InternalMessageInfo

// 批量过滤违禁词
type ForbidFilterWordsReq struct {
	Words                []string `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForbidFilterWordsReq) Reset()         { *m = ForbidFilterWordsReq{} }
func (m *ForbidFilterWordsReq) String() string { return proto.CompactTextString(m) }
func (*ForbidFilterWordsReq) ProtoMessage()    {}
func (*ForbidFilterWordsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ForbidFilterWordsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbidFilterWordsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForbidFilterWordsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForbidFilterWordsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidFilterWordsReq.Merge(m, src)
}
func (m *ForbidFilterWordsReq) XXX_Size() int {
	return m.Size()
}
func (m *ForbidFilterWordsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidFilterWordsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidFilterWordsReq proto.InternalMessageInfo

type ForbidFilterWordsRsp struct {
	ForbidWords          []*ForbidWord `protobuf:"bytes,1,rep,name=forbidWords,proto3" json:"forbidWords,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ForbidFilterWordsRsp) Reset()         { *m = ForbidFilterWordsRsp{} }
func (m *ForbidFilterWordsRsp) String() string { return proto.CompactTextString(m) }
func (*ForbidFilterWordsRsp) ProtoMessage()    {}
func (*ForbidFilterWordsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ForbidFilterWordsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbidFilterWordsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForbidFilterWordsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForbidFilterWordsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidFilterWordsRsp.Merge(m, src)
}
func (m *ForbidFilterWordsRsp) XXX_Size() int {
	return m.Size()
}
func (m *ForbidFilterWordsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidFilterWordsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidFilterWordsRsp proto.InternalMessageInfo

type ForbidWord struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	ForbidWord           string   `protobuf:"bytes,2,opt,name=forbid_word,json=forbidWord,proto3" json:"forbid_word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForbidWord) Reset()         { *m = ForbidWord{} }
func (m *ForbidWord) String() string { return proto.CompactTextString(m) }
func (*ForbidWord) ProtoMessage()    {}
func (*ForbidWord) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *ForbidWord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbidWord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForbidWord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForbidWord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidWord.Merge(m, src)
}
func (m *ForbidWord) XXX_Size() int {
	return m.Size()
}
func (m *ForbidWord) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidWord.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidWord proto.InternalMessageInfo

//广告词过滤
type AdsFilterReq struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdsFilterReq) Reset()         { *m = AdsFilterReq{} }
func (m *AdsFilterReq) String() string { return proto.CompactTextString(m) }
func (*AdsFilterReq) ProtoMessage()    {}
func (*AdsFilterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *AdsFilterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdsFilterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdsFilterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdsFilterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdsFilterReq.Merge(m, src)
}
func (m *AdsFilterReq) XXX_Size() int {
	return m.Size()
}
func (m *AdsFilterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AdsFilterReq.DiscardUnknown(m)
}

var xxx_messageInfo_AdsFilterReq proto.InternalMessageInfo

type AdsFilterRsp struct {
	IsAds                bool     `protobuf:"varint,1,opt,name=is_ads,json=isAds,proto3" json:"is_ads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdsFilterRsp) Reset()         { *m = AdsFilterRsp{} }
func (m *AdsFilterRsp) String() string { return proto.CompactTextString(m) }
func (*AdsFilterRsp) ProtoMessage()    {}
func (*AdsFilterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *AdsFilterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdsFilterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdsFilterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdsFilterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdsFilterRsp.Merge(m, src)
}
func (m *AdsFilterRsp) XXX_Size() int {
	return m.Size()
}
func (m *AdsFilterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AdsFilterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AdsFilterRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ForbidFilterReq)(nil), "filter.service.v1.ForbidFilterReq")
	proto.RegisterType((*ForbidFilterRsp)(nil), "filter.service.v1.ForbidFilterRsp")
	proto.RegisterType((*ForbidFilterWordsReq)(nil), "filter.service.v1.ForbidFilterWordsReq")
	proto.RegisterType((*ForbidFilterWordsRsp)(nil), "filter.service.v1.ForbidFilterWordsRsp")
	proto.RegisterType((*ForbidWord)(nil), "filter.service.v1.ForbidWord")
	proto.RegisterType((*AdsFilterReq)(nil), "filter.service.v1.AdsFilterReq")
	proto.RegisterType((*AdsFilterRsp)(nil), "filter.service.v1.AdsFilterRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0xae, 0xd2, 0x40,
	0x14, 0xc7, 0x29, 0x08, 0xa1, 0x07, 0x8d, 0x32, 0x81, 0x08, 0x45, 0x0a, 0x4e, 0x42, 0x64, 0xa1,
	0x6d, 0xc4, 0x07, 0x30, 0x65, 0xc1, 0x03, 0x74, 0x43, 0xe2, 0x86, 0xb4, 0xb4, 0xd4, 0x49, 0x90,
	0x19, 0x7b, 0x0a, 0x6e, 0x5c, 0xe9, 0xc6, 0xbd, 0x1b, 0x1f, 0x89, 0xa5, 0x89, 0x2f, 0xa0, 0x78,
	0x1f, 0xe4, 0x86, 0x99, 0x4b, 0xe9, 0xe5, 0xf3, 0xee, 0xce, 0xc7, 0xaf, 0xff, 0xff, 0x39, 0x67,
	0x52, 0xd0, 0x3d, 0xc1, 0x2c, 0x11, 0xf3, 0x84, 0x93, 0xea, 0x8c, 0xcd, 0x93, 0x30, 0xb6, 0x30,
	0x8c, 0x57, 0x6c, 0x1a, 0x5a, 0xab, 0xb7, 0xc6, 0x9b, 0x88, 0x25, 0x1f, 0x97, 0xbe, 0x35, 0xe5,
	0x9f, 0xec, 0x88, 0x47, 0xdc, 0x96, 0xa4, 0xbf, 0x9c, 0xc9, 0x4c, 0x26, 0x32, 0x52, 0x0a, 0xc6,
	0x8b, 0x88, 0xf3, 0x68, 0x1e, 0xda, 0x9e, 0x60, 0xb6, 0xb7, 0x58, 0xf0, 0xc4, 0x4b, 0x18, 0x5f,
	0xa0, 0xea, 0xd2, 0x1e, 0x3c, 0x1d, 0xf1, 0xd8, 0x67, 0xc1, 0x48, 0xfa, 0xb8, 0xe1, 0x67, 0x42,
	0xe0, 0xd1, 0x17, 0x1e, 0x07, 0x0d, 0xad, 0xab, 0xf5, 0x75, 0x57, 0xc6, 0x74, 0x78, 0x80, 0xa1,
	0x20, 0x2d, 0xd0, 0x19, 0x4e, 0x66, 0xb2, 0x2a, 0xd9, 0xb2, 0x5b, 0x66, 0xa8, 0xa8, 0x54, 0x23,
	0x9f, 0xd1, 0x78, 0x0d, 0xb5, 0xac, 0xc6, 0x98, 0xc7, 0x01, 0x6e, 0xfd, 0x6a, 0x50, 0xdc, 0xf6,
	0xb1, 0xa1, 0x75, 0x0b, 0x7d, 0xdd, 0x55, 0x09, 0x1d, 0x9f, 0xa2, 0x51, 0x90, 0xf7, 0x50, 0x51,
	0x9e, 0xe3, 0xf4, 0x9b, 0xca, 0xa0, 0x6d, 0x1d, 0x9d, 0xc9, 0x1a, 0xa5, 0x94, 0x9b, 0xfd, 0x82,
	0x3a, 0x00, 0xfb, 0xd6, 0xa9, 0x65, 0x49, 0x67, 0x67, 0x31, 0xc9, 0xec, 0x00, 0x7b, 0x0d, 0x4a,
	0xe1, 0xb1, 0x13, 0xe0, 0xe5, 0x8b, 0xf5, 0xb2, 0x0c, 0x0a, 0x52, 0x87, 0x12, 0xc3, 0x89, 0x27,
	0x47, 0xde, 0xde, 0xaa, 0xc8, 0xd0, 0x09, 0x70, 0xf0, 0xbd, 0x00, 0x25, 0x05, 0x91, 0xaf, 0xf0,
	0x4c, 0x45, 0x99, 0xf1, 0xe8, 0xd9, 0xc5, 0x52, 0x77, 0xe3, 0x2a, 0x83, 0x82, 0x76, 0xbf, 0xfd,
	0xb9, 0xf9, 0x99, 0x37, 0x68, 0xc3, 0x56, 0xac, 0x7d, 0xe4, 0xf4, 0x43, 0x83, 0xea, 0x61, 0x11,
	0xc9, 0xab, 0x2b, 0xda, 0xbb, 0x47, 0x34, 0x1e, 0x06, 0xa2, 0xa0, 0x2f, 0xe5, 0x24, 0x2d, 0xda,
	0x3c, 0x37, 0x09, 0x12, 0x01, 0x4f, 0x54, 0xd1, 0x09, 0x50, 0xce, 0xd6, 0x39, 0x21, 0x9e, 0x7d,
	0x00, 0xe3, 0x32, 0x80, 0x82, 0xb6, 0xa5, 0xeb, 0x73, 0x5a, 0xbf, 0xef, 0x7a, 0x67, 0x30, 0x6c,
	0xae, 0xff, 0x99, 0xb9, 0xf5, 0xc6, 0xd4, 0x7e, 0x6f, 0x4c, 0xed, 0xef, 0xc6, 0xd4, 0x7e, 0xfd,
	0x37, 0x73, 0x1f, 0x0a, 0x9e, 0x60, 0x7e, 0x49, 0xfe, 0x27, 0xef, 0x6e, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x38, 0xd2, 0xa5, 0xfd, 0x94, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FilterClient is the client API for Filter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilterClient interface {
	//过滤违禁词
	FilterForbidWord(ctx context.Context, in *ForbidFilterReq, opts ...grpc.CallOption) (*ForbidFilterRsp, error)
	// 批量过滤违禁词
	FilterForbidWords(ctx context.Context, in *ForbidFilterWordsReq, opts ...grpc.CallOption) (*ForbidFilterWordsRsp, error)
	//查询是否包含广告词
	FilterAdsWord(ctx context.Context, in *AdsFilterReq, opts ...grpc.CallOption) (*AdsFilterRsp, error)
}

type filterClient struct {
	cc *grpc.ClientConn
}

func NewFilterClient(cc *grpc.ClientConn) FilterClient {
	return &filterClient{cc}
}

func (c *filterClient) FilterForbidWord(ctx context.Context, in *ForbidFilterReq, opts ...grpc.CallOption) (*ForbidFilterRsp, error) {
	out := new(ForbidFilterRsp)
	err := c.cc.Invoke(ctx, "/filter.service.v1.Filter/FilterForbidWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterClient) FilterForbidWords(ctx context.Context, in *ForbidFilterWordsReq, opts ...grpc.CallOption) (*ForbidFilterWordsRsp, error) {
	out := new(ForbidFilterWordsRsp)
	err := c.cc.Invoke(ctx, "/filter.service.v1.Filter/FilterForbidWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterClient) FilterAdsWord(ctx context.Context, in *AdsFilterReq, opts ...grpc.CallOption) (*AdsFilterRsp, error) {
	out := new(AdsFilterRsp)
	err := c.cc.Invoke(ctx, "/filter.service.v1.Filter/FilterAdsWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterServer is the server API for Filter service.
type FilterServer interface {
	//过滤违禁词
	FilterForbidWord(context.Context, *ForbidFilterReq) (*ForbidFilterRsp, error)
	// 批量过滤违禁词
	FilterForbidWords(context.Context, *ForbidFilterWordsReq) (*ForbidFilterWordsRsp, error)
	//查询是否包含广告词
	FilterAdsWord(context.Context, *AdsFilterReq) (*AdsFilterRsp, error)
}

// UnimplementedFilterServer can be embedded to have forward compatible implementations.
type UnimplementedFilterServer struct {
}

func (*UnimplementedFilterServer) FilterForbidWord(ctx context.Context, req *ForbidFilterReq) (*ForbidFilterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterForbidWord not implemented")
}
func (*UnimplementedFilterServer) FilterForbidWords(ctx context.Context, req *ForbidFilterWordsReq) (*ForbidFilterWordsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterForbidWords not implemented")
}
func (*UnimplementedFilterServer) FilterAdsWord(ctx context.Context, req *AdsFilterReq) (*AdsFilterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAdsWord not implemented")
}

func RegisterFilterServer(s *grpc.Server, srv FilterServer) {
	s.RegisterService(&_Filter_serviceDesc, srv)
}

func _Filter_FilterForbidWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServer).FilterForbidWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.service.v1.Filter/FilterForbidWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServer).FilterForbidWord(ctx, req.(*ForbidFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filter_FilterForbidWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidFilterWordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServer).FilterForbidWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.service.v1.Filter/FilterForbidWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServer).FilterForbidWords(ctx, req.(*ForbidFilterWordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filter_FilterAdsWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServer).FilterAdsWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.service.v1.Filter/FilterAdsWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServer).FilterAdsWord(ctx, req.(*AdsFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Filter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filter.service.v1.Filter",
	HandlerType: (*FilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilterForbidWord",
			Handler:    _Filter_FilterForbidWord_Handler,
		},
		{
			MethodName: "FilterForbidWords",
			Handler:    _Filter_FilterForbidWords_Handler,
		},
		{
			MethodName: "FilterAdsWord",
			Handler:    _Filter_FilterAdsWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ForbidFilterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidFilterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbidFilterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForbidFilterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidFilterRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbidFilterRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsForbid {
		i--
		if m.IsForbid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForbidFilterWordsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidFilterWordsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbidFilterWordsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Words) > 0 {
		for iNdEx := len(m.Words) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Words[iNdEx])
			copy(dAtA[i:], m.Words[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Words[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForbidFilterWordsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidFilterWordsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbidFilterWordsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ForbidWords) > 0 {
		for iNdEx := len(m.ForbidWords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForbidWords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForbidWord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbidWord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbidWord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ForbidWord) > 0 {
		i -= len(m.ForbidWord)
		copy(dAtA[i:], m.ForbidWord)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ForbidWord)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdsFilterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdsFilterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdsFilterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdsFilterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdsFilterRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdsFilterRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAds {
		i--
		if m.IsAds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ForbidFilterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForbidFilterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsForbid {
		n += 2
	}
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForbidFilterWordsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Words) > 0 {
		for _, s := range m.Words {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForbidFilterWordsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ForbidWords) > 0 {
		for _, e := range m.ForbidWords {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForbidWord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ForbidWord)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdsFilterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdsFilterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAds {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ForbidFilterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidFilterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidFilterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidFilterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidFilterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidFilterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsForbid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsForbid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidFilterWordsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidFilterWordsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidFilterWordsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Words", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Words = append(m.Words, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidFilterWordsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidFilterWordsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidFilterWordsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForbidWords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForbidWords = append(m.ForbidWords, &ForbidWord{})
			if err := m.ForbidWords[len(m.ForbidWords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbidWord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbidWord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbidWord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForbidWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForbidWord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdsFilterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdsFilterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdsFilterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdsFilterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdsFilterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdsFilterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAds = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
