// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommonRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRsp) Reset()         { *m = CommonRsp{} }
func (m *CommonRsp) String() string { return proto.CompactTextString(m) }
func (*CommonRsp) ProtoMessage()    {}
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CommonRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRsp.Merge(m, src)
}
func (m *CommonRsp) XXX_Size() int {
	return m.Size()
}
func (m *CommonRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRsp proto.InternalMessageInfo

type HangUpResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HangUpResp) Reset()         { *m = HangUpResp{} }
func (m *HangUpResp) String() string { return proto.CompactTextString(m) }
func (*HangUpResp) ProtoMessage()    {}
func (*HangUpResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *HangUpResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HangUpResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HangUpResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HangUpResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HangUpResp.Merge(m, src)
}
func (m *HangUpResp) XXX_Size() int {
	return m.Size()
}
func (m *HangUpResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HangUpResp.DiscardUnknown(m)
}

var xxx_messageInfo_HangUpResp proto.InternalMessageInfo

type HangUpReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" form:"user_id" validate:"required"`
	GameId               int64    `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id" form:"game_id" validate:"required"`
	Nickname             string   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname" form:"nickname" validate:"required"`
	Ip                   string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip" form:"ip" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HangUpReq) Reset()         { *m = HangUpReq{} }
func (m *HangUpReq) String() string { return proto.CompactTextString(m) }
func (*HangUpReq) ProtoMessage()    {}
func (*HangUpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *HangUpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HangUpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HangUpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HangUpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HangUpReq.Merge(m, src)
}
func (m *HangUpReq) XXX_Size() int {
	return m.Size()
}
func (m *HangUpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HangUpReq.DiscardUnknown(m)
}

var xxx_messageInfo_HangUpReq proto.InternalMessageInfo

type LimitTimeReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id" form:"user_id" validate:"required"`
	GameId               int64    `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id" form:"game_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LimitTimeReq) Reset()         { *m = LimitTimeReq{} }
func (m *LimitTimeReq) String() string { return proto.CompactTextString(m) }
func (*LimitTimeReq) ProtoMessage()    {}
func (*LimitTimeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *LimitTimeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitTimeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitTimeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitTimeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitTimeReq.Merge(m, src)
}
func (m *LimitTimeReq) XXX_Size() int {
	return m.Size()
}
func (m *LimitTimeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitTimeReq.DiscardUnknown(m)
}

var xxx_messageInfo_LimitTimeReq proto.InternalMessageInfo

type LimitTimeResp struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LimitTimeResp) Reset()         { *m = LimitTimeResp{} }
func (m *LimitTimeResp) String() string { return proto.CompactTextString(m) }
func (*LimitTimeResp) ProtoMessage()    {}
func (*LimitTimeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *LimitTimeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitTimeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitTimeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitTimeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitTimeResp.Merge(m, src)
}
func (m *LimitTimeResp) XXX_Size() int {
	return m.Size()
}
func (m *LimitTimeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitTimeResp.DiscardUnknown(m)
}

var xxx_messageInfo_LimitTimeResp proto.InternalMessageInfo

type CreateTableReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameId               int64    `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	IsCreate             bool     `protobuf:"varint,3,opt,name=is_create,json=isCreate,proto3" json:"is_create,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTableReq) Reset()         { *m = CreateTableReq{} }
func (m *CreateTableReq) String() string { return proto.CompactTextString(m) }
func (*CreateTableReq) ProtoMessage()    {}
func (*CreateTableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *CreateTableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTableReq.Merge(m, src)
}
func (m *CreateTableReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateTableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTableReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTableReq proto.InternalMessageInfo

type CanCreateTableReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameId               int64    `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CanCreateTableReq) Reset()         { *m = CanCreateTableReq{} }
func (m *CanCreateTableReq) String() string { return proto.CompactTextString(m) }
func (*CanCreateTableReq) ProtoMessage()    {}
func (*CanCreateTableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *CanCreateTableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanCreateTableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanCreateTableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanCreateTableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanCreateTableReq.Merge(m, src)
}
func (m *CanCreateTableReq) XXX_Size() int {
	return m.Size()
}
func (m *CanCreateTableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanCreateTableReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanCreateTableReq proto.InternalMessageInfo

type CanCreateTableRsp struct {
	CanCreate            bool     `protobuf:"varint,1,opt,name=canCreate,proto3" json:"canCreate,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CanCreateTableRsp) Reset()         { *m = CanCreateTableRsp{} }
func (m *CanCreateTableRsp) String() string { return proto.CompactTextString(m) }
func (*CanCreateTableRsp) ProtoMessage()    {}
func (*CanCreateTableRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *CanCreateTableRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanCreateTableRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanCreateTableRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanCreateTableRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanCreateTableRsp.Merge(m, src)
}
func (m *CanCreateTableRsp) XXX_Size() int {
	return m.Size()
}
func (m *CanCreateTableRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CanCreateTableRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CanCreateTableRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonRsp)(nil), "behavior.service.v1.CommonRsp")
	proto.RegisterType((*HangUpResp)(nil), "behavior.service.v1.HangUpResp")
	proto.RegisterType((*HangUpReq)(nil), "behavior.service.v1.HangUpReq")
	proto.RegisterType((*LimitTimeReq)(nil), "behavior.service.v1.LimitTimeReq")
	proto.RegisterType((*LimitTimeResp)(nil), "behavior.service.v1.LimitTimeResp")
	proto.RegisterType((*CreateTableReq)(nil), "behavior.service.v1.CreateTableReq")
	proto.RegisterType((*CanCreateTableReq)(nil), "behavior.service.v1.CanCreateTableReq")
	proto.RegisterType((*CanCreateTableRsp)(nil), "behavior.service.v1.CanCreateTableRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xcb, 0x6e, 0xd4, 0x3c,
	0x14, 0xc7, 0x9b, 0x4c, 0x2f, 0x33, 0x6e, 0xbf, 0x4a, 0x75, 0x3f, 0x34, 0xd3, 0xb4, 0x9d, 0x0c,
	0xae, 0x04, 0xdd, 0x30, 0xa3, 0xd2, 0x05, 0xa2, 0xcb, 0xa9, 0x50, 0x29, 0x42, 0x42, 0x8a, 0xca,
	0x86, 0x4d, 0xe4, 0x24, 0x6e, 0x6a, 0x75, 0x12, 0xbb, 0xb1, 0x33, 0x88, 0x6d, 0x5f, 0x81, 0x0d,
	0x4f, 0xc0, 0x8e, 0xf7, 0xe8, 0x12, 0xc1, 0x3e, 0x82, 0xc2, 0xaa, 0xcb, 0x3e, 0x01, 0x8a, 0x73,
	0x9b, 0x0e, 0xe1, 0x22, 0xc1, 0x82, 0x9d, 0xcf, 0xff, 0x9c, 0xfc, 0xfe, 0xb6, 0xcf, 0x71, 0x40,
	0x0b, 0x73, 0xda, 0xe7, 0x11, 0x93, 0x0c, 0xae, 0x3a, 0xe4, 0x04, 0x8f, 0x29, 0x8b, 0xfa, 0x82,
	0x44, 0x63, 0xea, 0x92, 0xfe, 0x78, 0xc7, 0xb8, 0xe7, 0x53, 0x79, 0x12, 0x3b, 0x7d, 0x97, 0x05,
	0x03, 0x9f, 0xf9, 0x6c, 0xa0, 0x6a, 0x9d, 0xf8, 0x58, 0x45, 0x2a, 0x50, 0xab, 0x8c, 0x61, 0xac,
	0xfb, 0x8c, 0xf9, 0x23, 0x52, 0x55, 0x91, 0x80, 0xcb, 0x57, 0x79, 0x72, 0x23, 0x4f, 0x62, 0x4e,
	0x07, 0x38, 0x0c, 0x99, 0xc4, 0x92, 0xb2, 0x50, 0x64, 0x59, 0xf4, 0x10, 0xb4, 0xf6, 0x59, 0x10,
	0xb0, 0xd0, 0x12, 0x1c, 0x42, 0x30, 0xeb, 0x32, 0x8f, 0x74, 0xb4, 0x9e, 0xb6, 0x3d, 0x67, 0xa9,
	0x35, 0xec, 0x80, 0x85, 0x80, 0x08, 0x81, 0x7d, 0xd2, 0xd1, 0x7b, 0xda, 0x76, 0xcb, 0x2a, 0x42,
	0xb4, 0x04, 0xc0, 0x63, 0x1c, 0xfa, 0xcf, 0xb9, 0x45, 0x04, 0x47, 0xef, 0x74, 0xd0, 0x2a, 0xc2,
	0x33, 0xf8, 0x04, 0x2c, 0xc4, 0x82, 0x44, 0x36, 0xf5, 0x14, 0xac, 0x31, 0xdc, 0xb9, 0x4a, 0xcc,
	0x42, 0xba, 0x4e, 0x4c, 0x74, 0xcc, 0xa2, 0x60, 0x0f, 0xe5, 0x02, 0xea, 0x8d, 0xf1, 0x88, 0x7a,
	0x58, 0x92, 0x3d, 0x14, 0x91, 0xb3, 0x98, 0x46, 0xc4, 0x43, 0xd6, 0x7c, 0x9a, 0x3d, 0xf4, 0x52,
	0x96, 0x8f, 0x03, 0x92, 0xb2, 0xf4, 0x8a, 0x95, 0x4b, 0x15, 0x2b, 0x17, 0x7e, 0xc0, 0x4a, 0xb3,
	0x87, 0x1e, 0x7c, 0x06, 0x9a, 0x21, 0x75, 0x4f, 0x43, 0x1c, 0x90, 0x4e, 0x23, 0x3d, 0xce, 0x70,
	0xf7, 0x2a, 0x31, 0x4b, 0xed, 0x3a, 0x31, 0xb7, 0x32, 0x5a, 0xa1, 0xd4, 0xe3, 0xca, 0x0f, 0xe0,
	0x03, 0xa0, 0x53, 0xde, 0x99, 0x55, 0xa8, 0xbb, 0x57, 0x89, 0xa9, 0x53, 0x7e, 0x9d, 0x98, 0x9b,
	0x19, 0x84, 0xf2, 0xfa, 0xcf, 0x75, 0xca, 0xd1, 0x5b, 0x0d, 0x2c, 0x3d, 0xa5, 0x01, 0x95, 0x47,
	0x34, 0x20, 0xff, 0xf0, 0x95, 0xa1, 0x2d, 0xf0, 0xdf, 0xc4, 0x3e, 0xb3, 0x29, 0x91, 0x34, 0xc8,
	0xa6, 0xa4, 0x61, 0xa9, 0x35, 0xb2, 0xc1, 0xf2, 0x7e, 0x44, 0xb0, 0x24, 0x47, 0xd8, 0x19, 0xa9,
	0xe3, 0xb4, 0xa7, 0x8e, 0x53, 0xee, 0xad, 0x3d, 0xb5, 0xb7, 0xb2, 0x37, 0xeb, 0xa0, 0x45, 0x85,
	0xed, 0x2a, 0x8c, 0x6a, 0x4e, 0xd3, 0x6a, 0x52, 0x91, 0x61, 0xd1, 0x23, 0xb0, 0xb2, 0x8f, 0xc3,
	0x3f, 0xf5, 0x40, 0x07, 0xdf, 0x61, 0x04, 0x87, 0x1b, 0xa0, 0xe5, 0x16, 0xa2, 0x02, 0x35, 0xad,
	0x4a, 0x80, 0xff, 0x83, 0x39, 0x97, 0xc5, 0xa1, 0x54, 0xa4, 0x39, 0x2b, 0x0b, 0xee, 0x7f, 0x98,
	0x05, 0xcd, 0x61, 0xfe, 0x72, 0xe1, 0x4b, 0xb0, 0x74, 0x40, 0x64, 0x79, 0x4b, 0xf0, 0x76, 0xbf,
	0xe6, 0x51, 0xf7, 0x27, 0xbb, 0x6d, 0xa0, 0x5f, 0x95, 0x08, 0x8e, 0x7a, 0xe7, 0x1f, 0xbf, 0xbe,
	0xd6, 0x0d, 0xd4, 0x19, 0x14, 0xb5, 0x03, 0x9f, 0x48, 0x7b, 0x94, 0x16, 0xd9, 0xe9, 0xb5, 0x43,
	0x0f, 0xcc, 0x67, 0x6f, 0x0e, 0x76, 0x6b, 0x79, 0xe5, 0x83, 0x34, 0xcc, 0x9f, 0xe6, 0x05, 0x47,
	0x6b, 0xca, 0x6c, 0x15, 0xad, 0x54, 0x66, 0x27, 0x38, 0xf4, 0xed, 0x98, 0x43, 0x06, 0x16, 0x87,
	0x11, 0xc1, 0xa7, 0x7f, 0xcb, 0xca, 0x54, 0x56, 0x6b, 0xa8, 0x5d, 0x59, 0x39, 0x29, 0xdf, 0x2e,
	0x0c, 0xcf, 0xc0, 0xe2, 0x44, 0x8b, 0xe0, 0x56, 0x2d, 0xf0, 0xe6, 0x2c, 0x18, 0xf5, 0xbb, 0x2a,
	0xff, 0x6d, 0x68, 0x53, 0x99, 0xb6, 0xd1, 0xad, 0xca, 0x74, 0xd2, 0xe3, 0x5c, 0x03, 0xcb, 0x37,
	0x27, 0x03, 0xde, 0xa9, 0x27, 0x4e, 0x4f, 0xa1, 0xf1, 0x5b, 0x75, 0xf5, 0xed, 0xbc, 0x59, 0x34,
	0x5c, 0xbb, 0xf8, 0xdc, 0x9d, 0xb9, 0xb8, 0xec, 0x6a, 0xef, 0x2f, 0xbb, 0xda, 0xa7, 0xcb, 0xae,
	0xf6, 0xe6, 0x4b, 0x77, 0xe6, 0x45, 0x03, 0x73, 0xea, 0xcc, 0xab, 0xdf, 0xf5, 0xee, 0xb7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x22, 0x16, 0x4f, 0xdc, 0x3a, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BehaviorClient is the client API for Behavior service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BehaviorClient interface {
	//	rpc GetLimitTime (LimitTimeReq) returns (LimitTimeResp);
	GetLimitTime(ctx context.Context, in *LimitTimeReq, opts ...grpc.CallOption) (*LimitTimeResp, error)
	//    rpc HangUp (HangUpReq) returns (HangUpResp);
	HangUp(ctx context.Context, in *HangUpReq, opts ...grpc.CallOption) (*HangUpResp, error)
	//    rpc BreakHangUp (HangUpReq) returns (HangUpResp);
	BreakHangUp(ctx context.Context, in *HangUpReq, opts ...grpc.CallOption) (*HangUpResp, error)
	CreateTable(ctx context.Context, in *CreateTableReq, opts ...grpc.CallOption) (*CommonRsp, error)
	CanCreateTable(ctx context.Context, in *CanCreateTableReq, opts ...grpc.CallOption) (*CanCreateTableRsp, error)
}

type behaviorClient struct {
	cc *grpc.ClientConn
}

func NewBehaviorClient(cc *grpc.ClientConn) BehaviorClient {
	return &behaviorClient{cc}
}

func (c *behaviorClient) GetLimitTime(ctx context.Context, in *LimitTimeReq, opts ...grpc.CallOption) (*LimitTimeResp, error) {
	out := new(LimitTimeResp)
	err := c.cc.Invoke(ctx, "/behavior.service.v1.Behavior/GetLimitTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorClient) HangUp(ctx context.Context, in *HangUpReq, opts ...grpc.CallOption) (*HangUpResp, error) {
	out := new(HangUpResp)
	err := c.cc.Invoke(ctx, "/behavior.service.v1.Behavior/HangUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorClient) BreakHangUp(ctx context.Context, in *HangUpReq, opts ...grpc.CallOption) (*HangUpResp, error) {
	out := new(HangUpResp)
	err := c.cc.Invoke(ctx, "/behavior.service.v1.Behavior/BreakHangUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorClient) CreateTable(ctx context.Context, in *CreateTableReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, "/behavior.service.v1.Behavior/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviorClient) CanCreateTable(ctx context.Context, in *CanCreateTableReq, opts ...grpc.CallOption) (*CanCreateTableRsp, error) {
	out := new(CanCreateTableRsp)
	err := c.cc.Invoke(ctx, "/behavior.service.v1.Behavior/CanCreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BehaviorServer is the server API for Behavior service.
type BehaviorServer interface {
	//	rpc GetLimitTime (LimitTimeReq) returns (LimitTimeResp);
	GetLimitTime(context.Context, *LimitTimeReq) (*LimitTimeResp, error)
	//    rpc HangUp (HangUpReq) returns (HangUpResp);
	HangUp(context.Context, *HangUpReq) (*HangUpResp, error)
	//    rpc BreakHangUp (HangUpReq) returns (HangUpResp);
	BreakHangUp(context.Context, *HangUpReq) (*HangUpResp, error)
	CreateTable(context.Context, *CreateTableReq) (*CommonRsp, error)
	CanCreateTable(context.Context, *CanCreateTableReq) (*CanCreateTableRsp, error)
}

// UnimplementedBehaviorServer can be embedded to have forward compatible implementations.
type UnimplementedBehaviorServer struct {
}

func (*UnimplementedBehaviorServer) GetLimitTime(ctx context.Context, req *LimitTimeReq) (*LimitTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitTime not implemented")
}
func (*UnimplementedBehaviorServer) HangUp(ctx context.Context, req *HangUpReq) (*HangUpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HangUp not implemented")
}
func (*UnimplementedBehaviorServer) BreakHangUp(ctx context.Context, req *HangUpReq) (*HangUpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BreakHangUp not implemented")
}
func (*UnimplementedBehaviorServer) CreateTable(ctx context.Context, req *CreateTableReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedBehaviorServer) CanCreateTable(ctx context.Context, req *CanCreateTableReq) (*CanCreateTableRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanCreateTable not implemented")
}

func RegisterBehaviorServer(s *grpc.Server, srv BehaviorServer) {
	s.RegisterService(&_Behavior_serviceDesc, srv)
}

func _Behavior_GetLimitTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServer).GetLimitTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behavior.service.v1.Behavior/GetLimitTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServer).GetLimitTime(ctx, req.(*LimitTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Behavior_HangUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HangUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServer).HangUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behavior.service.v1.Behavior/HangUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServer).HangUp(ctx, req.(*HangUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Behavior_BreakHangUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HangUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServer).BreakHangUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behavior.service.v1.Behavior/BreakHangUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServer).BreakHangUp(ctx, req.(*HangUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Behavior_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behavior.service.v1.Behavior/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServer).CreateTable(ctx, req.(*CreateTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Behavior_CanCreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanCreateTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServer).CanCreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behavior.service.v1.Behavior/CanCreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServer).CanCreateTable(ctx, req.(*CanCreateTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Behavior_serviceDesc = grpc.ServiceDesc{
	ServiceName: "behavior.service.v1.Behavior",
	HandlerType: (*BehaviorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLimitTime",
			Handler:    _Behavior_GetLimitTime_Handler,
		},
		{
			MethodName: "HangUp",
			Handler:    _Behavior_HangUp_Handler,
		},
		{
			MethodName: "BreakHangUp",
			Handler:    _Behavior_BreakHangUp_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _Behavior_CreateTable_Handler,
		},
		{
			MethodName: "CanCreateTable",
			Handler:    _Behavior_CanCreateTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CommonRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HangUpResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HangUpResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HangUpResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *HangUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HangUpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HangUpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LimitTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitTimeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitTimeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LimitTimeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitTimeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitTimeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateTableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsCreate {
		i--
		if m.IsCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanCreateTableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanCreateTableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanCreateTableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanCreateTableRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanCreateTableRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanCreateTableRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.CanCreate {
		i--
		if m.CanCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HangUpResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HangUpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LimitTimeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LimitTimeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.IsCreate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanCreateTableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanCreateTableRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanCreate {
		n += 2
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HangUpResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HangUpResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HangUpResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HangUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HangUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HangUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitTimeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitTimeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitTimeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanCreateTableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanCreateTableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanCreateTableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanCreateTableRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanCreateTableRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanCreateTableRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanCreate = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
