// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathBehaviorGetLimitTime = "/behavior/get_limit_time"
var PathBehaviorHangUp = "/behavior/hang_up"
var PathBehaviorBreakHangUp = "/behavior/break_hang_up"
var PathBehaviorCreateTable = "/behavior/CreateTable"
var PathBehaviorCanCreateTable = "/behavior/CanCreateTable"

// BehaviorBMServer is the server API for Behavior service.
type BehaviorBMServer interface {
	// 	rpc GetLimitTime (LimitTimeReq) returns (LimitTimeResp);
	GetLimitTime(ctx context.Context, req *LimitTimeReq) (resp *LimitTimeResp, err error)

	//    rpc HangUp (HangUpReq) returns (HangUpResp);
	HangUp(ctx context.Context, req *HangUpReq) (resp *HangUpResp, err error)

	//    rpc BreakHangUp (HangUpReq) returns (HangUpResp);
	BreakHangUp(ctx context.Context, req *HangUpReq) (resp *HangUpResp, err error)

	CreateTable(ctx context.Context, req *CreateTableReq) (resp *CommonRsp, err error)

	CanCreateTable(ctx context.Context, req *CanCreateTableReq) (resp *CanCreateTableRsp, err error)
}

var BehaviorSvc BehaviorBMServer

func behaviorGetLimitTime(c *bm.Context) {
	p := new(LimitTimeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BehaviorSvc.GetLimitTime(c, p)
	c.JSON(resp, err)
}

func behaviorHangUp(c *bm.Context) {
	p := new(HangUpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BehaviorSvc.HangUp(c, p)
	c.JSON(resp, err)
}

func behaviorBreakHangUp(c *bm.Context) {
	p := new(HangUpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BehaviorSvc.BreakHangUp(c, p)
	c.JSON(resp, err)
}

func behaviorCreateTable(c *bm.Context) {
	p := new(CreateTableReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BehaviorSvc.CreateTable(c, p)
	c.JSON(resp, err)
}

func behaviorCanCreateTable(c *bm.Context) {
	p := new(CanCreateTableReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BehaviorSvc.CanCreateTable(c, p)
	c.JSON(resp, err)
}

// RegisterBehaviorBMServer Register the blademaster route
func RegisterBehaviorBMServer(e *bm.Engine, server BehaviorBMServer) {
	BehaviorSvc = server
	e.POST("/behavior/get_limit_time", behaviorGetLimitTime)
	e.POST("/behavior/hang_up", behaviorHangUp)
	e.POST("/behavior/break_hang_up", behaviorBreakHangUp)
	e.POST("/behavior/CreateTable", behaviorCreateTable)
	e.POST("/behavior/CanCreateTable", behaviorCanCreateTable)
}
