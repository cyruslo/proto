// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommonResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResp) Reset()         { *m = CommonResp{} }
func (m *CommonResp) String() string { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()    {}
func (*CommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CommonResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResp.Merge(m, src)
}
func (m *CommonResp) XXX_Size() int {
	return m.Size()
}
func (m *CommonResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResp proto.InternalMessageInfo

//账号注册
type UserRegisterReq struct {
	UserName             string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	NickName             string   `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	GameId               int32    `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	RemoteIp             uint32   `protobuf:"varint,5,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	Souce                int32    `protobuf:"varint,6,opt,name=souce,proto3" json:"souce,omitempty"`
	PhyId                string   `protobuf:"bytes,7,opt,name=phy_id,json=phyId,proto3" json:"phy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRegisterReq) Reset()         { *m = UserRegisterReq{} }
func (m *UserRegisterReq) String() string { return proto.CompactTextString(m) }
func (*UserRegisterReq) ProtoMessage()    {}
func (*UserRegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *UserRegisterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRegisterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegisterReq.Merge(m, src)
}
func (m *UserRegisterReq) XXX_Size() int {
	return m.Size()
}
func (m *UserRegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegisterReq proto.InternalMessageInfo

type UserRegisterRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result               int32    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	UserDbid             int64    `protobuf:"varint,4,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRegisterRsp) Reset()         { *m = UserRegisterRsp{} }
func (m *UserRegisterRsp) String() string { return proto.CompactTextString(m) }
func (*UserRegisterRsp) ProtoMessage()    {}
func (*UserRegisterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *UserRegisterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRegisterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRegisterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRegisterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRegisterRsp.Merge(m, src)
}
func (m *UserRegisterRsp) XXX_Size() int {
	return m.Size()
}
func (m *UserRegisterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRegisterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserRegisterRsp proto.InternalMessageInfo

//获取性别
type GetUserSexReq struct {
	UserDbid             int32    `protobuf:"varint,1,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserSexReq) Reset()         { *m = GetUserSexReq{} }
func (m *GetUserSexReq) String() string { return proto.CompactTextString(m) }
func (*GetUserSexReq) ProtoMessage()    {}
func (*GetUserSexReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GetUserSexReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserSexReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserSexReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserSexReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserSexReq.Merge(m, src)
}
func (m *GetUserSexReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserSexReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserSexReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserSexReq proto.InternalMessageInfo

type GetUserSexRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result               int32    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Sex                  int32    `protobuf:"varint,4,opt,name=sex,proto3" json:"sex" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserSexRsp) Reset()         { *m = GetUserSexRsp{} }
func (m *GetUserSexRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserSexRsp) ProtoMessage()    {}
func (*GetUserSexRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GetUserSexRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserSexRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserSexRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserSexRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserSexRsp.Merge(m, src)
}
func (m *GetUserSexRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetUserSexRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserSexRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserSexRsp proto.InternalMessageInfo

type RefreshUserMoneyReq struct {
	UserDbid             int32    `protobuf:"varint,1,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshUserMoneyReq) Reset()         { *m = RefreshUserMoneyReq{} }
func (m *RefreshUserMoneyReq) String() string { return proto.CompactTextString(m) }
func (*RefreshUserMoneyReq) ProtoMessage()    {}
func (*RefreshUserMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *RefreshUserMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshUserMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshUserMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshUserMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshUserMoneyReq.Merge(m, src)
}
func (m *RefreshUserMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshUserMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshUserMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshUserMoneyReq proto.InternalMessageInfo

// 虚拟货币
type ExtendCoin struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id" validate:"required"`
	Amount               uint64   `protobuf:"varint,2,opt,name=amount,proto3" json:"amount" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtendCoin) Reset()         { *m = ExtendCoin{} }
func (m *ExtendCoin) String() string { return proto.CompactTextString(m) }
func (*ExtendCoin) ProtoMessage()    {}
func (*ExtendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ExtendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendCoin.Merge(m, src)
}
func (m *ExtendCoin) XXX_Size() int {
	return m.Size()
}
func (m *ExtendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendCoin proto.InternalMessageInfo

type UserLogoutReq struct {
	UserDbid             int32    `protobuf:"varint,1,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	Certification        string   `protobuf:"bytes,2,opt,name=certification,proto3" json:"certification,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLogoutReq) Reset()         { *m = UserLogoutReq{} }
func (m *UserLogoutReq) String() string { return proto.CompactTextString(m) }
func (*UserLogoutReq) ProtoMessage()    {}
func (*UserLogoutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *UserLogoutReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLogoutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLogoutReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLogoutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogoutReq.Merge(m, src)
}
func (m *UserLogoutReq) XXX_Size() int {
	return m.Size()
}
func (m *UserLogoutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogoutReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogoutReq proto.InternalMessageInfo

type UserLogoutRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLogoutRsp) Reset()         { *m = UserLogoutRsp{} }
func (m *UserLogoutRsp) String() string { return proto.CompactTextString(m) }
func (*UserLogoutRsp) ProtoMessage()    {}
func (*UserLogoutRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *UserLogoutRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLogoutRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLogoutRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLogoutRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogoutRsp.Merge(m, src)
}
func (m *UserLogoutRsp) XXX_Size() int {
	return m.Size()
}
func (m *UserLogoutRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogoutRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogoutRsp proto.InternalMessageInfo

type WeXinBindQPReq struct {
	Unionid              string   `protobuf:"bytes,1,opt,name=unionid,proto3" json:"unionid,omitempty"`
	Account              string   `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	PasswordMd5          string   `protobuf:"bytes,3,opt,name=password_md5,json=passwordMd5,proto3" json:"password_md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeXinBindQPReq) Reset()         { *m = WeXinBindQPReq{} }
func (m *WeXinBindQPReq) String() string { return proto.CompactTextString(m) }
func (*WeXinBindQPReq) ProtoMessage()    {}
func (*WeXinBindQPReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *WeXinBindQPReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeXinBindQPReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeXinBindQPReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeXinBindQPReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeXinBindQPReq.Merge(m, src)
}
func (m *WeXinBindQPReq) XXX_Size() int {
	return m.Size()
}
func (m *WeXinBindQPReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WeXinBindQPReq.DiscardUnknown(m)
}

var xxx_messageInfo_WeXinBindQPReq proto.InternalMessageInfo

//绑定第三方账号回应
type PartnerBindRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result               int32    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerBindRsp) Reset()         { *m = PartnerBindRsp{} }
func (m *PartnerBindRsp) String() string { return proto.CompactTextString(m) }
func (*PartnerBindRsp) ProtoMessage()    {}
func (*PartnerBindRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *PartnerBindRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerBindRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerBindRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerBindRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerBindRsp.Merge(m, src)
}
func (m *PartnerBindRsp) XXX_Size() int {
	return m.Size()
}
func (m *PartnerBindRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerBindRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerBindRsp proto.InternalMessageInfo

type RefreshUserMoneyRsp struct {
	Code                 int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result               int32         `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	UserDbid             int32         `protobuf:"varint,4,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	Money                uint64        `protobuf:"varint,5,opt,name=money,proto3" json:"money" validate:"required"`
	Ticket               uint64        `protobuf:"varint,6,opt,name=ticket,proto3" json:"ticket" validate:"required"`
	ExtendCoin           []*ExtendCoin `protobuf:"bytes,7,rep,name=extendCoin,proto3" json:"extendCoin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RefreshUserMoneyRsp) Reset()         { *m = RefreshUserMoneyRsp{} }
func (m *RefreshUserMoneyRsp) String() string { return proto.CompactTextString(m) }
func (*RefreshUserMoneyRsp) ProtoMessage()    {}
func (*RefreshUserMoneyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *RefreshUserMoneyRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshUserMoneyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshUserMoneyRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshUserMoneyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshUserMoneyRsp.Merge(m, src)
}
func (m *RefreshUserMoneyRsp) XXX_Size() int {
	return m.Size()
}
func (m *RefreshUserMoneyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshUserMoneyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshUserMoneyRsp proto.InternalMessageInfo

// 账号登录
type ThreeWayLoginWithDeviceReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Account              string   `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	PasswordMd5          string   `protobuf:"bytes,3,opt,name=password_md5,json=passwordMd5,proto3" json:"password_md5,omitempty"`
	MacAddress           string   `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	PhyId                string   `protobuf:"bytes,5,opt,name=phy_id,json=phyId,proto3" json:"phy_id,omitempty"`
	Authcode             string   `protobuf:"bytes,6,opt,name=authcode,proto3" json:"authcode,omitempty"`
	DeviceInfo           string   `protobuf:"bytes,7,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	Platform             int32    `protobuf:"varint,8,opt,name=platform,proto3" json:"platform,omitempty"`
	Location             string   `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Marketid             int32    `protobuf:"varint,10,opt,name=marketid,proto3" json:"marketid,omitempty"`
	Version              string   `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThreeWayLoginWithDeviceReq) Reset()         { *m = ThreeWayLoginWithDeviceReq{} }
func (m *ThreeWayLoginWithDeviceReq) String() string { return proto.CompactTextString(m) }
func (*ThreeWayLoginWithDeviceReq) ProtoMessage()    {}
func (*ThreeWayLoginWithDeviceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *ThreeWayLoginWithDeviceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeWayLoginWithDeviceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeWayLoginWithDeviceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeWayLoginWithDeviceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeWayLoginWithDeviceReq.Merge(m, src)
}
func (m *ThreeWayLoginWithDeviceReq) XXX_Size() int {
	return m.Size()
}
func (m *ThreeWayLoginWithDeviceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeWayLoginWithDeviceReq.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeWayLoginWithDeviceReq proto.InternalMessageInfo

type GameScore struct {
	Score                int64         `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Money                int64         `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
	Tax                  int32         `protobuf:"varint,3,opt,name=tax,proto3" json:"tax,omitempty"`
	Result               []int32       `protobuf:"varint,4,rep,packed,name=result,proto3" json:"result,omitempty"`
	Ticket               uint64        `protobuf:"varint,5,opt,name=ticket,proto3" json:"ticket,omitempty"`
	ExtendCoin           []*ExtendCoin `protobuf:"bytes,6,rep,name=extendCoin,proto3" json:"extendCoin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GameScore) Reset()         { *m = GameScore{} }
func (m *GameScore) String() string { return proto.CompactTextString(m) }
func (*GameScore) ProtoMessage()    {}
func (*GameScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *GameScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameScore.Merge(m, src)
}
func (m *GameScore) XXX_Size() int {
	return m.Size()
}
func (m *GameScore) XXX_DiscardUnknown() {
	xxx_messageInfo_GameScore.DiscardUnknown(m)
}

var xxx_messageInfo_GameScore proto.InternalMessageInfo

type UserInfo struct {
	UserDbid             uint32     `protobuf:"varint,1,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	Money                uint64     `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
	Certification        string     `protobuf:"bytes,3,opt,name=certification,proto3" json:"certification,omitempty"`
	Nickname             string     `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Score                *GameScore `protobuf:"bytes,5,opt,name=Score,proto3" json:"Score,omitempty"`
	ConfraId             uint32     `protobuf:"varint,6,opt,name=confra_id,json=confraId,proto3" json:"confra_id,omitempty"`
	UserLevel            uint32     `protobuf:"varint,7,opt,name=user_level,json=userLevel,proto3" json:"user_level,omitempty"`
	Sex                  int32      `protobuf:"zigzag32,8,opt,name=sex,proto3" json:"sex,omitempty"`
	AvataId              uint32     `protobuf:"varint,9,opt,name=avata_id,json=avataId,proto3" json:"avata_id,omitempty"`
	BankMoney            uint64     `protobuf:"varint,10,opt,name=bank_money,json=bankMoney,proto3" json:"bank_money,omitempty"`
	Authcode             string     `protobuf:"bytes,11,opt,name=authcode,proto3" json:"authcode,omitempty"`
	ExtErrorCode         int32      `protobuf:"varint,12,opt,name=ext_error_code,json=extErrorCode,proto3" json:"ext_error_code,omitempty"`
	ExtMessage           string     `protobuf:"bytes,13,opt,name=ext_message,json=extMessage,proto3" json:"ext_message,omitempty"`
	Ticket               uint64     `protobuf:"varint,14,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Exp                  uint64     `protobuf:"varint,15,opt,name=exp,proto3" json:"exp,omitempty"`
	PhoneNo              string     `protobuf:"bytes,16,opt,name=phone_no,json=phoneNo,proto3" json:"phone_no,omitempty"`
	Email                string     `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`
	WxUnionid            string     `protobuf:"bytes,18,opt,name=wx_unionid,json=wxUnionid,proto3" json:"wx_unionid,omitempty"`
	LoginName            string     `protobuf:"bytes,19,opt,name=loginName,proto3" json:"loginName,omitempty"`
	MainGameID           int32      `protobuf:"varint,20,opt,name=MainGameID,proto3" json:"MainGameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

type ThreeWayLoginWithDeviceRsp struct {
	Code                 int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token                string    `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Info                 *UserInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ThreeWayLoginWithDeviceRsp) Reset()         { *m = ThreeWayLoginWithDeviceRsp{} }
func (m *ThreeWayLoginWithDeviceRsp) String() string { return proto.CompactTextString(m) }
func (*ThreeWayLoginWithDeviceRsp) ProtoMessage()    {}
func (*ThreeWayLoginWithDeviceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *ThreeWayLoginWithDeviceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeWayLoginWithDeviceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeWayLoginWithDeviceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeWayLoginWithDeviceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeWayLoginWithDeviceRsp.Merge(m, src)
}
func (m *ThreeWayLoginWithDeviceRsp) XXX_Size() int {
	return m.Size()
}
func (m *ThreeWayLoginWithDeviceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeWayLoginWithDeviceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeWayLoginWithDeviceRsp proto.InternalMessageInfo

type GetUserTicketReq struct {
	Userid               int64    `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserTicketReq) Reset()         { *m = GetUserTicketReq{} }
func (m *GetUserTicketReq) String() string { return proto.CompactTextString(m) }
func (*GetUserTicketReq) ProtoMessage()    {}
func (*GetUserTicketReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *GetUserTicketReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserTicketReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserTicketReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserTicketReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserTicketReq.Merge(m, src)
}
func (m *GetUserTicketReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserTicketReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserTicketReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserTicketReq proto.InternalMessageInfo

type GetUserTicketRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Userid               int64    `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Money                uint64   `protobuf:"varint,4,opt,name=money,proto3" json:"money,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserTicketRsp) Reset()         { *m = GetUserTicketRsp{} }
func (m *GetUserTicketRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserTicketRsp) ProtoMessage()    {}
func (*GetUserTicketRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *GetUserTicketRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserTicketRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserTicketRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserTicketRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserTicketRsp.Merge(m, src)
}
func (m *GetUserTicketRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetUserTicketRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserTicketRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserTicketRsp proto.InternalMessageInfo

// 微信登录
type PartnerUserLoginReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PartnerId            int32    `protobuf:"varint,2,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	AccessToken          string   `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Openid               string   `protobuf:"bytes,4,opt,name=openid,proto3" json:"openid,omitempty"`
	Unionid              string   `protobuf:"bytes,5,opt,name=unionid,proto3" json:"unionid,omitempty"`
	MacAddress           string   `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	PhyId                string   `protobuf:"bytes,7,opt,name=phy_id,json=phyId,proto3" json:"phy_id,omitempty"`
	LocalIp              uint32   `protobuf:"varint,8,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	RemoteIp             uint32   `protobuf:"varint,9,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	Authcode             string   `protobuf:"bytes,10,opt,name=authcode,proto3" json:"authcode,omitempty"`
	DeviceInfo           string   `protobuf:"bytes,11,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	Platform             int32    `protobuf:"varint,12,opt,name=platform,proto3" json:"platform,omitempty"`
	Location             string   `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	Marketid             int32    `protobuf:"varint,14,opt,name=marketid,proto3" json:"marketid,omitempty"`
	Version              string   `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerUserLoginReq) Reset()         { *m = PartnerUserLoginReq{} }
func (m *PartnerUserLoginReq) String() string { return proto.CompactTextString(m) }
func (*PartnerUserLoginReq) ProtoMessage()    {}
func (*PartnerUserLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *PartnerUserLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerUserLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerUserLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerUserLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerUserLoginReq.Merge(m, src)
}
func (m *PartnerUserLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *PartnerUserLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerUserLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerUserLoginReq proto.InternalMessageInfo

// 根据房间SN查找所在的场ID请求
type ClientGetMCIDByRoomSNReq struct {
	IUserID              int32    `protobuf:"varint,1,opt,name=iUserID,proto3" json:"iUserID,omitempty"`
	IRoomSN              int32    `protobuf:"varint,2,opt,name=iRoomSN,proto3" json:"iRoomSN,omitempty"`
	PhyId                string   `protobuf:"bytes,3,opt,name=phy_id,json=phyId,proto3" json:"phy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientGetMCIDByRoomSNReq) Reset()         { *m = ClientGetMCIDByRoomSNReq{} }
func (m *ClientGetMCIDByRoomSNReq) String() string { return proto.CompactTextString(m) }
func (*ClientGetMCIDByRoomSNReq) ProtoMessage()    {}
func (*ClientGetMCIDByRoomSNReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *ClientGetMCIDByRoomSNReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetMCIDByRoomSNReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetMCIDByRoomSNReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetMCIDByRoomSNReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetMCIDByRoomSNReq.Merge(m, src)
}
func (m *ClientGetMCIDByRoomSNReq) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetMCIDByRoomSNReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetMCIDByRoomSNReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetMCIDByRoomSNReq proto.InternalMessageInfo

// 根据房间SN查找所在的场ID应答
type ClientGetMCIDByRoomSNRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IMCID                int32    `protobuf:"varint,3,opt,name=iMCID,proto3" json:"iMCID,omitempty"`
	HasPassword          bool     `protobuf:"varint,4,opt,name=has_password,json=hasPassword,proto3" json:"has_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientGetMCIDByRoomSNRsp) Reset()         { *m = ClientGetMCIDByRoomSNRsp{} }
func (m *ClientGetMCIDByRoomSNRsp) String() string { return proto.CompactTextString(m) }
func (*ClientGetMCIDByRoomSNRsp) ProtoMessage()    {}
func (*ClientGetMCIDByRoomSNRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *ClientGetMCIDByRoomSNRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetMCIDByRoomSNRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetMCIDByRoomSNRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetMCIDByRoomSNRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetMCIDByRoomSNRsp.Merge(m, src)
}
func (m *ClientGetMCIDByRoomSNRsp) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetMCIDByRoomSNRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetMCIDByRoomSNRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetMCIDByRoomSNRsp proto.InternalMessageInfo

type GetLoginNameByPartnerUserIDReq struct {
	PartnerId            int32    `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	Unionid              string   `protobuf:"bytes,2,opt,name=unionid,proto3" json:"unionid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLoginNameByPartnerUserIDReq) Reset()         { *m = GetLoginNameByPartnerUserIDReq{} }
func (m *GetLoginNameByPartnerUserIDReq) String() string { return proto.CompactTextString(m) }
func (*GetLoginNameByPartnerUserIDReq) ProtoMessage()    {}
func (*GetLoginNameByPartnerUserIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginNameByPartnerUserIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginNameByPartnerUserIDReq.Merge(m, src)
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginNameByPartnerUserIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginNameByPartnerUserIDReq proto.InternalMessageInfo

type GetLoginNameByPartnerUserIDRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	LoginName            string   `protobuf:"bytes,3,opt,name=loginName,proto3" json:"loginName" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLoginNameByPartnerUserIDRsp) Reset()         { *m = GetLoginNameByPartnerUserIDRsp{} }
func (m *GetLoginNameByPartnerUserIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetLoginNameByPartnerUserIDRsp) ProtoMessage()    {}
func (*GetLoginNameByPartnerUserIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginNameByPartnerUserIDRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginNameByPartnerUserIDRsp.Merge(m, src)
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginNameByPartnerUserIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginNameByPartnerUserIDRsp proto.InternalMessageInfo

type LoginResponse struct {
	Code                 int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token                string    `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Info                 *UserInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

type PhoneCheckReq struct {
	Phone                string   `protobuf:"bytes,1,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	AuthCode             string   `protobuf:"bytes,3,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhoneCheckReq) Reset()         { *m = PhoneCheckReq{} }
func (m *PhoneCheckReq) String() string { return proto.CompactTextString(m) }
func (*PhoneCheckReq) ProtoMessage()    {}
func (*PhoneCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *PhoneCheckReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneCheckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneCheckReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneCheckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneCheckReq.Merge(m, src)
}
func (m *PhoneCheckReq) XXX_Size() int {
	return m.Size()
}
func (m *PhoneCheckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneCheckReq.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneCheckReq proto.InternalMessageInfo

type PhoneCheckInfo struct {
	UserID               int64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LoginName            string   `protobuf:"bytes,2,opt,name=LoginName,proto3" json:"LoginName,omitempty"`
	NickName             string   `protobuf:"bytes,3,opt,name=NickName,proto3" json:"NickName,omitempty"`
	IsOnline             bool     `protobuf:"varint,4,opt,name=IsOnline,proto3" json:"IsOnline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhoneCheckInfo) Reset()         { *m = PhoneCheckInfo{} }
func (m *PhoneCheckInfo) String() string { return proto.CompactTextString(m) }
func (*PhoneCheckInfo) ProtoMessage()    {}
func (*PhoneCheckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *PhoneCheckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneCheckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneCheckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneCheckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneCheckInfo.Merge(m, src)
}
func (m *PhoneCheckInfo) XXX_Size() int {
	return m.Size()
}
func (m *PhoneCheckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneCheckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneCheckInfo proto.InternalMessageInfo

type PhoneCheckRsp struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Infos                []*PhoneCheckInfo `protobuf:"bytes,3,rep,name=Infos,proto3" json:"Infos,omitempty"`
	RegisterAccount      bool              `protobuf:"varint,4,opt,name=RegisterAccount,proto3" json:"RegisterAccount,omitempty"`
	InterErr             string            `protobuf:"bytes,5,opt,name=InterErr,proto3" json:"InterErr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PhoneCheckRsp) Reset()         { *m = PhoneCheckRsp{} }
func (m *PhoneCheckRsp) String() string { return proto.CompactTextString(m) }
func (*PhoneCheckRsp) ProtoMessage()    {}
func (*PhoneCheckRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *PhoneCheckRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneCheckRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneCheckRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneCheckRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneCheckRsp.Merge(m, src)
}
func (m *PhoneCheckRsp) XXX_Size() int {
	return m.Size()
}
func (m *PhoneCheckRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneCheckRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneCheckRsp proto.InternalMessageInfo

type PhoneSMSCodeLoginReq struct {
	Phone                string   `protobuf:"bytes,1,opt,name=Phone,proto3" json:"Phone,omitempty"`
	PartnerID            int32    `protobuf:"varint,2,opt,name=PartnerID,proto3" json:"PartnerID,omitempty"`
	UserID               int32    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MarketID             int32    `protobuf:"varint,4,opt,name=MarketID,proto3" json:"MarketID,omitempty"`
	Version              string   `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	HallID               int32    `protobuf:"varint,6,opt,name=HallID,proto3" json:"HallID,omitempty"`
	ClientName           string   `protobuf:"bytes,7,opt,name=ClientName,proto3" json:"ClientName,omitempty"`
	LocalIp              uint32   `protobuf:"varint,8,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	PhyId                string   `protobuf:"bytes,9,opt,name=phy_id,json=phyId,proto3" json:"phy_id,omitempty"`
	MacAddress           string   `protobuf:"bytes,10,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Location             string   `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	AuthCode             string   `protobuf:"bytes,12,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`
	Password             string   `protobuf:"bytes,13,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhoneSMSCodeLoginReq) Reset()         { *m = PhoneSMSCodeLoginReq{} }
func (m *PhoneSMSCodeLoginReq) String() string { return proto.CompactTextString(m) }
func (*PhoneSMSCodeLoginReq) ProtoMessage()    {}
func (*PhoneSMSCodeLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *PhoneSMSCodeLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneSMSCodeLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneSMSCodeLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneSMSCodeLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneSMSCodeLoginReq.Merge(m, src)
}
func (m *PhoneSMSCodeLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *PhoneSMSCodeLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneSMSCodeLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneSMSCodeLoginReq proto.InternalMessageInfo

//用户下线
type UserOfflineReq struct {
	UserID               int32    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserOfflineReq) Reset()         { *m = UserOfflineReq{} }
func (m *UserOfflineReq) String() string { return proto.CompactTextString(m) }
func (*UserOfflineReq) ProtoMessage()    {}
func (*UserOfflineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *UserOfflineReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOfflineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOfflineReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserOfflineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOfflineReq.Merge(m, src)
}
func (m *UserOfflineReq) XXX_Size() int {
	return m.Size()
}
func (m *UserOfflineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOfflineReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserOfflineReq proto.InternalMessageInfo

type UserOfflineRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserOfflineRsp) Reset()         { *m = UserOfflineRsp{} }
func (m *UserOfflineRsp) String() string { return proto.CompactTextString(m) }
func (*UserOfflineRsp) ProtoMessage()    {}
func (*UserOfflineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *UserOfflineRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOfflineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOfflineRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserOfflineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOfflineRsp.Merge(m, src)
}
func (m *UserOfflineRsp) XXX_Size() int {
	return m.Size()
}
func (m *UserOfflineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOfflineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserOfflineRsp proto.InternalMessageInfo

type GetQPUserInfoByParnerUserIDReq struct {
	PartnerId            int32    `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	Unionid              string   `protobuf:"bytes,2,opt,name=unionid,proto3" json:"unionid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQPUserInfoByParnerUserIDReq) Reset()         { *m = GetQPUserInfoByParnerUserIDReq{} }
func (m *GetQPUserInfoByParnerUserIDReq) String() string { return proto.CompactTextString(m) }
func (*GetQPUserInfoByParnerUserIDReq) ProtoMessage()    {}
func (*GetQPUserInfoByParnerUserIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQPUserInfoByParnerUserIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDReq.Merge(m, src)
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetQPUserInfoByParnerUserIDReq proto.InternalMessageInfo

type GetQPUserInfoByParnerUserIDRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id" validate:"required"`
	BindState            int32    `protobuf:"varint,3,opt,name=bind_state,json=bindState,proto3" json:"bind_state" validate:"required"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQPUserInfoByParnerUserIDRsp) Reset()         { *m = GetQPUserInfoByParnerUserIDRsp{} }
func (m *GetQPUserInfoByParnerUserIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetQPUserInfoByParnerUserIDRsp) ProtoMessage()    {}
func (*GetQPUserInfoByParnerUserIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp.Merge(m, src)
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp proto.InternalMessageInfo

type MarketInfoReq struct {
	MarketId             int32    `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	UserDbid             int32    `protobuf:"varint,2,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	RemoteIp             uint32   `protobuf:"varint,3,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	GameId               uint32   `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PhyId                string   `protobuf:"bytes,5,opt,name=phy_id,json=phyId,proto3" json:"phy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketInfoReq) Reset()         { *m = MarketInfoReq{} }
func (m *MarketInfoReq) String() string { return proto.CompactTextString(m) }
func (*MarketInfoReq) ProtoMessage()    {}
func (*MarketInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *MarketInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketInfoReq.Merge(m, src)
}
func (m *MarketInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *MarketInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_MarketInfoReq proto.InternalMessageInfo

type AuthCodeConfirm struct {
	UserID               int32    `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Authcode             string   `protobuf:"bytes,2,opt,name=authcode,proto3" json:"authcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthCodeConfirm) Reset()         { *m = AuthCodeConfirm{} }
func (m *AuthCodeConfirm) String() string { return proto.CompactTextString(m) }
func (*AuthCodeConfirm) ProtoMessage()    {}
func (*AuthCodeConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *AuthCodeConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthCodeConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthCodeConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthCodeConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthCodeConfirm.Merge(m, src)
}
func (m *AuthCodeConfirm) XXX_Size() int {
	return m.Size()
}
func (m *AuthCodeConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthCodeConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_AuthCodeConfirm proto.InternalMessageInfo

type AuthCodeConfirmRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success              int32    `protobuf:"varint,2,opt,name=success,proto3" json:"success" validate:"required"`
	Userid               int32    `protobuf:"varint,3,opt,name=userid,proto3" json:"userid" validate:"required"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthCodeConfirmRsp) Reset()         { *m = AuthCodeConfirmRsp{} }
func (m *AuthCodeConfirmRsp) String() string { return proto.CompactTextString(m) }
func (*AuthCodeConfirmRsp) ProtoMessage()    {}
func (*AuthCodeConfirmRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *AuthCodeConfirmRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthCodeConfirmRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthCodeConfirmRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthCodeConfirmRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthCodeConfirmRsp.Merge(m, src)
}
func (m *AuthCodeConfirmRsp) XXX_Size() int {
	return m.Size()
}
func (m *AuthCodeConfirmRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthCodeConfirmRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AuthCodeConfirmRsp proto.InternalMessageInfo

type FastRegisterReq struct {
	RegType              int32    `protobuf:"varint,1,opt,name=reg_type,json=regType,proto3" json:"reg_type" validate:"required"`
	RemoteIp             uint32   `protobuf:"varint,2,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	PhyId                string   `protobuf:"bytes,3,opt,name=phy_id,json=phyId,proto3" json:"phy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FastRegisterReq) Reset()         { *m = FastRegisterReq{} }
func (m *FastRegisterReq) String() string { return proto.CompactTextString(m) }
func (*FastRegisterReq) ProtoMessage()    {}
func (*FastRegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *FastRegisterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastRegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastRegisterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastRegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastRegisterReq.Merge(m, src)
}
func (m *FastRegisterReq) XXX_Size() int {
	return m.Size()
}
func (m *FastRegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FastRegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_FastRegisterReq proto.InternalMessageInfo

type FastRegisterRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result               int32    `protobuf:"varint,3,opt,name=result,proto3" json:"result" validate:"required"`
	UserId               int32    `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	Nickname             string   `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FastRegisterRsp) Reset()         { *m = FastRegisterRsp{} }
func (m *FastRegisterRsp) String() string { return proto.CompactTextString(m) }
func (*FastRegisterRsp) ProtoMessage()    {}
func (*FastRegisterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *FastRegisterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastRegisterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastRegisterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastRegisterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastRegisterRsp.Merge(m, src)
}
func (m *FastRegisterRsp) XXX_Size() int {
	return m.Size()
}
func (m *FastRegisterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FastRegisterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FastRegisterRsp proto.InternalMessageInfo

//绑定第三方账号请求
type PartnerBindReq struct {
	PartnerId            int32    `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Openid               string   `protobuf:"bytes,3,opt,name=openid,proto3" json:"openid,omitempty"`
	Unionid              string   `protobuf:"bytes,4,opt,name=unionid,proto3" json:"unionid,omitempty"`
	UserId               int32    `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerBindReq) Reset()         { *m = PartnerBindReq{} }
func (m *PartnerBindReq) String() string { return proto.CompactTextString(m) }
func (*PartnerBindReq) ProtoMessage()    {}
func (*PartnerBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *PartnerBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerBindReq.Merge(m, src)
}
func (m *PartnerBindReq) XXX_Size() int {
	return m.Size()
}
func (m *PartnerBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerBindReq proto.InternalMessageInfo

//更换第三方账号绑定到新亲朋账号请求
type PartnerChangeBindReq struct {
	PartnerId            int32    `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Openid               string   `protobuf:"bytes,3,opt,name=openid,proto3" json:"openid,omitempty"`
	Unionid              string   `protobuf:"bytes,4,opt,name=unionid,proto3" json:"unionid,omitempty"`
	UserId               int32    `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Authcode             string   `protobuf:"bytes,8,opt,name=authcode,proto3" json:"authcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerChangeBindReq) Reset()         { *m = PartnerChangeBindReq{} }
func (m *PartnerChangeBindReq) String() string { return proto.CompactTextString(m) }
func (*PartnerChangeBindReq) ProtoMessage()    {}
func (*PartnerChangeBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *PartnerChangeBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerChangeBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerChangeBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerChangeBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerChangeBindReq.Merge(m, src)
}
func (m *PartnerChangeBindReq) XXX_Size() int {
	return m.Size()
}
func (m *PartnerChangeBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerChangeBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerChangeBindReq proto.InternalMessageInfo

//更换第三方账号绑定到新亲朋账号回应
type PartnerChangeBindRsp struct {
	ErrorCode            int32    `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Authcode             string   `protobuf:"bytes,3,opt,name=authcode,proto3" json:"authcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerChangeBindRsp) Reset()         { *m = PartnerChangeBindRsp{} }
func (m *PartnerChangeBindRsp) String() string { return proto.CompactTextString(m) }
func (*PartnerChangeBindRsp) ProtoMessage()    {}
func (*PartnerChangeBindRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *PartnerChangeBindRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerChangeBindRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerChangeBindRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerChangeBindRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerChangeBindRsp.Merge(m, src)
}
func (m *PartnerChangeBindRsp) XXX_Size() int {
	return m.Size()
}
func (m *PartnerChangeBindRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerChangeBindRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerChangeBindRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonResp)(nil), "pmservice.service.v1.CommonResp")
	proto.RegisterType((*UserRegisterReq)(nil), "pmservice.service.v1.UserRegisterReq")
	proto.RegisterType((*UserRegisterRsp)(nil), "pmservice.service.v1.UserRegisterRsp")
	proto.RegisterType((*GetUserSexReq)(nil), "pmservice.service.v1.GetUserSexReq")
	proto.RegisterType((*GetUserSexRsp)(nil), "pmservice.service.v1.GetUserSexRsp")
	proto.RegisterType((*RefreshUserMoneyReq)(nil), "pmservice.service.v1.RefreshUserMoneyReq")
	proto.RegisterType((*ExtendCoin)(nil), "pmservice.service.v1.ExtendCoin")
	proto.RegisterType((*UserLogoutReq)(nil), "pmservice.service.v1.UserLogoutReq")
	proto.RegisterType((*UserLogoutRsp)(nil), "pmservice.service.v1.UserLogoutRsp")
	proto.RegisterType((*WeXinBindQPReq)(nil), "pmservice.service.v1.WeXinBindQPReq")
	proto.RegisterType((*PartnerBindRsp)(nil), "pmservice.service.v1.PartnerBindRsp")
	proto.RegisterType((*RefreshUserMoneyRsp)(nil), "pmservice.service.v1.RefreshUserMoneyRsp")
	proto.RegisterType((*ThreeWayLoginWithDeviceReq)(nil), "pmservice.service.v1.ThreeWayLoginWithDeviceReq")
	proto.RegisterType((*GameScore)(nil), "pmservice.service.v1.GameScore")
	proto.RegisterType((*UserInfo)(nil), "pmservice.service.v1.UserInfo")
	proto.RegisterType((*ThreeWayLoginWithDeviceRsp)(nil), "pmservice.service.v1.ThreeWayLoginWithDeviceRsp")
	proto.RegisterType((*GetUserTicketReq)(nil), "pmservice.service.v1.GetUserTicketReq")
	proto.RegisterType((*GetUserTicketRsp)(nil), "pmservice.service.v1.GetUserTicketRsp")
	proto.RegisterType((*PartnerUserLoginReq)(nil), "pmservice.service.v1.PartnerUserLoginReq")
	proto.RegisterType((*ClientGetMCIDByRoomSNReq)(nil), "pmservice.service.v1.ClientGetMCIDByRoomSNReq")
	proto.RegisterType((*ClientGetMCIDByRoomSNRsp)(nil), "pmservice.service.v1.ClientGetMCIDByRoomSNRsp")
	proto.RegisterType((*GetLoginNameByPartnerUserIDReq)(nil), "pmservice.service.v1.GetLoginNameByPartnerUserIDReq")
	proto.RegisterType((*GetLoginNameByPartnerUserIDRsp)(nil), "pmservice.service.v1.GetLoginNameByPartnerUserIDRsp")
	proto.RegisterType((*LoginResponse)(nil), "pmservice.service.v1.LoginResponse")
	proto.RegisterType((*PhoneCheckReq)(nil), "pmservice.service.v1.PhoneCheckReq")
	proto.RegisterType((*PhoneCheckInfo)(nil), "pmservice.service.v1.PhoneCheckInfo")
	proto.RegisterType((*PhoneCheckRsp)(nil), "pmservice.service.v1.PhoneCheckRsp")
	proto.RegisterType((*PhoneSMSCodeLoginReq)(nil), "pmservice.service.v1.PhoneSMSCodeLoginReq")
	proto.RegisterType((*UserOfflineReq)(nil), "pmservice.service.v1.UserOfflineReq")
	proto.RegisterType((*UserOfflineRsp)(nil), "pmservice.service.v1.UserOfflineRsp")
	proto.RegisterType((*GetQPUserInfoByParnerUserIDReq)(nil), "pmservice.service.v1.GetQPUserInfoByParnerUserIDReq")
	proto.RegisterType((*GetQPUserInfoByParnerUserIDRsp)(nil), "pmservice.service.v1.GetQPUserInfoByParnerUserIDRsp")
	proto.RegisterType((*MarketInfoReq)(nil), "pmservice.service.v1.MarketInfoReq")
	proto.RegisterType((*AuthCodeConfirm)(nil), "pmservice.service.v1.AuthCodeConfirm")
	proto.RegisterType((*AuthCodeConfirmRsp)(nil), "pmservice.service.v1.AuthCodeConfirmRsp")
	proto.RegisterType((*FastRegisterReq)(nil), "pmservice.service.v1.FastRegisterReq")
	proto.RegisterType((*FastRegisterRsp)(nil), "pmservice.service.v1.FastRegisterRsp")
	proto.RegisterType((*PartnerBindReq)(nil), "pmservice.service.v1.PartnerBindReq")
	proto.RegisterType((*PartnerChangeBindReq)(nil), "pmservice.service.v1.PartnerChangeBindReq")
	proto.RegisterType((*PartnerChangeBindRsp)(nil), "pmservice.service.v1.PartnerChangeBindRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 2582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0xdf, 0x9e, 0x2f, 0x7b, 0x9e, 0x3d, 0x76, 0xb6, 0xe3, 0x75, 0x66, 0x9b, 0xc4, 0xe3, 0x94,
	0x9d, 0x5d, 0xef, 0x42, 0xec, 0xdd, 0x40, 0x40, 0x09, 0xb0, 0x22, 0x63, 0x87, 0x30, 0x52, 0x1c,
	0x7b, 0xdb, 0x59, 0x02, 0x48, 0x68, 0xd4, 0x9e, 0x2e, 0xcf, 0xb4, 0x3c, 0xd3, 0xdd, 0xdb, 0xdd,
	0xe3, 0xd8, 0x42, 0x02, 0x81, 0x40, 0x2b, 0xc1, 0x01, 0xc1, 0x22, 0xc4, 0x81, 0x9c, 0x38, 0x70,
	0xe2, 0x2f, 0x00, 0x89, 0x03, 0x97, 0x15, 0x5c, 0x40, 0x70, 0xe1, 0x62, 0x20, 0x70, 0xf2, 0x05,
	0x89, 0x0b, 0x57, 0x54, 0xaf, 0xaa, 0x7b, 0xba, 0x7a, 0xba, 0xdb, 0x76, 0x36, 0x08, 0x4e, 0x9e,
	0xf7, 0xea, 0x55, 0xd5, 0xab, 0xf7, 0x7e, 0xf5, 0x3e, 0xaa, 0x0d, 0x55, 0xc3, 0xb5, 0x56, 0x5d,
	0xcf, 0x09, 0x1c, 0x75, 0xce, 0x1d, 0xf8, 0xd4, 0x3b, 0xb0, 0x3a, 0x74, 0x35, 0xfc, 0x7b, 0xf0,
	0xa6, 0x76, 0xbd, 0x6b, 0x05, 0xbd, 0xe1, 0xee, 0x6a, 0xc7, 0x19, 0xac, 0x75, 0x9d, 0xae, 0xb3,
	0x86, 0xc2, 0xbb, 0xc3, 0x3d, 0xa4, 0x90, 0xc0, 0x5f, 0x7c, 0x11, 0xed, 0x72, 0xd7, 0x71, 0xba,
	0x7d, 0xba, 0x66, 0xb8, 0xd6, 0x9a, 0x61, 0xdb, 0x4e, 0x60, 0x04, 0x96, 0x63, 0xfb, 0x7c, 0x94,
	0xdc, 0x06, 0x58, 0x77, 0x06, 0x03, 0xc7, 0xd6, 0xa9, 0xef, 0xaa, 0x2a, 0x94, 0x3a, 0x8e, 0x49,
	0xeb, 0xca, 0xa2, 0xb2, 0x52, 0xd6, 0xf1, 0xb7, 0x5a, 0x87, 0x89, 0x01, 0xf5, 0x7d, 0xa3, 0x4b,
	0xeb, 0x85, 0x45, 0x65, 0xa5, 0xaa, 0x87, 0x24, 0xf9, 0xad, 0x02, 0xb3, 0xef, 0xf8, 0xd4, 0xd3,
	0x69, 0xd7, 0xf2, 0x03, 0xf6, 0xf7, 0x5d, 0xf5, 0x23, 0x50, 0x1d, 0xfa, 0xd4, 0x6b, 0xdb, 0xc6,
	0x80, 0x2f, 0x53, 0xd5, 0x27, 0x19, 0xe3, 0x81, 0x31, 0xa0, 0xaa, 0x06, 0x93, 0xae, 0xe1, 0xfb,
	0x8f, 0x1d, 0xcf, 0x14, 0x6b, 0x45, 0x34, 0x9b, 0x68, 0x5b, 0x9d, 0x7d, 0x3e, 0xb1, 0xc8, 0x07,
	0x19, 0x03, 0x27, 0x5e, 0x82, 0x89, 0xae, 0x31, 0xa0, 0x6d, 0xcb, 0xac, 0x97, 0x50, 0xb5, 0x0a,
	0x23, 0x5b, 0x38, 0xcb, 0xa3, 0x03, 0x27, 0xa0, 0x6d, 0xcb, 0xad, 0x97, 0x17, 0x95, 0x95, 0x9a,
	0x3e, 0xc9, 0x19, 0x2d, 0x57, 0x9d, 0x83, 0xb2, 0xef, 0x0c, 0x3b, 0xb4, 0x5e, 0xc1, 0x39, 0x9c,
	0x50, 0x5f, 0x82, 0x8a, 0xdb, 0x3b, 0x62, 0x4b, 0x4d, 0xe0, 0x2e, 0x65, 0xb7, 0x77, 0xd4, 0x32,
	0x49, 0x90, 0x38, 0xcb, 0x79, 0xad, 0xa1, 0xce, 0x43, 0xc5, 0xa3, 0xfe, 0xb0, 0x1f, 0xa0, 0xf6,
	0x65, 0x5d, 0x50, 0x91, 0x45, 0xcc, 0x5d, 0xa1, 0x7d, 0x91, 0x5b, 0x64, 0x63, 0xd7, 0x32, 0xc9,
	0xc7, 0xa0, 0x76, 0x8f, 0x06, 0x6c, 0xe3, 0x1d, 0x7a, 0x18, 0xb7, 0x1f, 0x4a, 0xf3, 0x8d, 0x47,
	0xd2, 0xef, 0x29, 0x92, 0xf8, 0x73, 0x53, 0xf1, 0x0d, 0x28, 0xfa, 0xf4, 0x90, 0x9b, 0xb6, 0xb9,
	0x70, 0x72, 0xdc, 0x60, 0xe4, 0xbf, 0x8e, 0x1b, 0x17, 0x0f, 0x8c, 0xbe, 0x65, 0x1a, 0x01, 0xbd,
	0x4d, 0x3c, 0xfa, 0xee, 0xd0, 0xf2, 0xa8, 0x49, 0x74, 0x36, 0x46, 0x6e, 0xc0, 0x45, 0x9d, 0xee,
	0x79, 0xd4, 0xef, 0x31, 0x65, 0x36, 0x1d, 0x9b, 0x1e, 0x9d, 0xaa, 0xfd, 0x01, 0xc0, 0xdd, 0xc3,
	0x80, 0xda, 0xe6, 0xba, 0x63, 0xd9, 0xea, 0x75, 0x28, 0x84, 0x32, 0xcd, 0x2b, 0x27, 0xc7, 0x8d,
	0x82, 0x65, 0x66, 0xed, 0x58, 0xb0, 0x4c, 0xf5, 0x16, 0x54, 0x8c, 0x81, 0x33, 0xb4, 0x03, 0x3c,
	0x53, 0xa9, 0x79, 0xf5, 0xe4, 0xb8, 0x21, 0x38, 0x59, 0xd3, 0xc4, 0x30, 0xd1, 0xa1, 0xc6, 0x94,
	0xbc, 0xef, 0x74, 0x9d, 0x61, 0x70, 0x9a, 0x96, 0xea, 0x32, 0xd4, 0x3a, 0xd4, 0x0b, 0xac, 0x3d,
	0xab, 0x83, 0x17, 0x45, 0xd8, 0x50, 0x66, 0x92, 0xcf, 0x4a, 0x6b, 0x9e, 0xfb, 0xe6, 0x74, 0x61,
	0xe6, 0x11, 0xfd, 0x92, 0x65, 0x37, 0x2d, 0xdb, 0x7c, 0x7b, 0x9b, 0xe9, 0x54, 0x87, 0x89, 0xa1,
	0x6d, 0x39, 0xb6, 0xd0, 0xa8, 0xaa, 0x87, 0x24, 0x1b, 0x31, 0x3a, 0x9d, 0xe8, 0xe8, 0x55, 0x3d,
	0x24, 0xd5, 0xab, 0x30, 0x1d, 0x5e, 0x9f, 0xf6, 0xc0, 0xbc, 0x29, 0x6e, 0xcd, 0x54, 0xc8, 0xdb,
	0x34, 0x6f, 0x92, 0xaf, 0xc1, 0xcc, 0xb6, 0xe1, 0x05, 0x36, 0xf5, 0xd8, 0x56, 0xcf, 0x0f, 0x31,
	0x4b, 0x50, 0xa3, 0x9e, 0xe7, 0x78, 0xed, 0x70, 0x5e, 0x09, 0xe7, 0x4d, 0x23, 0x73, 0x53, 0x9c,
	0xf2, 0x17, 0x85, 0x14, 0x94, 0xfc, 0xf7, 0xee, 0x55, 0xdc, 0x8b, 0x9f, 0x84, 0xf2, 0x80, 0x6d,
	0x87, 0x31, 0xa1, 0xd4, 0x5c, 0x3c, 0x39, 0x6e, 0x70, 0x46, 0x16, 0x58, 0xf8, 0x28, 0x83, 0x59,
	0x60, 0x75, 0xf6, 0x69, 0x80, 0x31, 0x43, 0xc0, 0x8c, 0x73, 0x32, 0x61, 0xc6, 0x87, 0xd5, 0xcf,
	0x01, 0xd0, 0x08, 0xde, 0xf5, 0x89, 0xc5, 0xe2, 0xca, 0xd4, 0x8d, 0xc5, 0xd5, 0xb4, 0x08, 0xbe,
	0x3a, 0xba, 0x06, 0x7a, 0x6c, 0x0e, 0xf9, 0x53, 0x01, 0xb4, 0x87, 0x3d, 0x8f, 0xd2, 0x47, 0xc6,
	0xd1, 0x7d, 0xa7, 0x6b, 0xd9, 0x8f, 0xac, 0xa0, 0xb7, 0x41, 0xd9, 0x2c, 0x06, 0x91, 0x58, 0x10,
	0x54, 0xa4, 0x20, 0xf8, 0x61, 0x10, 0xa2, 0x36, 0x60, 0x6a, 0x60, 0x74, 0xda, 0x86, 0x69, 0x7a,
	0xd4, 0xf7, 0x85, 0x1f, 0x61, 0x60, 0x74, 0xee, 0x70, 0x4e, 0x2c, 0x5e, 0x96, 0x63, 0xf1, 0x92,
	0xc5, 0x72, 0x63, 0x18, 0xf4, 0xd0, 0x91, 0x15, 0x1e, 0xae, 0x43, 0x5a, 0x5d, 0x00, 0x30, 0x51,
	0xed, 0x96, 0xbd, 0xe7, 0x88, 0x30, 0x1b, 0xe3, 0x60, 0x1e, 0xe8, 0x1b, 0xc1, 0x9e, 0xe3, 0x0d,
	0xea, 0x93, 0xdc, 0x73, 0x21, 0xcd, 0xc6, 0xfa, 0x8e, 0xb8, 0x7a, 0x55, 0xbe, 0x6e, 0x48, 0xb3,
	0xb1, 0x81, 0xe1, 0xed, 0xd3, 0xc0, 0x32, 0xeb, 0xc0, 0xe7, 0x85, 0x34, 0x33, 0xc2, 0x01, 0xf5,
	0x7c, 0x36, 0x6d, 0x8a, 0x1b, 0x41, 0x90, 0xe4, 0x97, 0x0a, 0x54, 0xef, 0x19, 0x03, 0xba, 0xd3,
	0x71, 0x3c, 0x8a, 0x49, 0x81, 0xfd, 0x40, 0x1b, 0x16, 0x75, 0x4e, 0x30, 0x2e, 0xc7, 0x4b, 0x81,
	0x73, 0x39, 0x1a, 0x2e, 0x40, 0x31, 0x30, 0x0e, 0x05, 0xee, 0xd8, 0xcf, 0x18, 0x18, 0x4b, 0x8b,
	0xc5, 0x18, 0x18, 0xe7, 0x23, 0xdc, 0x20, 0xe0, 0x32, 0x40, 0x51, 0x79, 0x06, 0x50, 0xfc, 0xb9,
	0x04, 0x93, 0xec, 0xf6, 0xa0, 0xe1, 0xc6, 0x22, 0x57, 0x2d, 0x86, 0x79, 0xe9, 0x0c, 0xa5, 0xf0,
	0x0c, 0x63, 0xf1, 0xac, 0x98, 0x12, 0xcf, 0x98, 0x65, 0x59, 0xb2, 0xc5, 0xe4, 0x5b, 0x1a, 0x25,
	0x5f, 0x46, 0xab, 0x37, 0xa1, 0x8c, 0xa6, 0xc3, 0xa3, 0x4d, 0xdd, 0x68, 0xa4, 0xab, 0x1f, 0x59,
	0x58, 0xe7, 0xd2, 0x4c, 0xd7, 0x8e, 0x63, 0xef, 0x79, 0x06, 0x83, 0x4e, 0x85, 0xeb, 0xca, 0x19,
	0x2d, 0x53, 0xbd, 0x02, 0x80, 0x07, 0xe9, 0xd3, 0x03, 0xda, 0x47, 0x84, 0xd4, 0x74, 0x3c, 0xda,
	0x7d, 0xc6, 0x60, 0x86, 0x67, 0x09, 0x89, 0x61, 0xe3, 0x45, 0x4c, 0x38, 0xea, 0xcb, 0x30, 0x69,
	0x1c, 0x18, 0x01, 0x2e, 0x56, 0x45, 0xf1, 0x09, 0xa4, 0xf9, 0x5a, 0xbb, 0x86, 0xbd, 0xdf, 0xe6,
	0x87, 0x07, 0x3c, 0x7c, 0x95, 0x71, 0x30, 0xe0, 0x48, 0x40, 0x9d, 0x4a, 0x00, 0x75, 0x19, 0x66,
	0xe8, 0x61, 0xd0, 0xe6, 0xa1, 0x0c, 0x25, 0xa6, 0xd1, 0xd7, 0xd3, 0xf4, 0x30, 0xb8, 0xcb, 0x98,
	0xeb, 0x4c, 0xaa, 0x01, 0x53, 0x4c, 0x2a, 0x8c, 0x4f, 0x35, 0x8e, 0x67, 0x7a, 0x18, 0x6c, 0x8e,
	0x42, 0x94, 0xf0, 0xfe, 0x8c, 0xe4, 0xfd, 0x0b, 0x50, 0xa4, 0x87, 0x6e, 0x7d, 0x16, 0x99, 0xec,
	0x27, 0x3b, 0x86, 0xdb, 0x73, 0x6c, 0xda, 0xb6, 0x9d, 0xfa, 0x05, 0x0e, 0x53, 0xa4, 0x1f, 0x38,
	0xcc, 0x7d, 0x74, 0x60, 0x58, 0xfd, 0xfa, 0x8b, 0xfc, 0x9a, 0x21, 0xc1, 0x0e, 0xf7, 0xf8, 0xb0,
	0x1d, 0xa6, 0x06, 0x15, 0x87, 0xaa, 0x8f, 0x0f, 0xdf, 0x11, 0xc9, 0xe1, 0x32, 0x54, 0xfb, 0x2c,
	0x52, 0xb0, 0x2a, 0xa9, 0x7e, 0x91, 0x8f, 0x46, 0x0c, 0x76, 0x0f, 0x37, 0x0d, 0xcb, 0x66, 0xae,
	0x69, 0x6d, 0xd4, 0xe7, 0xf0, 0x68, 0x31, 0x0e, 0xf9, 0x91, 0x92, 0x1d, 0x70, 0xce, 0x1d, 0xa7,
	0xe7, 0xa0, 0x1c, 0x38, 0xfb, 0x34, 0x04, 0x18, 0x27, 0xd4, 0x1b, 0x50, 0xb2, 0x58, 0x10, 0x28,
	0x21, 0x76, 0x16, 0xd2, 0xb1, 0x13, 0xe2, 0x5b, 0x47, 0x59, 0xf2, 0x3a, 0x5c, 0x10, 0x55, 0xce,
	0x43, 0xb4, 0x23, 0x0b, 0x7e, 0xf3, 0x50, 0x61, 0xf0, 0x10, 0xb0, 0x2f, 0xea, 0x82, 0x22, 0x76,
	0x52, 0xf6, 0x59, 0xf2, 0x8b, 0x58, 0xb9, 0x18, 0x5f, 0x79, 0x74, 0x9d, 0x4a, 0xb1, 0xeb, 0x44,
	0x7e, 0x55, 0x84, 0x8b, 0x22, 0xa3, 0x8a, 0x02, 0xc0, 0xb2, 0x73, 0x83, 0xf3, 0x15, 0x00, 0x97,
	0xcb, 0xb3, 0xb1, 0x02, 0x8e, 0x55, 0x05, 0xa7, 0x65, 0xb2, 0x08, 0x6d, 0x74, 0x3a, 0xd4, 0xf7,
	0xdb, 0x71, 0xe3, 0x4d, 0x71, 0xde, 0x43, 0x34, 0xe1, 0x3c, 0x54, 0x1c, 0x97, 0xda, 0x22, 0xcb,
	0x55, 0x75, 0x41, 0xc5, 0x4b, 0x86, 0xb2, 0x5c, 0x32, 0x24, 0x62, 0x7a, 0x25, 0x27, 0xa6, 0xc7,
	0x6b, 0x60, 0x86, 0x4e, 0x16, 0x6b, 0xfb, 0xac, 0x98, 0x9e, 0xe4, 0x97, 0x0c, 0xe9, 0x96, 0x2b,
	0x17, 0xda, 0xd5, 0x44, 0xa1, 0x1d, 0xbf, 0x62, 0x90, 0x9b, 0x0b, 0xa6, 0x72, 0x73, 0xc1, 0x74,
	0x4e, 0x2e, 0xa8, 0xe5, 0xe4, 0x82, 0x99, 0xec, 0x5c, 0x30, 0x2b, 0xe7, 0x02, 0x0a, 0xf5, 0xf5,
	0xbe, 0x45, 0xed, 0xe0, 0x1e, 0x0d, 0x36, 0xd7, 0x5b, 0x1b, 0xcd, 0x23, 0xdd, 0x71, 0x06, 0x3b,
	0x0f, 0x44, 0x09, 0x66, 0x21, 0x12, 0x37, 0x84, 0x0b, 0x43, 0x12, 0x47, 0xb8, 0x9c, 0x70, 0x60,
	0x48, 0xc6, 0x0c, 0x59, 0x8c, 0x37, 0x13, 0xdf, 0x54, 0xb2, 0xf6, 0x79, 0x96, 0x6b, 0x65, 0xb1,
	0x15, 0x44, 0x16, 0xe2, 0x04, 0x83, 0x4d, 0xcf, 0xf0, 0xdb, 0x51, 0x37, 0xc5, 0x90, 0x31, 0xa9,
	0x4f, 0xf5, 0x0c, 0x7f, 0x5b, 0xb0, 0xc8, 0x97, 0x61, 0xe1, 0x1e, 0x0d, 0xee, 0x87, 0xc1, 0xa0,
	0x79, 0x14, 0x83, 0x6d, 0x6b, 0x83, 0x1d, 0x58, 0x86, 0xa6, 0x92, 0x84, 0x66, 0x0c, 0x5f, 0x05,
	0x09, 0x5f, 0xe4, 0x87, 0x4a, 0xfe, 0xda, 0xe7, 0x3e, 0x64, 0x33, 0x1e, 0xc6, 0xd0, 0x92, 0xcd,
	0xe5, 0x93, 0xe3, 0xc6, 0x88, 0x99, 0x55, 0x7c, 0x8d, 0x24, 0xb0, 0x39, 0x12, 0xd7, 0xd1, 0x77,
	0x1d, 0xdb, 0xa7, 0xff, 0xb3, 0xf8, 0xf5, 0x55, 0xa8, 0x6d, 0xb3, 0xa0, 0xbe, 0xde, 0xa3, 0x9d,
	0x7d, 0x66, 0xe8, 0x39, 0x28, 0x23, 0x43, 0x94, 0xf6, 0x9c, 0x60, 0x08, 0xde, 0x4e, 0x74, 0xc3,
	0x21, 0xcd, 0xc6, 0xee, 0x0c, 0x83, 0x1e, 0x4b, 0x3f, 0x61, 0x33, 0x1c, 0xd2, 0xe4, 0xeb, 0x30,
	0x33, 0x5a, 0x1e, 0xef, 0xd0, 0x3c, 0x54, 0x62, 0xc0, 0x2d, 0xea, 0x82, 0x62, 0xd9, 0x21, 0xf2,
	0x91, 0xd8, 0x62, 0xc4, 0x60, 0x7b, 0x3c, 0x10, 0x0d, 0x76, 0xb8, 0x47, 0x48, 0xb3, 0xb1, 0x96,
	0xbf, 0x65, 0xf7, 0x2d, 0x9b, 0x0a, 0x6c, 0x45, 0x34, 0xf9, 0xb5, 0x22, 0x9d, 0xef, 0xdc, 0xce,
	0xbe, 0x0d, 0x65, 0xa6, 0xb5, 0x5f, 0x2f, 0x62, 0x39, 0xb4, 0x9c, 0x6e, 0x53, 0xf9, 0x88, 0x3a,
	0x9f, 0xa2, 0xae, 0xc0, 0x6c, 0xd8, 0xa1, 0xdf, 0x11, 0x25, 0x2f, 0x57, 0x2f, 0xc9, 0xc6, 0x13,
	0xd8, 0x01, 0xf5, 0xee, 0x7a, 0x9e, 0x08, 0x8f, 0x11, 0x4d, 0xfe, 0x5d, 0x80, 0x39, 0x5c, 0x7f,
	0x67, 0x73, 0x87, 0x99, 0x34, 0x8a, 0xe2, 0xe9, 0x8e, 0xba, 0x0c, 0x55, 0x81, 0xef, 0xd6, 0x46,
	0x18, 0xc1, 0x23, 0x46, 0xcc, 0xf8, 0xa2, 0x3f, 0x11, 0xc6, 0xd7, 0x60, 0x72, 0x13, 0x03, 0x52,
	0x6b, 0x23, 0x6c, 0x4f, 0x42, 0x9a, 0x19, 0xe7, 0x8b, 0x22, 0x40, 0x89, 0xd0, 0x2d, 0x48, 0xb6,
	0xda, 0x17, 0x8c, 0x7e, 0xbf, 0xb5, 0x21, 0x1e, 0x2d, 0x04, 0xc5, 0xc2, 0x28, 0x0f, 0x28, 0xe8,
	0x2e, 0x51, 0x52, 0x8f, 0x38, 0x79, 0xa1, 0x7b, 0x14, 0xa3, 0xaa, 0xf1, 0x60, 0x9f, 0x48, 0x12,
	0x30, 0x96, 0x24, 0xe2, 0xd1, 0x77, 0x6a, 0x3c, 0xfa, 0x46, 0xf8, 0x9c, 0x96, 0xf1, 0x29, 0xe1,
	0xba, 0x26, 0xe3, 0x9a, 0xac, 0xc0, 0x0c, 0x33, 0xcf, 0xd6, 0xde, 0x1e, 0x83, 0x92, 0x48, 0xec,
	0x69, 0xe6, 0x23, 0x6f, 0xc9, 0x92, 0xe7, 0x6e, 0xb1, 0x79, 0xf8, 0x7b, 0x7b, 0x3b, 0xbc, 0x9b,
	0x18, 0xa3, 0x9e, 0x4f, 0xf8, 0xfb, 0x83, 0x92, 0xbf, 0x76, 0x86, 0xae, 0x9f, 0x86, 0x09, 0xac,
	0x79, 0xc3, 0x32, 0xa0, 0x49, 0x4e, 0x8e, 0x1b, 0x21, 0x2b, 0xb3, 0xbb, 0x64, 0xe3, 0x2d, 0x53,
	0xdd, 0x00, 0xd8, 0xb5, 0x6c, 0xb3, 0xed, 0x07, 0x46, 0xc0, 0xaf, 0x6b, 0xb9, 0x79, 0xed, 0xe4,
	0xb8, 0x11, 0xe3, 0x66, 0xc6, 0x48, 0x26, 0xb2, 0xc3, 0x24, 0xe2, 0xe6, 0x2a, 0xc9, 0xe6, 0xfa,
	0xb1, 0x02, 0x35, 0x01, 0x4f, 0x76, 0xdd, 0xf8, 0x2b, 0x09, 0x4f, 0xa8, 0x23, 0xeb, 0x88, 0x0c,
	0xcb, 0xdf, 0xdd, 0x46, 0x8d, 0x48, 0x21, 0xd1, 0x7c, 0x4b, 0xb5, 0x42, 0x31, 0x51, 0x2b, 0x24,
	0x9e, 0xf2, 0x6a, 0x51, 0xa1, 0x94, 0xde, 0x67, 0x92, 0xbb, 0x30, 0x1b, 0x22, 0x6b, 0xdd, 0xb1,
	0xf7, 0x2c, 0x6f, 0x10, 0x56, 0x6c, 0x51, 0x9e, 0x16, 0x94, 0x54, 0x86, 0x14, 0xe4, 0x32, 0x84,
	0x35, 0x81, 0x6a, 0x62, 0x9d, 0x2c, 0x3f, 0x7d, 0x06, 0x26, 0xfc, 0x21, 0xd6, 0x5f, 0x71, 0x3f,
	0x09, 0x56, 0x96, 0x91, 0xc3, 0x71, 0xf5, 0x96, 0x54, 0x4e, 0x96, 0xf9, 0x0b, 0x02, 0xe7, 0xe4,
	0xfa, 0x98, 0x97, 0x2d, 0x19, 0xde, 0xf9, 0x8e, 0x02, 0xb3, 0x9f, 0x37, 0xfc, 0x20, 0xfe, 0xd2,
	0xfa, 0x16, 0x4c, 0x7a, 0xb4, 0xdb, 0x0e, 0x8e, 0x5c, 0xa1, 0x7e, 0x73, 0xe9, 0xe4, 0xb8, 0x11,
	0xf1, 0x32, 0x15, 0xf5, 0x68, 0xf7, 0xe1, 0x91, 0x4b, 0x65, 0x2f, 0x15, 0x12, 0x5e, 0xca, 0xa8,
	0x6b, 0xfe, 0x92, 0xd4, 0xe3, 0xdc, 0xc1, 0xff, 0x96, 0xfc, 0x9a, 0xc3, 0xcd, 0xc3, 0x39, 0x99,
	0xe6, 0x11, 0x3d, 0xf6, 0xa5, 0xd1, 0xfd, 0x29, 0xc5, 0xfc, 0x6e, 0x32, 0x0d, 0xb0, 0x71, 0xe5,
	0xb8, 0xc1, 0xdf, 0xd2, 0x53, 0x73, 0x25, 0xf1, 0xd4, 0x1c, 0x6f, 0x76, 0x27, 0xe4, 0x66, 0x97,
	0x3c, 0x51, 0xe4, 0x17, 0xb3, 0xd3, 0xe3, 0x44, 0xb2, 0x82, 0x2f, 0xe4, 0x55, 0xf0, 0xc5, 0xac,
	0x0a, 0xbe, 0x24, 0x57, 0xf0, 0xb1, 0xb3, 0x96, 0xe3, 0x67, 0x25, 0xff, 0x54, 0x60, 0x4e, 0xe8,
	0xb7, 0xde, 0x33, 0xec, 0x2e, 0xfd, 0x7f, 0xd4, 0x32, 0xf2, 0x48, 0x25, 0xc3, 0x23, 0x13, 0xe3,
	0x1e, 0x89, 0x6e, 0xee, 0x64, 0xe2, 0xe6, 0xee, 0xa7, 0x1d, 0xd8, 0x77, 0xd9, 0x81, 0x63, 0x7d,
	0xbb, 0x38, 0x30, 0x8d, 0x9a, 0xf6, 0x6c, 0x08, 0xc6, 0x37, 0x2b, 0xca, 0x9b, 0xdd, 0x78, 0x72,
	0x09, 0xaa, 0xdb, 0x61, 0x39, 0xa2, 0xfe, 0x46, 0x81, 0xe5, 0x2d, 0x3b, 0xa3, 0x43, 0x16, 0x71,
	0x72, 0x48, 0xfd, 0x40, 0x7d, 0x23, 0xbd, 0x86, 0xc9, 0x7e, 0xcc, 0xd3, 0xce, 0x39, 0xc3, 0x77,
	0xc9, 0xa7, 0xbe, 0xf5, 0xc7, 0x7f, 0xbc, 0x5f, 0x78, 0x93, 0xac, 0xad, 0x45, 0x33, 0xd7, 0xce,
	0xa4, 0xdc, 0x0f, 0x14, 0x78, 0x69, 0xcb, 0x66, 0x36, 0xa4, 0x76, 0x10, 0x96, 0x3a, 0x38, 0xf2,
	0x5a, 0x46, 0xe9, 0x35, 0xde, 0xdf, 0x6a, 0x4b, 0xe9, 0xa2, 0x52, 0xc1, 0x4d, 0x56, 0x50, 0x45,
	0x42, 0x16, 0x25, 0x15, 0xd3, 0x76, 0x7e, 0x4f, 0x81, 0x8b, 0x5b, 0xb6, 0x54, 0x25, 0x23, 0x7f,
	0xe9, 0xb4, 0x62, 0x30, 0x47, 0x17, 0xa9, 0x26, 0x25, 0xaf, 0xa0, 0x2e, 0x8b, 0x64, 0x41, 0xd6,
	0x65, 0x6c, 0xc7, 0x9f, 0x2a, 0xa0, 0x09, 0x7e, 0xa2, 0x1a, 0xc4, 0xe1, 0xd7, 0x73, 0xf6, 0x4a,
	0xc8, 0x9f, 0xcd, 0x46, 0xd7, 0x51, 0xaf, 0x57, 0xc9, 0xb5, 0x71, 0xbd, 0xd2, 0xf6, 0x7f, 0x5f,
	0x81, 0xf9, 0x2d, 0x3b, 0xf9, 0x1c, 0x82, 0x43, 0xaf, 0x64, 0x3c, 0xc4, 0x25, 0x64, 0xb5, 0x33,
	0xc9, 0xf9, 0x2e, 0x79, 0x0d, 0x35, 0x5b, 0x22, 0x57, 0x25, 0xcd, 0x52, 0xb7, 0xfe, 0x3e, 0x42,
	0x2a, 0xf1, 0xed, 0x0f, 0x47, 0xae, 0x65, 0x77, 0x48, 0x31, 0x51, 0xed, 0x2c, 0x62, 0xbe, 0x9b,
	0x01, 0xa8, 0xb4, 0x7d, 0xbf, 0x01, 0xb3, 0xa8, 0x2b, 0xff, 0x8c, 0x96, 0x87, 0x25, 0xe9, 0x7b,
	0x9b, 0x76, 0xba, 0x90, 0xef, 0x12, 0x82, 0x6a, 0x5c, 0x26, 0x5a, 0xd2, 0x32, 0xb1, 0xdd, 0x9e,
	0x28, 0x50, 0xdf, 0xb2, 0x75, 0x9a, 0xfc, 0x26, 0x96, 0x77, 0xd1, 0x52, 0x3e, 0xa1, 0x69, 0x67,
	0x15, 0xf5, 0x5d, 0xf2, 0x51, 0x54, 0xeb, 0x1a, 0x59, 0x92, 0xd4, 0xca, 0x50, 0xe1, 0x7b, 0x0a,
	0xcc, 0x6d, 0xd9, 0xf2, 0x57, 0x27, 0x1c, 0xc8, 0xe8, 0xbf, 0x64, 0x49, 0x6d, 0x39, 0x37, 0x54,
	0x88, 0x98, 0x4c, 0x5e, 0x45, 0x8d, 0xae, 0x92, 0x86, 0xa4, 0x51, 0xca, 0xa6, 0x3f, 0x47, 0x6b,
	0x8d, 0x3f, 0xc2, 0xe0, 0xe0, 0x6a, 0xfa, 0x5e, 0x59, 0x0f, 0x37, 0xda, 0xb9, 0xe4, 0x33, 0xed,
	0x96, 0xa1, 0xcc, 0xef, 0x30, 0x07, 0xe4, 0xbf, 0xa4, 0xa0, 0xe0, 0x27, 0x32, 0x91, 0x94, 0x33,
	0x53, 0x7b, 0x86, 0x59, 0x99, 0xb9, 0xe0, 0x0c, 0x4a, 0xf2, 0xb8, 0x2b, 0x7d, 0x0e, 0xcd, 0xbb,
	0x2b, 0x92, 0xa0, 0x76, 0xba, 0x50, 0x66, 0xdc, 0x1d, 0xdf, 0x91, 0xe3, 0x51, 0x6e, 0x06, 0xf3,
	0xf0, 0x28, 0x4b, 0x6a, 0x67, 0x90, 0xca, 0xc4, 0x63, 0xca, 0xa6, 0x91, 0x97, 0x73, 0x1a, 0xc6,
	0x53, 0xbc, 0x9c, 0x33, 0x53, 0x7b, 0x86, 0x59, 0x79, 0x5e, 0x3e, 0x4d, 0xc9, 0x6f, 0xa3, 0x97,
	0xa5, 0x76, 0x2e, 0xcf, 0xcb, 0x92, 0xa0, 0x96, 0xf1, 0x79, 0x6a, 0xf4, 0x5f, 0x22, 0x19, 0x2e,
	0x1e, 0xdf, 0xee, 0xbb, 0x0a, 0xbc, 0xb8, 0x65, 0x27, 0xbb, 0xb7, 0x8c, 0xd0, 0x9f, 0x10, 0xd3,
	0x56, 0xce, 0x24, 0xc6, 0xcc, 0xb4, 0x8c, 0xea, 0x2c, 0x90, 0xcb, 0x92, 0x3a, 0xc9, 0x6d, 0x79,
	0xca, 0x4a, 0x34, 0x51, 0x79, 0x29, 0x2b, 0x21, 0xaa, 0x9d, 0x45, 0x2c, 0x33, 0x65, 0xa5, 0xed,
	0xcb, 0x6f, 0x80, 0xdc, 0x6c, 0xe4, 0xdd, 0x00, 0x59, 0xf2, 0x43, 0x45, 0xe4, 0x94, 0x4d, 0x7f,
	0xc6, 0xeb, 0xa0, 0x94, 0xd6, 0x22, 0xb7, 0x0e, 0x4a, 0x91, 0xd7, 0xce, 0x2c, 0xeb, 0xbb, 0x59,
	0xe5, 0x50, 0x86, 0x1a, 0xcd, 0x97, 0x3f, 0xf8, 0xdb, 0xc2, 0x0b, 0x1f, 0x3c, 0x5d, 0x50, 0x7e,
	0xff, 0x74, 0x41, 0xf9, 0xeb, 0xd3, 0x05, 0xe5, 0x27, 0x7f, 0x5f, 0x78, 0xe1, 0x2b, 0x45, 0xc3,
	0xb5, 0x76, 0x2b, 0xf8, 0x0f, 0x4d, 0x1f, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x8c,
	0x55, 0x74, 0x40, 0x25, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PmserviceClient is the client API for Pmservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PmserviceClient interface {
	OnThreeWayLoginWithDeviceInfoRequest(ctx context.Context, in *ThreeWayLoginWithDeviceReq, opts ...grpc.CallOption) (*ThreeWayLoginWithDeviceRsp, error)
	OnPartentLoginRequest(ctx context.Context, in *PartnerUserLoginReq, opts ...grpc.CallOption) (*LoginResponse, error)
	OnPhoneCheckRequest(ctx context.Context, in *PhoneCheckReq, opts ...grpc.CallOption) (*PhoneCheckRsp, error)
	OnPhoneSMSCodeLoginRequest(ctx context.Context, in *PhoneSMSCodeLoginReq, opts ...grpc.CallOption) (*LoginResponse, error)
	OnGetUserTicketRequest(ctx context.Context, in *GetUserTicketReq, opts ...grpc.CallOption) (*GetUserTicketRsp, error)
	OnUserRegisterRequest(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterRsp, error)
	OnGetSexRequest(ctx context.Context, in *GetUserSexReq, opts ...grpc.CallOption) (*GetUserSexRsp, error)
	OnRereshUserMoneyRequest(ctx context.Context, in *RefreshUserMoneyReq, opts ...grpc.CallOption) (*RefreshUserMoneyRsp, error)
	OnWeXinBindQPRequest(ctx context.Context, in *WeXinBindQPReq, opts ...grpc.CallOption) (*PartnerBindRsp, error)
	OnGetMCIDByRoomSNRequest(ctx context.Context, in *ClientGetMCIDByRoomSNReq, opts ...grpc.CallOption) (*ClientGetMCIDByRoomSNRsp, error)
	OnGetLoginNameByPartnerUserIDRequest(ctx context.Context, in *GetLoginNameByPartnerUserIDReq, opts ...grpc.CallOption) (*GetLoginNameByPartnerUserIDRsp, error)
	OnUserLogoutRequest(ctx context.Context, in *UserLogoutReq, opts ...grpc.CallOption) (*UserLogoutRsp, error)
	OnUserOfflineRequest(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineRsp, error)
	OnGetQPUserInfoByParnerUserIDRequest(ctx context.Context, in *GetQPUserInfoByParnerUserIDReq, opts ...grpc.CallOption) (*GetQPUserInfoByParnerUserIDRsp, error)
	OnMarketInfoRequest(ctx context.Context, in *MarketInfoReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnAuthCodeConfirm(ctx context.Context, in *AuthCodeConfirm, opts ...grpc.CallOption) (*AuthCodeConfirmRsp, error)
	OnFastRegisterRequest(ctx context.Context, in *FastRegisterReq, opts ...grpc.CallOption) (*FastRegisterRsp, error)
	OnPartnerBindRequest(ctx context.Context, in *PartnerBindReq, opts ...grpc.CallOption) (*PartnerBindRsp, error)
	OnPartnerChangeBindRequest(ctx context.Context, in *PartnerChangeBindReq, opts ...grpc.CallOption) (*PartnerChangeBindRsp, error)
}

type pmserviceClient struct {
	cc *grpc.ClientConn
}

func NewPmserviceClient(cc *grpc.ClientConn) PmserviceClient {
	return &pmserviceClient{cc}
}

func (c *pmserviceClient) OnThreeWayLoginWithDeviceInfoRequest(ctx context.Context, in *ThreeWayLoginWithDeviceReq, opts ...grpc.CallOption) (*ThreeWayLoginWithDeviceRsp, error) {
	out := new(ThreeWayLoginWithDeviceRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnThreeWayLoginWithDeviceInfoRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnPartentLoginRequest(ctx context.Context, in *PartnerUserLoginReq, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnPartentLoginRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnPhoneCheckRequest(ctx context.Context, in *PhoneCheckReq, opts ...grpc.CallOption) (*PhoneCheckRsp, error) {
	out := new(PhoneCheckRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnPhoneCheckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnPhoneSMSCodeLoginRequest(ctx context.Context, in *PhoneSMSCodeLoginReq, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnPhoneSMSCodeLoginRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnGetUserTicketRequest(ctx context.Context, in *GetUserTicketReq, opts ...grpc.CallOption) (*GetUserTicketRsp, error) {
	out := new(GetUserTicketRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnGetUserTicketRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnUserRegisterRequest(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterRsp, error) {
	out := new(UserRegisterRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnUserRegisterRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnGetSexRequest(ctx context.Context, in *GetUserSexReq, opts ...grpc.CallOption) (*GetUserSexRsp, error) {
	out := new(GetUserSexRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnGetSexRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnRereshUserMoneyRequest(ctx context.Context, in *RefreshUserMoneyReq, opts ...grpc.CallOption) (*RefreshUserMoneyRsp, error) {
	out := new(RefreshUserMoneyRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnRereshUserMoneyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnWeXinBindQPRequest(ctx context.Context, in *WeXinBindQPReq, opts ...grpc.CallOption) (*PartnerBindRsp, error) {
	out := new(PartnerBindRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnWeXinBindQPRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnGetMCIDByRoomSNRequest(ctx context.Context, in *ClientGetMCIDByRoomSNReq, opts ...grpc.CallOption) (*ClientGetMCIDByRoomSNRsp, error) {
	out := new(ClientGetMCIDByRoomSNRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnGetMCIDByRoomSNRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnGetLoginNameByPartnerUserIDRequest(ctx context.Context, in *GetLoginNameByPartnerUserIDReq, opts ...grpc.CallOption) (*GetLoginNameByPartnerUserIDRsp, error) {
	out := new(GetLoginNameByPartnerUserIDRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnGetLoginNameByPartnerUserIDRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnUserLogoutRequest(ctx context.Context, in *UserLogoutReq, opts ...grpc.CallOption) (*UserLogoutRsp, error) {
	out := new(UserLogoutRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnUserLogoutRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnUserOfflineRequest(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineRsp, error) {
	out := new(UserOfflineRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnUserOfflineRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnGetQPUserInfoByParnerUserIDRequest(ctx context.Context, in *GetQPUserInfoByParnerUserIDReq, opts ...grpc.CallOption) (*GetQPUserInfoByParnerUserIDRsp, error) {
	out := new(GetQPUserInfoByParnerUserIDRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnGetQPUserInfoByParnerUserIDRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnMarketInfoRequest(ctx context.Context, in *MarketInfoReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnMarketInfoRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnAuthCodeConfirm(ctx context.Context, in *AuthCodeConfirm, opts ...grpc.CallOption) (*AuthCodeConfirmRsp, error) {
	out := new(AuthCodeConfirmRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnAuthCodeConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnFastRegisterRequest(ctx context.Context, in *FastRegisterReq, opts ...grpc.CallOption) (*FastRegisterRsp, error) {
	out := new(FastRegisterRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnFastRegisterRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnPartnerBindRequest(ctx context.Context, in *PartnerBindReq, opts ...grpc.CallOption) (*PartnerBindRsp, error) {
	out := new(PartnerBindRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnPartnerBindRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmserviceClient) OnPartnerChangeBindRequest(ctx context.Context, in *PartnerChangeBindReq, opts ...grpc.CallOption) (*PartnerChangeBindRsp, error) {
	out := new(PartnerChangeBindRsp)
	err := c.cc.Invoke(ctx, "/pmservice.service.v1.Pmservice/OnPartnerChangeBindRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmserviceServer is the server API for Pmservice service.
type PmserviceServer interface {
	OnThreeWayLoginWithDeviceInfoRequest(context.Context, *ThreeWayLoginWithDeviceReq) (*ThreeWayLoginWithDeviceRsp, error)
	OnPartentLoginRequest(context.Context, *PartnerUserLoginReq) (*LoginResponse, error)
	OnPhoneCheckRequest(context.Context, *PhoneCheckReq) (*PhoneCheckRsp, error)
	OnPhoneSMSCodeLoginRequest(context.Context, *PhoneSMSCodeLoginReq) (*LoginResponse, error)
	OnGetUserTicketRequest(context.Context, *GetUserTicketReq) (*GetUserTicketRsp, error)
	OnUserRegisterRequest(context.Context, *UserRegisterReq) (*UserRegisterRsp, error)
	OnGetSexRequest(context.Context, *GetUserSexReq) (*GetUserSexRsp, error)
	OnRereshUserMoneyRequest(context.Context, *RefreshUserMoneyReq) (*RefreshUserMoneyRsp, error)
	OnWeXinBindQPRequest(context.Context, *WeXinBindQPReq) (*PartnerBindRsp, error)
	OnGetMCIDByRoomSNRequest(context.Context, *ClientGetMCIDByRoomSNReq) (*ClientGetMCIDByRoomSNRsp, error)
	OnGetLoginNameByPartnerUserIDRequest(context.Context, *GetLoginNameByPartnerUserIDReq) (*GetLoginNameByPartnerUserIDRsp, error)
	OnUserLogoutRequest(context.Context, *UserLogoutReq) (*UserLogoutRsp, error)
	OnUserOfflineRequest(context.Context, *UserOfflineReq) (*UserOfflineRsp, error)
	OnGetQPUserInfoByParnerUserIDRequest(context.Context, *GetQPUserInfoByParnerUserIDReq) (*GetQPUserInfoByParnerUserIDRsp, error)
	OnMarketInfoRequest(context.Context, *MarketInfoReq) (*CommonResp, error)
	OnAuthCodeConfirm(context.Context, *AuthCodeConfirm) (*AuthCodeConfirmRsp, error)
	OnFastRegisterRequest(context.Context, *FastRegisterReq) (*FastRegisterRsp, error)
	OnPartnerBindRequest(context.Context, *PartnerBindReq) (*PartnerBindRsp, error)
	OnPartnerChangeBindRequest(context.Context, *PartnerChangeBindReq) (*PartnerChangeBindRsp, error)
}

// UnimplementedPmserviceServer can be embedded to have forward compatible implementations.
type UnimplementedPmserviceServer struct {
}

func (*UnimplementedPmserviceServer) OnThreeWayLoginWithDeviceInfoRequest(ctx context.Context, req *ThreeWayLoginWithDeviceReq) (*ThreeWayLoginWithDeviceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnThreeWayLoginWithDeviceInfoRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnPartentLoginRequest(ctx context.Context, req *PartnerUserLoginReq) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPartentLoginRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnPhoneCheckRequest(ctx context.Context, req *PhoneCheckReq) (*PhoneCheckRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPhoneCheckRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnPhoneSMSCodeLoginRequest(ctx context.Context, req *PhoneSMSCodeLoginReq) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPhoneSMSCodeLoginRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnGetUserTicketRequest(ctx context.Context, req *GetUserTicketReq) (*GetUserTicketRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetUserTicketRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnUserRegisterRequest(ctx context.Context, req *UserRegisterReq) (*UserRegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUserRegisterRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnGetSexRequest(ctx context.Context, req *GetUserSexReq) (*GetUserSexRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetSexRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnRereshUserMoneyRequest(ctx context.Context, req *RefreshUserMoneyReq) (*RefreshUserMoneyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnRereshUserMoneyRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnWeXinBindQPRequest(ctx context.Context, req *WeXinBindQPReq) (*PartnerBindRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnWeXinBindQPRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnGetMCIDByRoomSNRequest(ctx context.Context, req *ClientGetMCIDByRoomSNReq) (*ClientGetMCIDByRoomSNRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetMCIDByRoomSNRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnGetLoginNameByPartnerUserIDRequest(ctx context.Context, req *GetLoginNameByPartnerUserIDReq) (*GetLoginNameByPartnerUserIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetLoginNameByPartnerUserIDRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnUserLogoutRequest(ctx context.Context, req *UserLogoutReq) (*UserLogoutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUserLogoutRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnUserOfflineRequest(ctx context.Context, req *UserOfflineReq) (*UserOfflineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUserOfflineRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnGetQPUserInfoByParnerUserIDRequest(ctx context.Context, req *GetQPUserInfoByParnerUserIDReq) (*GetQPUserInfoByParnerUserIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetQPUserInfoByParnerUserIDRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnMarketInfoRequest(ctx context.Context, req *MarketInfoReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMarketInfoRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnAuthCodeConfirm(ctx context.Context, req *AuthCodeConfirm) (*AuthCodeConfirmRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAuthCodeConfirm not implemented")
}
func (*UnimplementedPmserviceServer) OnFastRegisterRequest(ctx context.Context, req *FastRegisterReq) (*FastRegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnFastRegisterRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnPartnerBindRequest(ctx context.Context, req *PartnerBindReq) (*PartnerBindRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPartnerBindRequest not implemented")
}
func (*UnimplementedPmserviceServer) OnPartnerChangeBindRequest(ctx context.Context, req *PartnerChangeBindReq) (*PartnerChangeBindRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPartnerChangeBindRequest not implemented")
}

func RegisterPmserviceServer(s *grpc.Server, srv PmserviceServer) {
	s.RegisterService(&_Pmservice_serviceDesc, srv)
}

func _Pmservice_OnThreeWayLoginWithDeviceInfoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreeWayLoginWithDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnThreeWayLoginWithDeviceInfoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnThreeWayLoginWithDeviceInfoRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnThreeWayLoginWithDeviceInfoRequest(ctx, req.(*ThreeWayLoginWithDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnPartentLoginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnPartentLoginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnPartentLoginRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnPartentLoginRequest(ctx, req.(*PartnerUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnPhoneCheckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnPhoneCheckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnPhoneCheckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnPhoneCheckRequest(ctx, req.(*PhoneCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnPhoneSMSCodeLoginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneSMSCodeLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnPhoneSMSCodeLoginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnPhoneSMSCodeLoginRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnPhoneSMSCodeLoginRequest(ctx, req.(*PhoneSMSCodeLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnGetUserTicketRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnGetUserTicketRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnGetUserTicketRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnGetUserTicketRequest(ctx, req.(*GetUserTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnUserRegisterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnUserRegisterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnUserRegisterRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnUserRegisterRequest(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnGetSexRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnGetSexRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnGetSexRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnGetSexRequest(ctx, req.(*GetUserSexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnRereshUserMoneyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnRereshUserMoneyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnRereshUserMoneyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnRereshUserMoneyRequest(ctx, req.(*RefreshUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnWeXinBindQPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeXinBindQPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnWeXinBindQPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnWeXinBindQPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnWeXinBindQPRequest(ctx, req.(*WeXinBindQPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnGetMCIDByRoomSNRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetMCIDByRoomSNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnGetMCIDByRoomSNRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnGetMCIDByRoomSNRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnGetMCIDByRoomSNRequest(ctx, req.(*ClientGetMCIDByRoomSNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnGetLoginNameByPartnerUserIDRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginNameByPartnerUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnGetLoginNameByPartnerUserIDRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnGetLoginNameByPartnerUserIDRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnGetLoginNameByPartnerUserIDRequest(ctx, req.(*GetLoginNameByPartnerUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnUserLogoutRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnUserLogoutRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnUserLogoutRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnUserLogoutRequest(ctx, req.(*UserLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnUserOfflineRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnUserOfflineRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnUserOfflineRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnUserOfflineRequest(ctx, req.(*UserOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnGetQPUserInfoByParnerUserIDRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQPUserInfoByParnerUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnGetQPUserInfoByParnerUserIDRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnGetQPUserInfoByParnerUserIDRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnGetQPUserInfoByParnerUserIDRequest(ctx, req.(*GetQPUserInfoByParnerUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnMarketInfoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnMarketInfoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnMarketInfoRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnMarketInfoRequest(ctx, req.(*MarketInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnAuthCodeConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCodeConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnAuthCodeConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnAuthCodeConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnAuthCodeConfirm(ctx, req.(*AuthCodeConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnFastRegisterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnFastRegisterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnFastRegisterRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnFastRegisterRequest(ctx, req.(*FastRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnPartnerBindRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnPartnerBindRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnPartnerBindRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnPartnerBindRequest(ctx, req.(*PartnerBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pmservice_OnPartnerChangeBindRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerChangeBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmserviceServer).OnPartnerChangeBindRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmservice.service.v1.Pmservice/OnPartnerChangeBindRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmserviceServer).OnPartnerChangeBindRequest(ctx, req.(*PartnerChangeBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pmservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pmservice.service.v1.Pmservice",
	HandlerType: (*PmserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnThreeWayLoginWithDeviceInfoRequest",
			Handler:    _Pmservice_OnThreeWayLoginWithDeviceInfoRequest_Handler,
		},
		{
			MethodName: "OnPartentLoginRequest",
			Handler:    _Pmservice_OnPartentLoginRequest_Handler,
		},
		{
			MethodName: "OnPhoneCheckRequest",
			Handler:    _Pmservice_OnPhoneCheckRequest_Handler,
		},
		{
			MethodName: "OnPhoneSMSCodeLoginRequest",
			Handler:    _Pmservice_OnPhoneSMSCodeLoginRequest_Handler,
		},
		{
			MethodName: "OnGetUserTicketRequest",
			Handler:    _Pmservice_OnGetUserTicketRequest_Handler,
		},
		{
			MethodName: "OnUserRegisterRequest",
			Handler:    _Pmservice_OnUserRegisterRequest_Handler,
		},
		{
			MethodName: "OnGetSexRequest",
			Handler:    _Pmservice_OnGetSexRequest_Handler,
		},
		{
			MethodName: "OnRereshUserMoneyRequest",
			Handler:    _Pmservice_OnRereshUserMoneyRequest_Handler,
		},
		{
			MethodName: "OnWeXinBindQPRequest",
			Handler:    _Pmservice_OnWeXinBindQPRequest_Handler,
		},
		{
			MethodName: "OnGetMCIDByRoomSNRequest",
			Handler:    _Pmservice_OnGetMCIDByRoomSNRequest_Handler,
		},
		{
			MethodName: "OnGetLoginNameByPartnerUserIDRequest",
			Handler:    _Pmservice_OnGetLoginNameByPartnerUserIDRequest_Handler,
		},
		{
			MethodName: "OnUserLogoutRequest",
			Handler:    _Pmservice_OnUserLogoutRequest_Handler,
		},
		{
			MethodName: "OnUserOfflineRequest",
			Handler:    _Pmservice_OnUserOfflineRequest_Handler,
		},
		{
			MethodName: "OnGetQPUserInfoByParnerUserIDRequest",
			Handler:    _Pmservice_OnGetQPUserInfoByParnerUserIDRequest_Handler,
		},
		{
			MethodName: "OnMarketInfoRequest",
			Handler:    _Pmservice_OnMarketInfoRequest_Handler,
		},
		{
			MethodName: "OnAuthCodeConfirm",
			Handler:    _Pmservice_OnAuthCodeConfirm_Handler,
		},
		{
			MethodName: "OnFastRegisterRequest",
			Handler:    _Pmservice_OnFastRegisterRequest_Handler,
		},
		{
			MethodName: "OnPartnerBindRequest",
			Handler:    _Pmservice_OnPartnerBindRequest_Handler,
		},
		{
			MethodName: "OnPartnerChangeBindRequest",
			Handler:    _Pmservice_OnPartnerChangeBindRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserRegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRegisterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRegisterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhyId) > 0 {
		i -= len(m.PhyId)
		copy(dAtA[i:], m.PhyId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Souce != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Souce))
		i--
		dAtA[i] = 0x30
	}
	if m.RemoteIp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RemoteIp))
		i--
		dAtA[i] = 0x28
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserRegisterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRegisterRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRegisterRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserDbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
		i--
		dAtA[i] = 0x20
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserSexReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserSexReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserSexReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserDbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserSexRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserSexRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserSexRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x20
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshUserMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshUserMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshUserMoneyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserDbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserLogoutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogoutReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLogoutReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Certification) > 0 {
		i -= len(m.Certification)
		copy(dAtA[i:], m.Certification)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Certification)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserDbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserLogoutRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogoutRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLogoutRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeXinBindQPReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeXinBindQPReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeXinBindQPReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PasswordMd5) > 0 {
		i -= len(m.PasswordMd5)
		copy(dAtA[i:], m.PasswordMd5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PasswordMd5)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Unionid) > 0 {
		i -= len(m.Unionid)
		copy(dAtA[i:], m.Unionid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartnerBindRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerBindRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartnerBindRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x22
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshUserMoneyRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshUserMoneyRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshUserMoneyRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtendCoin) > 0 {
		for iNdEx := len(m.ExtendCoin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendCoin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Ticket != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ticket))
		i--
		dAtA[i] = 0x30
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x28
	}
	if m.UserDbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
		i--
		dAtA[i] = 0x20
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeWayLoginWithDeviceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeWayLoginWithDeviceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeWayLoginWithDeviceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Marketid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Marketid))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Platform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DeviceInfo) > 0 {
		i -= len(m.DeviceInfo)
		copy(dAtA[i:], m.DeviceInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeviceInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Authcode) > 0 {
		i -= len(m.Authcode)
		copy(dAtA[i:], m.Authcode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhyId) > 0 {
		i -= len(m.PhyId)
		copy(dAtA[i:], m.PhyId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MacAddress) > 0 {
		i -= len(m.MacAddress)
		copy(dAtA[i:], m.MacAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MacAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PasswordMd5) > 0 {
		i -= len(m.PasswordMd5)
		copy(dAtA[i:], m.PasswordMd5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PasswordMd5)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtendCoin) > 0 {
		for iNdEx := len(m.ExtendCoin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendCoin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Ticket != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ticket))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Result) > 0 {
		dAtA2 := make([]byte, len(m.Result)*10)
		var j1 int
		for _, num1 := range m.Result {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.Tax != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Tax))
		i--
		dAtA[i] = 0x18
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MainGameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MainGameID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.LoginName) > 0 {
		i -= len(m.LoginName)
		copy(dAtA[i:], m.LoginName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoginName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.WxUnionid) > 0 {
		i -= len(m.WxUnionid)
		copy(dAtA[i:], m.WxUnionid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WxUnionid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.PhoneNo) > 0 {
		i -= len(m.PhoneNo)
		copy(dAtA[i:], m.PhoneNo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhoneNo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Exp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x78
	}
	if m.Ticket != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ticket))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ExtMessage) > 0 {
		i -= len(m.ExtMessage)
		copy(dAtA[i:], m.ExtMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExtMessage)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ExtErrorCode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExtErrorCode))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Authcode) > 0 {
		i -= len(m.Authcode)
		copy(dAtA[i:], m.Authcode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i--
		dAtA[i] = 0x5a
	}
	if m.BankMoney != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BankMoney))
		i--
		dAtA[i] = 0x50
	}
	if m.AvataId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AvataId))
		i--
		dAtA[i] = 0x48
	}
	if m.Sex != 0 {
		i = encodeVarintApi(dAtA, i, uint64((uint32(m.Sex)<<1)^uint32((m.Sex>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.UserLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserLevel))
		i--
		dAtA[i] = 0x38
	}
	if m.ConfraId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ConfraId))
		i--
		dAtA[i] = 0x30
	}
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Certification) > 0 {
		i -= len(m.Certification)
		copy(dAtA[i:], m.Certification)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Certification)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if m.UserDbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreeWayLoginWithDeviceRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeWayLoginWithDeviceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeWayLoginWithDeviceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserTicketReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserTicketReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserTicketReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Userid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserTicketRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserTicketRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserTicketRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x20
	}
	if m.Userid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartnerUserLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerUserLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartnerUserLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Marketid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Marketid))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Platform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
		i--
		dAtA[i] = 0x60
	}
	if len(m.DeviceInfo) > 0 {
		i -= len(m.DeviceInfo)
		copy(dAtA[i:], m.DeviceInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeviceInfo)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Authcode) > 0 {
		i -= len(m.Authcode)
		copy(dAtA[i:], m.Authcode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i--
		dAtA[i] = 0x52
	}
	if m.RemoteIp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RemoteIp))
		i--
		dAtA[i] = 0x48
	}
	if m.LocalIp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LocalIp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PhyId) > 0 {
		i -= len(m.PhyId)
		copy(dAtA[i:], m.PhyId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MacAddress) > 0 {
		i -= len(m.MacAddress)
		copy(dAtA[i:], m.MacAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MacAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Unionid) > 0 {
		i -= len(m.Unionid)
		copy(dAtA[i:], m.Unionid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Openid) > 0 {
		i -= len(m.Openid)
		copy(dAtA[i:], m.Openid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Openid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PartnerId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetMCIDByRoomSNReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetMCIDByRoomSNReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetMCIDByRoomSNReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhyId) > 0 {
		i -= len(m.PhyId)
		copy(dAtA[i:], m.PhyId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IRoomSN != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IRoomSN))
		i--
		dAtA[i] = 0x10
	}
	if m.IUserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IUserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetMCIDByRoomSNRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetMCIDByRoomSNRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetMCIDByRoomSNRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasPassword {
		i--
		if m.HasPassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IMCID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IMCID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLoginNameByPartnerUserIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginNameByPartnerUserIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoginNameByPartnerUserIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Unionid) > 0 {
		i -= len(m.Unionid)
		copy(dAtA[i:], m.Unionid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartnerId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLoginNameByPartnerUserIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginNameByPartnerUserIDRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoginNameByPartnerUserIDRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LoginName) > 0 {
		i -= len(m.LoginName)
		copy(dAtA[i:], m.LoginName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoginName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PhoneCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCheckReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneCheckReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthCode) > 0 {
		i -= len(m.AuthCode)
		copy(dAtA[i:], m.AuthCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuthCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhoneCheckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCheckInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneCheckInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LoginName) > 0 {
		i -= len(m.LoginName)
		copy(dAtA[i:], m.LoginName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoginName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PhoneCheckRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCheckRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneCheckRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InterErr) > 0 {
		i -= len(m.InterErr)
		copy(dAtA[i:], m.InterErr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InterErr)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RegisterAccount {
		i--
		if m.RegisterAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PhoneSMSCodeLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneSMSCodeLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneSMSCodeLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AuthCode) > 0 {
		i -= len(m.AuthCode)
		copy(dAtA[i:], m.AuthCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuthCode)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MacAddress) > 0 {
		i -= len(m.MacAddress)
		copy(dAtA[i:], m.MacAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MacAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PhyId) > 0 {
		i -= len(m.PhyId)
		copy(dAtA[i:], m.PhyId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LocalIp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LocalIp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ClientName) > 0 {
		i -= len(m.ClientName)
		copy(dAtA[i:], m.ClientName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.HallID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HallID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MarketID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MarketID))
		i--
		dAtA[i] = 0x20
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x18
	}
	if m.PartnerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserOfflineReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOfflineReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserOfflineReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *UserOfflineRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOfflineRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserOfflineRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetQPUserInfoByParnerUserIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQPUserInfoByParnerUserIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetQPUserInfoByParnerUserIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Unionid) > 0 {
		i -= len(m.Unionid)
		copy(dAtA[i:], m.Unionid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartnerId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetQPUserInfoByParnerUserIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQPUserInfoByParnerUserIDRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetQPUserInfoByParnerUserIDRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.BindState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BindState))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarketInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhyId) > 0 {
		i -= len(m.PhyId)
		copy(dAtA[i:], m.PhyId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.RemoteIp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RemoteIp))
		i--
		dAtA[i] = 0x18
	}
	if m.UserDbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthCodeConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCodeConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthCodeConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Authcode) > 0 {
		i -= len(m.Authcode)
		copy(dAtA[i:], m.Authcode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthCodeConfirmRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthCodeConfirmRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthCodeConfirmRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Userid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Userid))
		i--
		dAtA[i] = 0x18
	}
	if m.Success != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Success))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FastRegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastRegisterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastRegisterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhyId) > 0 {
		i -= len(m.PhyId)
		copy(dAtA[i:], m.PhyId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RemoteIp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RemoteIp))
		i--
		dAtA[i] = 0x10
	}
	if m.RegType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RegType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FastRegisterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastRegisterRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastRegisterRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartnerBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerBindReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartnerBindReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Unionid) > 0 {
		i -= len(m.Unionid)
		copy(dAtA[i:], m.Unionid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Openid) > 0 {
		i -= len(m.Openid)
		copy(dAtA[i:], m.Openid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Openid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartnerId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartnerChangeBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerChangeBindReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartnerChangeBindReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Authcode) > 0 {
		i -= len(m.Authcode)
		copy(dAtA[i:], m.Authcode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Unionid) > 0 {
		i -= len(m.Unionid)
		copy(dAtA[i:], m.Unionid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Openid) > 0 {
		i -= len(m.Openid)
		copy(dAtA[i:], m.Openid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Openid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartnerId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartnerChangeBindRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerChangeBindRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartnerChangeBindRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Authcode) > 0 {
		i -= len(m.Authcode)
		copy(dAtA[i:], m.Authcode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrorCode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRegisterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.RemoteIp != 0 {
		n += 1 + sovApi(uint64(m.RemoteIp))
	}
	if m.Souce != 0 {
		n += 1 + sovApi(uint64(m.Souce))
	}
	l = len(m.PhyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRegisterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserSexReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserSexRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.Sex != 0 {
		n += 1 + sovApi(uint64(m.Sex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshUserMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLogoutReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	l = len(m.Certification)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLogoutRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WeXinBindQPReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PasswordMd5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartnerBindRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshUserMoneyRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.Ticket != 0 {
		n += 1 + sovApi(uint64(m.Ticket))
	}
	if len(m.ExtendCoin) > 0 {
		for _, e := range m.ExtendCoin {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeWayLoginWithDeviceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PasswordMd5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PhyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeviceInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Marketid != 0 {
		n += 1 + sovApi(uint64(m.Marketid))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.Tax != 0 {
		n += 1 + sovApi(uint64(m.Tax))
	}
	if len(m.Result) > 0 {
		l = 0
		for _, e := range m.Result {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Ticket != 0 {
		n += 1 + sovApi(uint64(m.Ticket))
	}
	if len(m.ExtendCoin) > 0 {
		for _, e := range m.ExtendCoin {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	l = len(m.Certification)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ConfraId != 0 {
		n += 1 + sovApi(uint64(m.ConfraId))
	}
	if m.UserLevel != 0 {
		n += 1 + sovApi(uint64(m.UserLevel))
	}
	if m.Sex != 0 {
		n += 1 + sozApi(uint64(m.Sex))
	}
	if m.AvataId != 0 {
		n += 1 + sovApi(uint64(m.AvataId))
	}
	if m.BankMoney != 0 {
		n += 1 + sovApi(uint64(m.BankMoney))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ExtErrorCode != 0 {
		n += 1 + sovApi(uint64(m.ExtErrorCode))
	}
	l = len(m.ExtMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ticket != 0 {
		n += 1 + sovApi(uint64(m.Ticket))
	}
	if m.Exp != 0 {
		n += 1 + sovApi(uint64(m.Exp))
	}
	l = len(m.PhoneNo)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.WxUnionid)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LoginName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.MainGameID != 0 {
		n += 2 + sovApi(uint64(m.MainGameID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeWayLoginWithDeviceRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserTicketReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovApi(uint64(m.Userid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserTicketRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Userid != 0 {
		n += 1 + sovApi(uint64(m.Userid))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartnerUserLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PhyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LocalIp != 0 {
		n += 1 + sovApi(uint64(m.LocalIp))
	}
	if m.RemoteIp != 0 {
		n += 1 + sovApi(uint64(m.RemoteIp))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeviceInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Marketid != 0 {
		n += 1 + sovApi(uint64(m.Marketid))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientGetMCIDByRoomSNReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IUserID != 0 {
		n += 1 + sovApi(uint64(m.IUserID))
	}
	if m.IRoomSN != 0 {
		n += 1 + sovApi(uint64(m.IRoomSN))
	}
	l = len(m.PhyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientGetMCIDByRoomSNRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IMCID != 0 {
		n += 1 + sovApi(uint64(m.IMCID))
	}
	if m.HasPassword {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLoginNameByPartnerUserIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLoginNameByPartnerUserIDRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LoginName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhoneCheckReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhoneCheckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	l = len(m.LoginName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsOnline {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhoneCheckRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.RegisterAccount {
		n += 2
	}
	l = len(m.InterErr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhoneSMSCodeLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PartnerID != 0 {
		n += 1 + sovApi(uint64(m.PartnerID))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.MarketID != 0 {
		n += 1 + sovApi(uint64(m.MarketID))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HallID != 0 {
		n += 1 + sovApi(uint64(m.HallID))
	}
	l = len(m.ClientName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LocalIp != 0 {
		n += 1 + sovApi(uint64(m.LocalIp))
	}
	l = len(m.PhyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserOfflineReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserOfflineRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetQPUserInfoByParnerUserIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetQPUserInfoByParnerUserIDRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.BindState != 0 {
		n += 1 + sovApi(uint64(m.BindState))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarketInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovApi(uint64(m.MarketId))
	}
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.RemoteIp != 0 {
		n += 1 + sovApi(uint64(m.RemoteIp))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	l = len(m.PhyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthCodeConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthCodeConfirmRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	if m.Success != 0 {
		n += 1 + sovApi(uint64(m.Success))
	}
	if m.Userid != 0 {
		n += 1 + sovApi(uint64(m.Userid))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FastRegisterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegType != 0 {
		n += 1 + sovApi(uint64(m.RegType))
	}
	if m.RemoteIp != 0 {
		n += 1 + sovApi(uint64(m.RemoteIp))
	}
	l = len(m.PhyId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FastRegisterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartnerBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartnerChangeBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartnerChangeBindRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovApi(uint64(m.ErrorCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIp", wireType)
			}
			m.RemoteIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Souce", wireType)
			}
			m.Souce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Souce |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRegisterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRegisterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRegisterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserSexReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserSexReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserSexReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserSexRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserSexRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserSexRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshUserMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshUserMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshUserMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogoutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogoutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogoutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogoutRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogoutRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogoutRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeXinBindQPReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeXinBindQPReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeXinBindQPReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerBindRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerBindRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerBindRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshUserMoneyRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshUserMoneyRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshUserMoneyRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendCoin = append(m.ExtendCoin, &ExtendCoin{})
			if err := m.ExtendCoin[len(m.ExtendCoin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeWayLoginWithDeviceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeWayLoginWithDeviceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeWayLoginWithDeviceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketid", wireType)
			}
			m.Marketid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marketid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Result = append(m.Result, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Result) == 0 {
					m.Result = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Result = append(m.Result, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendCoin = append(m.ExtendCoin, &ExtendCoin{})
			if err := m.ExtendCoin[len(m.ExtendCoin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &GameScore{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfraId", wireType)
			}
			m.ConfraId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfraId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLevel", wireType)
			}
			m.UserLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sex = v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvataId", wireType)
			}
			m.AvataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvataId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankMoney", wireType)
			}
			m.BankMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankMoney |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtErrorCode", wireType)
			}
			m.ExtErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WxUnionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WxUnionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainGameID", wireType)
			}
			m.MainGameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainGameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeWayLoginWithDeviceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeWayLoginWithDeviceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeWayLoginWithDeviceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &UserInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserTicketReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserTicketReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserTicketReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserTicketRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserTicketRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserTicketRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerUserLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerUserLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerUserLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalIp", wireType)
			}
			m.LocalIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIp", wireType)
			}
			m.RemoteIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketid", wireType)
			}
			m.Marketid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marketid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetMCIDByRoomSNReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetMCIDByRoomSNReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetMCIDByRoomSNReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IUserID", wireType)
			}
			m.IUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IUserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IRoomSN", wireType)
			}
			m.IRoomSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IRoomSN |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetMCIDByRoomSNRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetMCIDByRoomSNRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetMCIDByRoomSNRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMCID", wireType)
			}
			m.IMCID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMCID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasPassword = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginNameByPartnerUserIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginNameByPartnerUserIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &UserInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneCheckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCheckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCheckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneCheckRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCheckRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCheckRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &PhoneCheckInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterAccount = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterErr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterErr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneSMSCodeLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneSMSCodeLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneSMSCodeLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerID", wireType)
			}
			m.PartnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketID", wireType)
			}
			m.MarketID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallID", wireType)
			}
			m.HallID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalIp", wireType)
			}
			m.LocalIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOfflineReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOfflineReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOfflineReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOfflineRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOfflineRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOfflineRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQPUserInfoByParnerUserIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQPUserInfoByParnerUserIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindState", wireType)
			}
			m.BindState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIp", wireType)
			}
			m.RemoteIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCodeConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCodeConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCodeConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthCodeConfirmRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthCodeConfirmRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthCodeConfirmRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			m.Success = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Success |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastRegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastRegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastRegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegType", wireType)
			}
			m.RegType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIp", wireType)
			}
			m.RemoteIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastRegisterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastRegisterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastRegisterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerChangeBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerChangeBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerChangeBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerChangeBindRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerChangeBindRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerChangeBindRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
