// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathMatchv1Ping = "/matchv1.service.v1.matchv1/Ping"
var PathMatchv1MatchList = "/Matchv1/Query/MatchList"
var PathMatchv1GetRewardConfig = "/Matchv1/Query/RewardConfig"
var PathMatchv1ScoreUpload = "/Matchv1/Upload/Score"
var PathMatchv1QueryImmediateRank = "/Matchv1/Query/ImmediateRank"
var PathMatchv1QueryLastRank = "/Matchv1/Query/LastRank"
var PathMatchv1GetFloatBonusPool = "/Matchv1/Query/BonusPoolNum"
var PathMatchv1QueryUserReward = "/Matchv1/Query/UserReward"
var PathMatchv1GetUserReward = "/Matchv1/Get/UserReward"
var PathMatchv1MatchSign = "/Matchv1/UserSign"
var PathMatchv1QueryUserMatchRecord = "/Matchv1/Query/UserMatchRecord"
var PathMatchv1QueryTargetMatchStatus = "/Matchv1/Query/TargetMatchStatus"
var PathMatchv1QueryUserMatchInfo = "/Matchv1/Query/UserMatchInfo"
var PathMatchv1CheckUserEnter = "/Matchv1/Check/UserEnter"
var PathMatchv1QueryUserEnterList = "/Matchv1/Query/UserEnterList"
var PathMatchv1GetTargetMatchAllReward = "/Matchv1/Get/TargetMatchAllReward"
var PathMatchv1MatchListTime = "/Matchv1/Query/MatchListTime"

// Matchv1BMServer is the server API for Matchv1 service.
type Matchv1BMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 1,获取比赛列表，此处的ArenatimeID不会单独列出来作为一个比赛
	MatchList(ctx context.Context, req *MatchListReq) (resp *MatchListRsp, err error)

	// 2,拉去特定场次的奖励的列表
	GetRewardConfig(ctx context.Context, req *GetRewardConfigReq) (resp *GetRewardConfigRsp, err error)

	// 3,每局结算
	ScoreUpload(ctx context.Context, req *ScoreUploadReq) (resp *CommonRsp, err error)

	// 4,获取实时排行
	QueryImmediateRank(ctx context.Context, req *ImmediateRankReq) (resp *ImmediateRankRsp, err error)

	// 5,获取往期排行
	QueryLastRank(ctx context.Context, req *LastRankReq) (resp *LastRankRsp, err error)

	// 6,获取浮动奖金池
	GetFloatBonusPool(ctx context.Context, req *FloatPoolReq) (resp *FloatPoolRsp, err error)

	// 7,查询玩家奖励
	QueryUserReward(ctx context.Context, req *QueryUserRewardReq) (resp *QueryUserRewardRsp, err error)

	// 8,领取玩家奖励
	GetUserReward(ctx context.Context, req *GetUserRewardReq) (resp *GetUserRewardRsp, err error)

	// 9，比赛报名
	MatchSign(ctx context.Context, req *MatchSignReq) (resp *MatchSignRsp, err error)

	// 10，查询个人战绩
	QueryUserMatchRecord(ctx context.Context, req *UserMatchRecordReq) (resp *UserMatchRecordRsp, err error)

	// 11，查询特定场次的比赛的状态
	QueryTargetMatchStatus(ctx context.Context, req *TargetMatchStatusReq) (resp *TargetMatchStatusRsp, err error)

	// 12，查询特定场次比赛的用户信息
	QueryUserMatchInfo(ctx context.Context, req *UserMatchInfoReq) (resp *UserMatchInfoRsp, err error)

	// 13.检查用户是否有进入比赛的资格
	CheckUserEnter(ctx context.Context, req *UserEnterReq) (resp *UserEnterRsp, err error)

	// 14获取对应的比赛状态以及进入决赛的人的名单
	QueryUserEnterList(ctx context.Context, req *UserEnterListReq) (resp *UserEnterListRsp, err error)

	// 15 一次性领取本场比赛所有玩家奖励
	GetTargetMatchAllReward(ctx context.Context, req *TargetMatchAllRewardReq) (resp *TargetMatchAllRewardRsp, err error)

	// 16,获取比赛列表开赛时间
	MatchListTime(ctx context.Context, req *MatchListTimeReq) (resp *MatchListTimeRsp, err error)
}

var Matchv1Svc Matchv1BMServer

func matchv1Ping(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.Ping(c, p)
	c.JSON(resp, err)
}

func matchv1MatchList(c *bm.Context) {
	p := new(MatchListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.MatchList(c, p)
	c.JSON(resp, err)
}

func matchv1GetRewardConfig(c *bm.Context) {
	p := new(GetRewardConfigReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.GetRewardConfig(c, p)
	c.JSON(resp, err)
}

func matchv1ScoreUpload(c *bm.Context) {
	p := new(ScoreUploadReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.ScoreUpload(c, p)
	c.JSON(resp, err)
}

func matchv1QueryImmediateRank(c *bm.Context) {
	p := new(ImmediateRankReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.QueryImmediateRank(c, p)
	c.JSON(resp, err)
}

func matchv1QueryLastRank(c *bm.Context) {
	p := new(LastRankReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.QueryLastRank(c, p)
	c.JSON(resp, err)
}

func matchv1GetFloatBonusPool(c *bm.Context) {
	p := new(FloatPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.GetFloatBonusPool(c, p)
	c.JSON(resp, err)
}

func matchv1QueryUserReward(c *bm.Context) {
	p := new(QueryUserRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.QueryUserReward(c, p)
	c.JSON(resp, err)
}

func matchv1GetUserReward(c *bm.Context) {
	p := new(GetUserRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.GetUserReward(c, p)
	c.JSON(resp, err)
}

func matchv1MatchSign(c *bm.Context) {
	p := new(MatchSignReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.MatchSign(c, p)
	c.JSON(resp, err)
}

func matchv1QueryUserMatchRecord(c *bm.Context) {
	p := new(UserMatchRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.QueryUserMatchRecord(c, p)
	c.JSON(resp, err)
}

func matchv1QueryTargetMatchStatus(c *bm.Context) {
	p := new(TargetMatchStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.QueryTargetMatchStatus(c, p)
	c.JSON(resp, err)
}

func matchv1QueryUserMatchInfo(c *bm.Context) {
	p := new(UserMatchInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.QueryUserMatchInfo(c, p)
	c.JSON(resp, err)
}

func matchv1CheckUserEnter(c *bm.Context) {
	p := new(UserEnterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.CheckUserEnter(c, p)
	c.JSON(resp, err)
}

func matchv1QueryUserEnterList(c *bm.Context) {
	p := new(UserEnterListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.QueryUserEnterList(c, p)
	c.JSON(resp, err)
}

func matchv1GetTargetMatchAllReward(c *bm.Context) {
	p := new(TargetMatchAllRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.GetTargetMatchAllReward(c, p)
	c.JSON(resp, err)
}

func matchv1MatchListTime(c *bm.Context) {
	p := new(MatchListTimeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := Matchv1Svc.MatchListTime(c, p)
	c.JSON(resp, err)
}

// RegisterMatchv1BMServer Register the blademaster route
func RegisterMatchv1BMServer(e *bm.Engine, server Matchv1BMServer) {
	Matchv1Svc = server
	e.GET("/matchv1.service.v1.matchv1/Ping", matchv1Ping)
	e.POST("/Matchv1/Query/MatchList", matchv1MatchList)
	e.POST("/Matchv1/Query/RewardConfig", matchv1GetRewardConfig)
	e.POST("/Matchv1/Upload/Score", matchv1ScoreUpload)
	e.POST("/Matchv1/Query/ImmediateRank", matchv1QueryImmediateRank)
	e.POST("/Matchv1/Query/LastRank", matchv1QueryLastRank)
	e.POST("/Matchv1/Query/BonusPoolNum", matchv1GetFloatBonusPool)
	e.POST("/Matchv1/Query/UserReward", matchv1QueryUserReward)
	e.POST("/Matchv1/Get/UserReward", matchv1GetUserReward)
	e.POST("/Matchv1/UserSign", matchv1MatchSign)
	e.POST("/Matchv1/Query/UserMatchRecord", matchv1QueryUserMatchRecord)
	e.POST("/Matchv1/Query/TargetMatchStatus", matchv1QueryTargetMatchStatus)
	e.POST("/Matchv1/Query/UserMatchInfo", matchv1QueryUserMatchInfo)
	e.POST("/Matchv1/Check/UserEnter", matchv1CheckUserEnter)
	e.POST("/Matchv1/Query/UserEnterList", matchv1QueryUserEnterList)
	e.POST("/Matchv1/Get/TargetMatchAllReward", matchv1GetTargetMatchAllReward)
	e.POST("/Matchv1/Query/MatchListTime", matchv1MatchListTime)
}
