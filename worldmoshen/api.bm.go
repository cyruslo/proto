// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	jwt "github.com/cyruslo/library/pkg/middleware/bm_jwt"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathWorldOnBaseUserInfoGet = "/world/OnBaseUserInfoGet"
var PathWorldOnEnterRoom = "/world/OnEnterRoom"
var PathWorldOnLeaveRoom = "/world/OnLeaveRoom"
var PathWorldOnLeaveRoomLog = "/world/OnLeaveRoomLog"
var PathWorldOnUpdatePreventCheat = "/world/OnUpdatePreventCheat"
var PathWorldOnRefreshUserMoney = "/world/OnRefreshUserMoney"
var PathWorldOnCountPlayer = "/world/OnCountPlayer"
var PathWorldOnUpdateAwardGoldPool = "/world/OnUpdateAwardGoldPool"
var PathWorldOnGetJackpotRecord = "/world/OnGetJackpotRecord"
var PathWorldOnInsertJackpotRecord = "/world/OnInsertJackpotRecord"
var PathWorldOnGetJackpotPool = "/world/OnGetJackpotPool"
var PathWorldOnUpdateJackpotPool = "/world/OnUpdateJackpotPool"
var PathWorldOnGetVipInfos = "/world/OnGetVipInfos"
var PathWorldOnUpdateMoney = "/world/OnUpdateMoney"
var PathWorldOnAwardGoldPoolUserLog = "/world/OnAwardGoldPoolUserLog"
var PathWorldOnUpdatEextendCoin = "/world/OnUpdatEextendCoin"
var PathWorldOnShutDwon = "/world/OnShutDwon"
var PathWorldOnCreateCustomRoom = "/world/OnCreateCustomRoom"
var PathWorldOnTableRecordUpdate = "/world/OnTableRecordUpdate"
var PathWorldOnCommonUserLogAdd = "/world/OnCommonUserLogAdd"
var PathWorldOnPublishMail = "/world/OnPublishMail"
var PathWorldOnTurntableRecord = "/world/OnTurntableRecord"
var PathWorldOnTurntableRecordLog = "/world/OnTurntableRecordLog"
var PathWorldOnTurntableRecordInster = "/world/OnTurntableRecordInster"
var PathWorldOnNotifyLoginSucess = "/world/OnNotifyLoginSucess"
var PathWorldOnGameLogReturnRatesAdd = "/world/OnGameLogReturnRatesAdd"
var PathWorldOnGiftTicketUserTicketUpdate = "/world/OnGiftTicketUserTicketUpdate"
var PathWorldOnAwardUserTelephoneBill = "/world/OnAwardUserTelephoneBill"
var PathWorldOnEveryGameLog = "/world/OnEveryGameLog"
var PathWorldOnRemoveUserLastMoney = "/world/OnRemoveUserLastMoney"
var PathWorldOnSaveVipPoint = "/world/OnSaveVipPoint"
var PathWorldOnGetVipInfo = "/world/OnGetVipInfo"
var PathWorldOnUserInfoVipGet = "/world/OnUserInfoVipGet"
var PathWorldOnStartPrevent = "/world/OnStartPrevent"

// WorldBMServer is the server API for World service.
type WorldBMServer interface {
	OnBaseUserInfoGet(ctx context.Context, req *BaseUserInfoReq) (resp *BaseUserInfoRsp, err error)

	OnEnterRoom(ctx context.Context, req *EnterRoomReq) (resp *EnterRoomRsp, err error)

	OnLeaveRoom(ctx context.Context, req *LeaveRoomReq) (resp *CommonResp, err error)

	OnLeaveRoomLog(ctx context.Context, req *LeaveRoomLogReq) (resp *CommonResp, err error)

	OnUpdatePreventCheat(ctx context.Context, req *UpdatePreventCheatReq) (resp *UpdatePreventCheatRsp, err error)

	OnRefreshUserMoney(ctx context.Context, req *RefreshUserMoneyReq) (resp *RefreshUserMoneyRsp, err error)

	OnCountPlayer(ctx context.Context, req *CountPlayerReq) (resp *CommonResp, err error)

	OnUpdateAwardGoldPool(ctx context.Context, req *UpdateAwardGoldPoolReq) (resp *UpdateAwardGoldPoolRsp, err error)

	OnGetJackpotRecord(ctx context.Context, req *GetJackpotRecordReq) (resp *GetJackpotRecordRsp, err error)

	OnInsertJackpotRecord(ctx context.Context, req *InsertJackpotRecordReq) (resp *CommonResp, err error)

	OnGetJackpotPool(ctx context.Context, req *GetJackpotPoolReq) (resp *GetJackpotPoolRsp, err error)

	OnUpdateJackpotPool(ctx context.Context, req *UpdateJackpotPoolReq) (resp *CommonResp, err error)

	OnGetVipInfos(ctx context.Context, req *GetVipInfosReq) (resp *GetVipInfosRsp, err error)

	OnUpdateMoney(ctx context.Context, req *UpdateMoneyReq) (resp *UpdateMoneyRsp, err error)

	OnAwardGoldPoolUserLog(ctx context.Context, req *AwardGoldPoolUserLogReq) (resp *CommonResp, err error)

	OnUpdatEextendCoin(ctx context.Context, req *UpdatEextendCoinReq) (resp *UpdatEextendCoinRsp, err error)

	OnShutDwon(ctx context.Context, req *ShutDwonReq) (resp *CommonResp, err error)

	OnCreateCustomRoom(ctx context.Context, req *CreateCustomRoomReq) (resp *CreateCustomRoomRsp, err error)

	OnTableRecordUpdate(ctx context.Context, req *TableRecordUpdateReq) (resp *CommonResp, err error)

	OnCommonUserLogAdd(ctx context.Context, req *CommonUserLogAddReq) (resp *CommonResp, err error)

	OnPublishMail(ctx context.Context, req *PublishMailReq) (resp *PublishMailRsp, err error)

	OnTurntableRecord(ctx context.Context, req *TurntableRecordReq) (resp *CommonResp, err error)

	OnTurntableRecordLog(ctx context.Context, req *TurntableRecordLogReq) (resp *CommonResp, err error)

	OnTurntableRecordInster(ctx context.Context, req *TurntableRecordInsterReq) (resp *CommonResp, err error)

	OnNotifyLoginSucess(ctx context.Context, req *NotifyLoginSucessReq) (resp *CommonResp, err error)

	OnGameLogReturnRatesAdd(ctx context.Context, req *GameLogReturnRatesAddReq) (resp *CommonResp, err error)

	OnGiftTicketUserTicketUpdate(ctx context.Context, req *GiftTicketUserTicketUpdateReq) (resp *GiftTicketUserTicketUpdateRsp, err error)

	OnAwardUserTelephoneBill(ctx context.Context, req *AwardUserTelephoneBillReq) (resp *CommonResp, err error)

	OnEveryGameLog(ctx context.Context, req *EveryGameLogReq) (resp *CommonResp, err error)

	OnRemoveUserLastMoney(ctx context.Context, req *RemoveUserLastMoneyReq) (resp *CommonResp, err error)

	OnSaveVipPoint(ctx context.Context, req *SaveVipPointReq) (resp *CommonResp, err error)

	OnGetVipInfo(ctx context.Context, req *GetVipInfoReq) (resp *GetVipInfoRsp, err error)

	OnUserInfoVipGet(ctx context.Context, req *UserInfoVipGetReq) (resp *UserInfoVipGetRsp, err error)

	OnStartPrevent(ctx context.Context, req *StartPreventReq) (resp *CommonResp, err error)
}

var WorldSvc WorldBMServer

func worldOnBaseUserInfoGet(c *bm.Context) {
	p := new(BaseUserInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnBaseUserInfoGet(c, p)
	c.JSON(resp, err)
}

func worldOnEnterRoom(c *bm.Context) {
	p := new(EnterRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnEnterRoom(c, p)
	c.JSON(resp, err)
}

func worldOnLeaveRoom(c *bm.Context) {
	p := new(LeaveRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnLeaveRoom(c, p)
	c.JSON(resp, err)
}

func worldOnLeaveRoomLog(c *bm.Context) {
	p := new(LeaveRoomLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnLeaveRoomLog(c, p)
	c.JSON(resp, err)
}

func worldOnUpdatePreventCheat(c *bm.Context) {
	p := new(UpdatePreventCheatReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdatePreventCheat(c, p)
	c.JSON(resp, err)
}

func worldOnRefreshUserMoney(c *bm.Context) {
	p := new(RefreshUserMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnRefreshUserMoney(c, p)
	c.JSON(resp, err)
}

func worldOnCountPlayer(c *bm.Context) {
	p := new(CountPlayerReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCountPlayer(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateAwardGoldPool(c *bm.Context) {
	p := new(UpdateAwardGoldPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateAwardGoldPool(c, p)
	c.JSON(resp, err)
}

func worldOnGetJackpotRecord(c *bm.Context) {
	p := new(GetJackpotRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetJackpotRecord(c, p)
	c.JSON(resp, err)
}

func worldOnInsertJackpotRecord(c *bm.Context) {
	p := new(InsertJackpotRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnInsertJackpotRecord(c, p)
	c.JSON(resp, err)
}

func worldOnGetJackpotPool(c *bm.Context) {
	p := new(GetJackpotPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetJackpotPool(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateJackpotPool(c *bm.Context) {
	p := new(UpdateJackpotPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateJackpotPool(c, p)
	c.JSON(resp, err)
}

func worldOnGetVipInfos(c *bm.Context) {
	p := new(GetVipInfosReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetVipInfos(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateMoney(c *bm.Context) {
	p := new(UpdateMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateMoney(c, p)
	c.JSON(resp, err)
}

func worldOnAwardGoldPoolUserLog(c *bm.Context) {
	p := new(AwardGoldPoolUserLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnAwardGoldPoolUserLog(c, p)
	c.JSON(resp, err)
}

func worldOnUpdatEextendCoin(c *bm.Context) {
	p := new(UpdatEextendCoinReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdatEextendCoin(c, p)
	c.JSON(resp, err)
}

func worldOnShutDwon(c *bm.Context) {
	p := new(ShutDwonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnShutDwon(c, p)
	c.JSON(resp, err)
}

func worldOnCreateCustomRoom(c *bm.Context) {
	p := new(CreateCustomRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCreateCustomRoom(c, p)
	c.JSON(resp, err)
}

func worldOnTableRecordUpdate(c *bm.Context) {
	p := new(TableRecordUpdateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnTableRecordUpdate(c, p)
	c.JSON(resp, err)
}

func worldOnCommonUserLogAdd(c *bm.Context) {
	p := new(CommonUserLogAddReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCommonUserLogAdd(c, p)
	c.JSON(resp, err)
}

func worldOnPublishMail(c *bm.Context) {
	p := new(PublishMailReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnPublishMail(c, p)
	c.JSON(resp, err)
}

func worldOnTurntableRecord(c *bm.Context) {
	p := new(TurntableRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnTurntableRecord(c, p)
	c.JSON(resp, err)
}

func worldOnTurntableRecordLog(c *bm.Context) {
	p := new(TurntableRecordLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnTurntableRecordLog(c, p)
	c.JSON(resp, err)
}

func worldOnTurntableRecordInster(c *bm.Context) {
	p := new(TurntableRecordInsterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnTurntableRecordInster(c, p)
	c.JSON(resp, err)
}

func worldOnNotifyLoginSucess(c *bm.Context) {
	p := new(NotifyLoginSucessReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnNotifyLoginSucess(c, p)
	c.JSON(resp, err)
}

func worldOnGameLogReturnRatesAdd(c *bm.Context) {
	p := new(GameLogReturnRatesAddReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGameLogReturnRatesAdd(c, p)
	c.JSON(resp, err)
}

func worldOnGiftTicketUserTicketUpdate(c *bm.Context) {
	p := new(GiftTicketUserTicketUpdateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGiftTicketUserTicketUpdate(c, p)
	c.JSON(resp, err)
}

func worldOnAwardUserTelephoneBill(c *bm.Context) {
	p := new(AwardUserTelephoneBillReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnAwardUserTelephoneBill(c, p)
	c.JSON(resp, err)
}

func worldOnEveryGameLog(c *bm.Context) {
	p := new(EveryGameLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnEveryGameLog(c, p)
	c.JSON(resp, err)
}

func worldOnRemoveUserLastMoney(c *bm.Context) {
	p := new(RemoveUserLastMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnRemoveUserLastMoney(c, p)
	c.JSON(resp, err)
}

func worldOnSaveVipPoint(c *bm.Context) {
	p := new(SaveVipPointReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnSaveVipPoint(c, p)
	c.JSON(resp, err)
}

func worldOnGetVipInfo(c *bm.Context) {
	p := new(GetVipInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetVipInfo(c, p)
	c.JSON(resp, err)
}

func worldOnUserInfoVipGet(c *bm.Context) {
	p := new(UserInfoVipGetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUserInfoVipGet(c, p)
	c.JSON(resp, err)
}

func worldOnStartPrevent(c *bm.Context) {
	p := new(StartPreventReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnStartPrevent(c, p)
	c.JSON(resp, err)
}

// RegisterWorldBMServer Register the blademaster route
func RegisterWorldBMServer(e *bm.Engine, server WorldBMServer) {
	WorldSvc = server
	e.POST("/world/OnBaseUserInfoGet", worldOnBaseUserInfoGet)
	e.POST("/world/OnEnterRoom", worldOnEnterRoom)
	e.POST("/world/OnLeaveRoom", worldOnLeaveRoom)
	e.POST("/world/OnLeaveRoomLog", worldOnLeaveRoomLog)
	e.POST("/world/OnUpdatePreventCheat", worldOnUpdatePreventCheat)
	e.POST("/world/OnRefreshUserMoney", worldOnRefreshUserMoney)
	e.POST("/world/OnCountPlayer", worldOnCountPlayer)
	e.POST("/world/OnUpdateAwardGoldPool", worldOnUpdateAwardGoldPool)
	e.POST("/world/OnGetJackpotRecord", worldOnGetJackpotRecord)
	e.POST("/world/OnInsertJackpotRecord", worldOnInsertJackpotRecord)
	e.POST("/world/OnGetJackpotPool", worldOnGetJackpotPool)
	e.POST("/world/OnUpdateJackpotPool", worldOnUpdateJackpotPool)
	e.POST("/world/OnGetVipInfos", worldOnGetVipInfos)
	e.POST("/world/OnUpdateMoney", worldOnUpdateMoney)
	e.POST("/world/OnAwardGoldPoolUserLog", worldOnAwardGoldPoolUserLog)
	e.POST("/world/OnUpdatEextendCoin", worldOnUpdatEextendCoin)
	e.POST("/world/OnShutDwon", worldOnShutDwon)
	e.POST("/world/OnCreateCustomRoom", worldOnCreateCustomRoom)
	e.POST("/world/OnTableRecordUpdate", worldOnTableRecordUpdate)
	e.POST("/world/OnCommonUserLogAdd", worldOnCommonUserLogAdd)
	e.POST("/world/OnPublishMail", worldOnPublishMail)
	e.POST("/world/OnTurntableRecord", worldOnTurntableRecord)
	e.POST("/world/OnTurntableRecordLog", worldOnTurntableRecordLog)
	e.POST("/world/OnTurntableRecordInster", worldOnTurntableRecordInster)
	e.POST("/world/OnNotifyLoginSucess", worldOnNotifyLoginSucess)
	e.POST("/world/OnGameLogReturnRatesAdd", worldOnGameLogReturnRatesAdd)
	e.POST("/world/OnGiftTicketUserTicketUpdate", worldOnGiftTicketUserTicketUpdate)
	e.POST("/world/OnAwardUserTelephoneBill", worldOnAwardUserTelephoneBill)
	e.POST("/world/OnEveryGameLog", worldOnEveryGameLog)
	e.POST("/world/OnRemoveUserLastMoney", worldOnRemoveUserLastMoney)
	e.POST("/world/OnSaveVipPoint", worldOnSaveVipPoint)
	e.POST("/world/OnGetVipInfo", worldOnGetVipInfo)
	e.POST("/world/OnUserInfoVipGet", worldOnUserInfoVipGet)
	e.POST("/world/OnStartPrevent", worldOnStartPrevent)
}
func RegisterWorldBMServerMid(e *bm.Engine, server WorldBMServer,mid *jwt.BMJWTMiddleware) {
	WorldSvc = server
	rc := e.Group("/world", mid.MiddlewareFunc())
	{ 
		rc.POST("/OnEnterRoom", worldOnEnterRoom)
		rc.POST("/OnLeaveRoom", worldOnLeaveRoom)
		rc.POST("/OnUpdateMoney",worldOnUpdateMoney)
		rc.POST("/OnRefreshUserMoney", worldOnRefreshUserMoney)
		rc.POST("/OnCountPlayer", worldOnCountPlayer)
		rc.POST("/OnLeaveRoomLog", worldOnLeaveRoomLog)
		rc.POST("/OnEveryGameLog", worldOnEveryGameLog)
	}
}

