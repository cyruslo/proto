// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAiAlgoDispatchDdz = "/ai_algo_dispatch/ddz"
var PathAiAlgoDispatchDdzBidAction = "/ai_algo_dispatch/ddz_bid_action"
var PathAiAlgoDispatchTexa = "/ai_algo_dispatch/texa"
var PathAiAlgoDispatchDaXuan = "/ai_algo_dispatch/daxuan"

// AiAlgoDispatchBMServer is the server API for AiAlgoDispatch service.
type AiAlgoDispatchBMServer interface {
	// 斗地主AI
	Ddz(ctx context.Context, req *DdzParamsReq) (resp *DdzResultRsp, err error)

	// 斗地主叫地主请求
	DdzBidAction(ctx context.Context, req *DdzBidParamsReq) (resp *DdzBidResultRsp, err error)

	// 德州
	Texa(ctx context.Context, req *TexaParamsReq) (resp *TexaResultRsp, err error)

	// 打旋AI
	DaXuan(ctx context.Context, req *DaXuanParamsReq) (resp *DaXuanResultRsp, err error)
}

var AiAlgoDispatchSvc AiAlgoDispatchBMServer

func aiAlgoDispatchDdz(c *bm.Context) {
	p := new(DdzParamsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AiAlgoDispatchSvc.Ddz(c, p)
	c.JSON(resp, err)
}

func aiAlgoDispatchDdzBidAction(c *bm.Context) {
	p := new(DdzBidParamsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AiAlgoDispatchSvc.DdzBidAction(c, p)
	c.JSON(resp, err)
}

func aiAlgoDispatchTexa(c *bm.Context) {
	p := new(TexaParamsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AiAlgoDispatchSvc.Texa(c, p)
	c.JSON(resp, err)
}

func aiAlgoDispatchDaXuan(c *bm.Context) {
	p := new(DaXuanParamsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AiAlgoDispatchSvc.DaXuan(c, p)
	c.JSON(resp, err)
}

// RegisterAiAlgoDispatchBMServer Register the blademaster route
func RegisterAiAlgoDispatchBMServer(e *bm.Engine, server AiAlgoDispatchBMServer) {
	AiAlgoDispatchSvc = server
	e.POST("/ai_algo_dispatch/ddz", aiAlgoDispatchDdz)
	e.POST("/ai_algo_dispatch/ddz_bid_action", aiAlgoDispatchDdzBidAction)
	e.POST("/ai_algo_dispatch/texa", aiAlgoDispatchTexa)
	e.POST("/ai_algo_dispatch/daxuan", aiAlgoDispatchDaXuan)
}
