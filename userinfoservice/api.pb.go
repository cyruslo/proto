// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//获取玩家VIP信息
type VIPInformationReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	UserDbid             int32    `protobuf:"varint,2,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VIPInformationReq) Reset()         { *m = VIPInformationReq{} }
func (m *VIPInformationReq) String() string { return proto.CompactTextString(m) }
func (*VIPInformationReq) ProtoMessage()    {}
func (*VIPInformationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *VIPInformationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VIPInformationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VIPInformationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VIPInformationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VIPInformationReq.Merge(m, src)
}
func (m *VIPInformationReq) XXX_Size() int {
	return m.Size()
}
func (m *VIPInformationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VIPInformationReq.DiscardUnknown(m)
}

var xxx_messageInfo_VIPInformationReq proto.InternalMessageInfo

type VIPInformationRsp struct {
	GameId               int32    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	UserDbid             int32    `protobuf:"varint,2,opt,name=user_dbid,json=userDbid,proto3" json:"user_dbid,omitempty"`
	IsVip                bool     `protobuf:"varint,3,opt,name=is_vip,json=isVip,proto3" json:"is_vip,omitempty"`
	Ispermanentvip       bool     `protobuf:"varint,4,opt,name=ispermanentvip,proto3" json:"ispermanentvip,omitempty"`
	LeftDays             int32    `protobuf:"varint,5,opt,name=left_days,json=leftDays,proto3" json:"left_days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VIPInformationRsp) Reset()         { *m = VIPInformationRsp{} }
func (m *VIPInformationRsp) String() string { return proto.CompactTextString(m) }
func (*VIPInformationRsp) ProtoMessage()    {}
func (*VIPInformationRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *VIPInformationRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VIPInformationRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VIPInformationRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VIPInformationRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VIPInformationRsp.Merge(m, src)
}
func (m *VIPInformationRsp) XXX_Size() int {
	return m.Size()
}
func (m *VIPInformationRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_VIPInformationRsp.DiscardUnknown(m)
}

var xxx_messageInfo_VIPInformationRsp proto.InternalMessageInfo

//微信unionid取account
type GetLoginNameByPartnerUserIDReq struct {
	PartnerId            int32    `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	Unionid              string   `protobuf:"bytes,2,opt,name=unionid,proto3" json:"unionid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLoginNameByPartnerUserIDReq) Reset()         { *m = GetLoginNameByPartnerUserIDReq{} }
func (m *GetLoginNameByPartnerUserIDReq) String() string { return proto.CompactTextString(m) }
func (*GetLoginNameByPartnerUserIDReq) ProtoMessage()    {}
func (*GetLoginNameByPartnerUserIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginNameByPartnerUserIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginNameByPartnerUserIDReq.Merge(m, src)
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginNameByPartnerUserIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginNameByPartnerUserIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginNameByPartnerUserIDReq proto.InternalMessageInfo

type GetLoginNameByPartnerUserIDRsp struct {
	LoginName            string   `protobuf:"bytes,1,opt,name=loginName,proto3" json:"loginName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLoginNameByPartnerUserIDRsp) Reset()         { *m = GetLoginNameByPartnerUserIDRsp{} }
func (m *GetLoginNameByPartnerUserIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetLoginNameByPartnerUserIDRsp) ProtoMessage()    {}
func (*GetLoginNameByPartnerUserIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginNameByPartnerUserIDRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginNameByPartnerUserIDRsp.Merge(m, src)
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginNameByPartnerUserIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginNameByPartnerUserIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginNameByPartnerUserIDRsp proto.InternalMessageInfo

//获取微信绑定信息
type GetQPUserInfoByParnerUserIDReq struct {
	PartnerId            int32    `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	Unionid              string   `protobuf:"bytes,2,opt,name=unionid,proto3" json:"unionid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQPUserInfoByParnerUserIDReq) Reset()         { *m = GetQPUserInfoByParnerUserIDReq{} }
func (m *GetQPUserInfoByParnerUserIDReq) String() string { return proto.CompactTextString(m) }
func (*GetQPUserInfoByParnerUserIDReq) ProtoMessage()    {}
func (*GetQPUserInfoByParnerUserIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQPUserInfoByParnerUserIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDReq.Merge(m, src)
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetQPUserInfoByParnerUserIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetQPUserInfoByParnerUserIDReq proto.InternalMessageInfo

type GetQPUserInfoByParnerUserIDRsp struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BindState            int32    `protobuf:"varint,2,opt,name=bind_state,json=bindState,proto3" json:"bind_state,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQPUserInfoByParnerUserIDRsp) Reset()         { *m = GetQPUserInfoByParnerUserIDRsp{} }
func (m *GetQPUserInfoByParnerUserIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetQPUserInfoByParnerUserIDRsp) ProtoMessage()    {}
func (*GetQPUserInfoByParnerUserIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp.Merge(m, src)
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetQPUserInfoByParnerUserIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetQPUserInfoByParnerUserIDRsp proto.InternalMessageInfo

//微信绑定亲朋账号
//更换第三方账号绑定到新亲朋账号请求
type PartnerChangeBindReq struct {
	PartnerId            int32    `protobuf:"varint,1,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Openid               string   `protobuf:"bytes,3,opt,name=openid,proto3" json:"openid,omitempty"`
	Unionid              string   `protobuf:"bytes,4,opt,name=unionid,proto3" json:"unionid,omitempty"`
	UserId               int32    `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Authcode             string   `protobuf:"bytes,8,opt,name=authcode,proto3" json:"authcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerChangeBindReq) Reset()         { *m = PartnerChangeBindReq{} }
func (m *PartnerChangeBindReq) String() string { return proto.CompactTextString(m) }
func (*PartnerChangeBindReq) ProtoMessage()    {}
func (*PartnerChangeBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *PartnerChangeBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerChangeBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerChangeBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerChangeBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerChangeBindReq.Merge(m, src)
}
func (m *PartnerChangeBindReq) XXX_Size() int {
	return m.Size()
}
func (m *PartnerChangeBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerChangeBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerChangeBindReq proto.InternalMessageInfo

//更换第三方账号绑定到新亲朋账号回应
type PartnerChangeBindRsp struct {
	ErrorCode            int32    `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Authcode             string   `protobuf:"bytes,3,opt,name=authcode,proto3" json:"authcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartnerChangeBindRsp) Reset()         { *m = PartnerChangeBindRsp{} }
func (m *PartnerChangeBindRsp) String() string { return proto.CompactTextString(m) }
func (*PartnerChangeBindRsp) ProtoMessage()    {}
func (*PartnerChangeBindRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *PartnerChangeBindRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerChangeBindRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerChangeBindRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerChangeBindRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerChangeBindRsp.Merge(m, src)
}
func (m *PartnerChangeBindRsp) XXX_Size() int {
	return m.Size()
}
func (m *PartnerChangeBindRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerChangeBindRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerChangeBindRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VIPInformationReq)(nil), "userinfoservice.service.v1.VIPInformationReq")
	proto.RegisterType((*VIPInformationRsp)(nil), "userinfoservice.service.v1.VIPInformationRsp")
	proto.RegisterType((*GetLoginNameByPartnerUserIDReq)(nil), "userinfoservice.service.v1.GetLoginNameByPartnerUserIDReq")
	proto.RegisterType((*GetLoginNameByPartnerUserIDRsp)(nil), "userinfoservice.service.v1.GetLoginNameByPartnerUserIDRsp")
	proto.RegisterType((*GetQPUserInfoByParnerUserIDReq)(nil), "userinfoservice.service.v1.GetQPUserInfoByParnerUserIDReq")
	proto.RegisterType((*GetQPUserInfoByParnerUserIDRsp)(nil), "userinfoservice.service.v1.GetQPUserInfoByParnerUserIDRsp")
	proto.RegisterType((*PartnerChangeBindReq)(nil), "userinfoservice.service.v1.PartnerChangeBindReq")
	proto.RegisterType((*PartnerChangeBindRsp)(nil), "userinfoservice.service.v1.PartnerChangeBindRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x4f, 0x14, 0x31,
	0x14, 0x66, 0x80, 0x5d, 0x76, 0xaa, 0xc1, 0x50, 0x45, 0xc7, 0x01, 0x37, 0xd8, 0x18, 0xc2, 0x41,
	0x76, 0xfc, 0x71, 0xf3, 0xe0, 0x01, 0x48, 0xcc, 0x24, 0xc6, 0xe0, 0xaa, 0x24, 0x7a, 0x99, 0x74,
	0xa7, 0xdd, 0xa1, 0x81, 0x6d, 0x6b, 0xdb, 0x5d, 0xc3, 0xd5, 0xab, 0x47, 0x2f, 0x26, 0x9e, 0xfd,
	0x4b, 0xbc, 0xe0, 0xcd, 0xc4, 0x7f, 0x40, 0xd1, 0xbb, 0xff, 0x82, 0x69, 0x67, 0x16, 0x18, 0x96,
	0x1d, 0x85, 0x78, 0xda, 0x79, 0xdf, 0x6b, 0xbf, 0xf7, 0x7d, 0xef, 0xed, 0x9b, 0x01, 0x3e, 0x96,
	0xac, 0x25, 0x95, 0x30, 0x02, 0x86, 0x7d, 0x4d, 0x15, 0xe3, 0x5d, 0xa1, 0xa9, 0x1a, 0xb0, 0x94,
	0xb6, 0x86, 0xbf, 0x83, 0xbb, 0xe1, 0x6a, 0xc6, 0xcc, 0x76, 0xbf, 0xd3, 0x4a, 0x45, 0x2f, 0xca,
	0x44, 0x26, 0x22, 0x77, 0xa5, 0xd3, 0xef, 0xba, 0xc8, 0x05, 0xee, 0x29, 0xa7, 0x0a, 0x17, 0x33,
	0x21, 0xb2, 0x5d, 0x1a, 0x61, 0xc9, 0x22, 0xcc, 0xb9, 0x30, 0xd8, 0x30, 0xc1, 0x75, 0x9e, 0x45,
	0x31, 0x98, 0xdb, 0x8a, 0x37, 0x63, 0xde, 0x15, 0xaa, 0xe7, 0x12, 0x6d, 0xfa, 0x1a, 0x5e, 0x03,
	0x33, 0x19, 0xee, 0xd1, 0x84, 0x91, 0xc0, 0x5b, 0xf2, 0x56, 0x6a, 0xed, 0xba, 0x0d, 0x63, 0x02,
	0x17, 0x80, 0x6f, 0x85, 0x25, 0xa4, 0xc3, 0x48, 0x30, 0xe9, 0x52, 0x0d, 0x0b, 0x6c, 0x74, 0x18,
	0x41, 0x9f, 0xbc, 0x11, 0x2e, 0x2d, 0xcf, 0xc7, 0x05, 0xe7, 0x41, 0x9d, 0xe9, 0x64, 0xc0, 0x64,
	0x30, 0xb5, 0xe4, 0xad, 0x34, 0xda, 0x35, 0xa6, 0xb7, 0x98, 0x84, 0xcb, 0x60, 0x96, 0x69, 0x49,
	0x55, 0x0f, 0x73, 0xca, 0x8d, 0x4d, 0x4f, 0xbb, 0xf4, 0x09, 0xd4, 0x72, 0xef, 0xd2, 0xae, 0x49,
	0x08, 0xde, 0xd3, 0x41, 0x2d, 0xe7, 0xb6, 0xc0, 0x06, 0xde, 0xd3, 0xe8, 0x25, 0x68, 0x3e, 0xa2,
	0xe6, 0xb1, 0xc8, 0x18, 0x7f, 0x82, 0x7b, 0x74, 0x6d, 0x6f, 0x13, 0x2b, 0xc3, 0xa9, 0x7a, 0xa1,
	0xa9, 0x8a, 0x37, 0xac, 0xff, 0x1b, 0x00, 0xc8, 0x1c, 0x3b, 0x92, 0xed, 0x17, 0x48, 0x4c, 0x60,
	0x00, 0x66, 0xfa, 0x9c, 0x09, 0x5e, 0xe8, 0xf6, 0xdb, 0xc3, 0x10, 0x3d, 0xac, 0xa6, 0xd6, 0x12,
	0x2e, 0x02, 0x7f, 0x77, 0x98, 0x76, 0xcc, 0x7e, 0xfb, 0x08, 0x28, 0xa4, 0x3d, 0xdd, 0x74, 0xe7,
	0x79, 0x57, 0x38, 0x82, 0xff, 0x23, 0x4d, 0x55, 0x53, 0xe7, 0x93, 0x72, 0x03, 0x39, 0x9a, 0x94,
	0x0d, 0x63, 0x62, 0x6b, 0x76, 0x18, 0x27, 0x89, 0x36, 0xd8, 0xd0, 0x62, 0x54, 0xbe, 0x45, 0x9e,
	0x59, 0xc0, 0xd6, 0xec, 0x51, 0xad, 0x71, 0x46, 0xdd, 0xb0, 0xfc, 0xf6, 0x30, 0x44, 0xbf, 0x3d,
	0x70, 0xa5, 0xe8, 0xc0, 0xfa, 0x36, 0xe6, 0x19, 0x5d, 0x63, 0x9c, 0xfc, 0x83, 0x8b, 0x9b, 0xe0,
	0x22, 0x4e, 0x53, 0xaa, 0x75, 0x62, 0xc4, 0x0e, 0xe5, 0x85, 0x95, 0x0b, 0x39, 0xf6, 0xdc, 0x42,
	0xf0, 0x2a, 0xa8, 0x0b, 0x49, 0xad, 0xcf, 0xbc, 0x66, 0x11, 0x1d, 0x6f, 0xc0, 0x74, 0xa9, 0x01,
	0xc7, 0xed, 0xd5, 0x4a, 0xf6, 0x20, 0x98, 0xe6, 0x76, 0x1a, 0x75, 0x77, 0xde, 0x3d, 0xc3, 0x10,
	0x34, 0x24, 0xd6, 0xfa, 0x8d, 0x50, 0x24, 0x98, 0x71, 0xf8, 0x61, 0x6c, 0x73, 0xb8, 0x6f, 0xb6,
	0x53, 0x41, 0x68, 0xd0, 0xc8, 0x73, 0xc3, 0x18, 0xed, 0x9c, 0x66, 0x58, 0x4b, 0x6b, 0x98, 0x2a,
	0x25, 0x54, 0xe2, 0x6e, 0x15, 0x86, 0x1d, 0xb2, 0x2e, 0x48, 0xa9, 0x85, 0x93, 0xa5, 0x16, 0x96,
	0x8a, 0x4d, 0x95, 0x8b, 0xdd, 0xfb, 0x52, 0x03, 0x97, 0x4e, 0xbc, 0x27, 0xe0, 0x3b, 0x0f, 0xcc,
	0x96, 0x97, 0x10, 0xae, 0xb6, 0xc6, 0xbf, 0x4c, 0x5a, 0x23, 0xcb, 0x1f, 0x9e, 0xe5, 0xb8, 0x96,
	0x68, 0xe1, 0xed, 0xb7, 0x5f, 0xef, 0x27, 0xe7, 0xd1, 0xe5, 0x68, 0xc0, 0x64, 0x74, 0xa2, 0xf4,
	0x67, 0x0f, 0x2c, 0x54, 0x2c, 0x04, 0x7c, 0x50, 0x55, 0xab, 0x7a, 0x49, 0xc3, 0x73, 0xdf, 0xd5,
	0x12, 0xdd, 0x76, 0xa2, 0x97, 0xd1, 0xad, 0x08, 0xa7, 0xa9, 0xe8, 0x73, 0x13, 0x55, 0xa9, 0x2c,
	0x5c, 0x8c, 0xdb, 0x9d, 0xbf, 0xba, 0xa8, 0xd8, 0xe7, 0xf0, 0xdc, 0x77, 0xc7, 0xb9, 0x18, 0xab,
	0xf2, 0xa3, 0x07, 0xe6, 0x46, 0xfe, 0x9b, 0xf0, 0x4e, 0x55, 0xfd, 0xd3, 0x76, 0x37, 0x3c, 0xe3,
	0x0d, 0x2d, 0x11, 0x72, 0x3a, 0x17, 0x51, 0x78, 0xa8, 0x73, 0xe4, 0xd8, 0xda, 0xf5, 0xfd, 0x1f,
	0xcd, 0x89, 0xfd, 0x83, 0xa6, 0xf7, 0xf5, 0xa0, 0xe9, 0x7d, 0x3f, 0x68, 0x7a, 0x1f, 0x7e, 0x36,
	0x27, 0x5e, 0x4d, 0x61, 0xc9, 0x3a, 0x75, 0xf7, 0xa5, 0xba, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x2f, 0x91, 0x2f, 0x43, 0x1f, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserinfoserviceClient is the client API for Userinfoservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserinfoserviceClient interface {
	VIPInformation(ctx context.Context, in *VIPInformationReq, opts ...grpc.CallOption) (*VIPInformationRsp, error)
	GetLoginNameByPartnerUserID(ctx context.Context, in *GetLoginNameByPartnerUserIDReq, opts ...grpc.CallOption) (*GetLoginNameByPartnerUserIDRsp, error)
	GetQPUserInfoByParnerUserID(ctx context.Context, in *GetQPUserInfoByParnerUserIDReq, opts ...grpc.CallOption) (*GetQPUserInfoByParnerUserIDRsp, error)
	PartnerChangeBind(ctx context.Context, in *PartnerChangeBindReq, opts ...grpc.CallOption) (*PartnerChangeBindRsp, error)
}

type userinfoserviceClient struct {
	cc *grpc.ClientConn
}

func NewUserinfoserviceClient(cc *grpc.ClientConn) UserinfoserviceClient {
	return &userinfoserviceClient{cc}
}

func (c *userinfoserviceClient) VIPInformation(ctx context.Context, in *VIPInformationReq, opts ...grpc.CallOption) (*VIPInformationRsp, error) {
	out := new(VIPInformationRsp)
	err := c.cc.Invoke(ctx, "/userinfoservice.service.v1.userinfoservice/VIPInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoserviceClient) GetLoginNameByPartnerUserID(ctx context.Context, in *GetLoginNameByPartnerUserIDReq, opts ...grpc.CallOption) (*GetLoginNameByPartnerUserIDRsp, error) {
	out := new(GetLoginNameByPartnerUserIDRsp)
	err := c.cc.Invoke(ctx, "/userinfoservice.service.v1.userinfoservice/GetLoginNameByPartnerUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoserviceClient) GetQPUserInfoByParnerUserID(ctx context.Context, in *GetQPUserInfoByParnerUserIDReq, opts ...grpc.CallOption) (*GetQPUserInfoByParnerUserIDRsp, error) {
	out := new(GetQPUserInfoByParnerUserIDRsp)
	err := c.cc.Invoke(ctx, "/userinfoservice.service.v1.userinfoservice/GetQPUserInfoByParnerUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoserviceClient) PartnerChangeBind(ctx context.Context, in *PartnerChangeBindReq, opts ...grpc.CallOption) (*PartnerChangeBindRsp, error) {
	out := new(PartnerChangeBindRsp)
	err := c.cc.Invoke(ctx, "/userinfoservice.service.v1.userinfoservice/PartnerChangeBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserinfoserviceServer is the server API for Userinfoservice service.
type UserinfoserviceServer interface {
	VIPInformation(context.Context, *VIPInformationReq) (*VIPInformationRsp, error)
	GetLoginNameByPartnerUserID(context.Context, *GetLoginNameByPartnerUserIDReq) (*GetLoginNameByPartnerUserIDRsp, error)
	GetQPUserInfoByParnerUserID(context.Context, *GetQPUserInfoByParnerUserIDReq) (*GetQPUserInfoByParnerUserIDRsp, error)
	PartnerChangeBind(context.Context, *PartnerChangeBindReq) (*PartnerChangeBindRsp, error)
}

func RegisterUserinfoserviceServer(s *grpc.Server, srv UserinfoserviceServer) {
	s.RegisterService(&_Userinfoservice_serviceDesc, srv)
}

func _Userinfoservice_VIPInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VIPInformationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoserviceServer).VIPInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfoservice.service.v1.userinfoservice/VIPInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoserviceServer).VIPInformation(ctx, req.(*VIPInformationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userinfoservice_GetLoginNameByPartnerUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginNameByPartnerUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoserviceServer).GetLoginNameByPartnerUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfoservice.service.v1.userinfoservice/GetLoginNameByPartnerUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoserviceServer).GetLoginNameByPartnerUserID(ctx, req.(*GetLoginNameByPartnerUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userinfoservice_GetQPUserInfoByParnerUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQPUserInfoByParnerUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoserviceServer).GetQPUserInfoByParnerUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfoservice.service.v1.userinfoservice/GetQPUserInfoByParnerUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoserviceServer).GetQPUserInfoByParnerUserID(ctx, req.(*GetQPUserInfoByParnerUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userinfoservice_PartnerChangeBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerChangeBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoserviceServer).PartnerChangeBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userinfoservice.service.v1.userinfoservice/PartnerChangeBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoserviceServer).PartnerChangeBind(ctx, req.(*PartnerChangeBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Userinfoservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userinfoservice.service.v1.userinfoservice",
	HandlerType: (*UserinfoserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VIPInformation",
			Handler:    _Userinfoservice_VIPInformation_Handler,
		},
		{
			MethodName: "GetLoginNameByPartnerUserID",
			Handler:    _Userinfoservice_GetLoginNameByPartnerUserID_Handler,
		},
		{
			MethodName: "GetQPUserInfoByParnerUserID",
			Handler:    _Userinfoservice_GetQPUserInfoByParnerUserID_Handler,
		},
		{
			MethodName: "PartnerChangeBind",
			Handler:    _Userinfoservice_PartnerChangeBind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *VIPInformationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VIPInformationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
	}
	if m.UserDbid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VIPInformationRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VIPInformationRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
	}
	if m.UserDbid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserDbid))
	}
	if m.IsVip {
		dAtA[i] = 0x18
		i++
		if m.IsVip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ispermanentvip {
		dAtA[i] = 0x20
		i++
		if m.Ispermanentvip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LeftDays != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LeftDays))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLoginNameByPartnerUserIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginNameByPartnerUserIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartnerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
	}
	if len(m.Unionid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i += copy(dAtA[i:], m.Unionid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLoginNameByPartnerUserIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginNameByPartnerUserIDRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoginName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoginName)))
		i += copy(dAtA[i:], m.LoginName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetQPUserInfoByParnerUserIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQPUserInfoByParnerUserIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartnerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
	}
	if len(m.Unionid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i += copy(dAtA[i:], m.Unionid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetQPUserInfoByParnerUserIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQPUserInfoByParnerUserIDRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if m.BindState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BindState))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PartnerChangeBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerChangeBindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartnerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartnerId))
	}
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.Openid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Openid)))
		i += copy(dAtA[i:], m.Openid)
	}
	if len(m.Unionid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Unionid)))
		i += copy(dAtA[i:], m.Unionid)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Authcode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i += copy(dAtA[i:], m.Authcode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PartnerChangeBindRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerChangeBindRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Authcode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authcode)))
		i += copy(dAtA[i:], m.Authcode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VIPInformationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VIPInformationRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.UserDbid != 0 {
		n += 1 + sovApi(uint64(m.UserDbid))
	}
	if m.IsVip {
		n += 2
	}
	if m.Ispermanentvip {
		n += 2
	}
	if m.LeftDays != 0 {
		n += 1 + sovApi(uint64(m.LeftDays))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLoginNameByPartnerUserIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLoginNameByPartnerUserIDRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoginName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetQPUserInfoByParnerUserIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetQPUserInfoByParnerUserIDRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.BindState != 0 {
		n += 1 + sovApi(uint64(m.BindState))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartnerChangeBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerId != 0 {
		n += 1 + sovApi(uint64(m.PartnerId))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Unionid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartnerChangeBindRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovApi(uint64(m.ErrorCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Authcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VIPInformationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VIPInformationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VIPInformationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VIPInformationRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VIPInformationRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VIPInformationRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDbid", wireType)
			}
			m.UserDbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVip = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ispermanentvip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ispermanentvip = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDays", wireType)
			}
			m.LeftDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginNameByPartnerUserIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginNameByPartnerUserIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginNameByPartnerUserIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQPUserInfoByParnerUserIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQPUserInfoByParnerUserIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQPUserInfoByParnerUserIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindState", wireType)
			}
			m.BindState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerChangeBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerChangeBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerChangeBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			m.PartnerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerChangeBindRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerChangeBindRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerChangeBindRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
