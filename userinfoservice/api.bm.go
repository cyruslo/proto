// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathUserinfoserviceVIPInformation = "/vip/VIPInformation"
var PathUserinfoserviceGetLoginNameByPartnerUserID = "/account/GetLoginNameByPartnerUserID"
var PathUserinfoserviceGetQPUserInfoByParnerUserID = "/account/GetQPUserInfoByParnerUserID"
var PathUserinfoservicePartnerChangeBind = "/account/PartnerChangeBind"

// UserinfoserviceBMServer is the server API for Userinfoservice service.
type UserinfoserviceBMServer interface {
	VIPInformation(ctx context.Context, req *VIPInformationReq) (resp *VIPInformationRsp, err error)

	GetLoginNameByPartnerUserID(ctx context.Context, req *GetLoginNameByPartnerUserIDReq) (resp *GetLoginNameByPartnerUserIDRsp, err error)

	GetQPUserInfoByParnerUserID(ctx context.Context, req *GetQPUserInfoByParnerUserIDReq) (resp *GetQPUserInfoByParnerUserIDRsp, err error)

	PartnerChangeBind(ctx context.Context, req *PartnerChangeBindReq) (resp *PartnerChangeBindRsp, err error)
}

var UserinfoserviceSvc UserinfoserviceBMServer

func userinfoserviceVIPInformation(c *bm.Context) {
	p := new(VIPInformationReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserinfoserviceSvc.VIPInformation(c, p)
	c.JSON(resp, err)
}

func userinfoserviceGetLoginNameByPartnerUserID(c *bm.Context) {
	p := new(GetLoginNameByPartnerUserIDReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserinfoserviceSvc.GetLoginNameByPartnerUserID(c, p)
	c.JSON(resp, err)
}

func userinfoserviceGetQPUserInfoByParnerUserID(c *bm.Context) {
	p := new(GetQPUserInfoByParnerUserIDReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserinfoserviceSvc.GetQPUserInfoByParnerUserID(c, p)
	c.JSON(resp, err)
}

func userinfoservicePartnerChangeBind(c *bm.Context) {
	p := new(PartnerChangeBindReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserinfoserviceSvc.PartnerChangeBind(c, p)
	c.JSON(resp, err)
}

// RegisterUserinfoserviceBMServer Register the blademaster route
func RegisterUserinfoserviceBMServer(e *bm.Engine, server UserinfoserviceBMServer) {
	UserinfoserviceSvc = server
	e.POST("/vip/VIPInformation", userinfoserviceVIPInformation)
	e.POST("/account/GetLoginNameByPartnerUserID", userinfoserviceGetLoginNameByPartnerUserID)
	e.POST("/account/GetQPUserInfoByParnerUserID", userinfoserviceGetQPUserInfoByParnerUserID)
	e.POST("/account/PartnerChangeBind", userinfoservicePartnerChangeBind)
}
