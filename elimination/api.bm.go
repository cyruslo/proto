// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathEliminationPing = "/elimination.service.v1.Elimination/Ping"
var PathEliminationList = "/Elimination/Query/List"
var PathEliminationDetail = "/Elimination/Query/Detail"
var PathEliminationRewardInfo = "/Elimination/Query/RewardInfo"
var PathEliminationUserInfo = "/Elimination/Query/UserInfo"
var PathEliminationTableInfo = "/Elimination/Query/TableInfo"
var PathEliminationUserRecord = "/Elimination/Query/UserRecord"
var PathEliminationSignCheck = "/Elimination/Check/Sign"
var PathEliminationSignEnsure = "/Elimination/SignEnsure"
var PathEliminationCancelSign = "/Elimination/Cancel/Sign"
var PathEliminationUpload = "/Elimination/Upload/Score"
var PathEliminationQueryReward = "/Elimination/Query/Reward"
var PathEliminationGetReward = "/Elimination/Get/Reward"
var PathEliminationTargetTableInfo = "/Elimination/Get/TargetTable"
var PathEliminationUserEnterInfo = "/Elimination/Query/UserEnterInfo"
var PathEliminationBlindBetList = "/Elimination/Query/BlindBetList"
var PathEliminationRoomAllTable = "/Elimination/Query/RoomAllTable"
var PathEliminationUserSelfRank = "/Elimination/Query/UserSelfRank"
var PathEliminationReDistributeTable = "/Elimination/Retry/DistributeTable"

// EliminationBMServer is the server API for Elimination service.
type EliminationBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 一.查询比赛列表
	List(ctx context.Context, req *ListReq) (resp *ListRsp, err error)

	// 二.获取比赛详情
	Detail(ctx context.Context, req *DetailReq) (resp *DetailRsp, err error)

	//    三.获取比赛奖励信息
	RewardInfo(ctx context.Context, req *RewardInfoReq) (resp *RewardInfoRsp, err error)

	//    四.获取比赛玩家信息(包含实时战绩)
	UserInfo(ctx context.Context, req *UserInfoReq) (resp *UserInfoRsp, err error)

	//    五.获取牌桌信息
	TableInfo(ctx context.Context, req *TableInfoReq) (resp *TableInfoRsp, err error)

	//    六.获取个人参赛记录
	UserRecord(ctx context.Context, req *UserRecordReq) (resp *UserRecordRsp, err error)

	//    七.查询报名费用以及是否满足报名条件
	SignCheck(ctx context.Context, req *SignCheckReq) (resp *SignCheckRsp, err error)

	//   八.确认报名(包含分房与配桌)
	SignEnsure(ctx context.Context, req *SignCommonReq) (resp *SignEnsureRsp, err error)

	//    九.取消报名
	CancelSign(ctx context.Context, req *SignCommonReq) (resp *CancelSignRsp, err error)

	//    十.积分上报(包含淘汰发奖)
	Upload(ctx context.Context, req *UploadReq) (resp *UploadRsp, err error)

	// 十一.查询奖励
	QueryReward(ctx context.Context, req *QueryRewardReq) (resp *QueryRewardRsp, err error)

	// 十二.领取奖励
	GetReward(ctx context.Context, req *GetRewardReq) (resp *GetRewardRsp, err error)

	// 十三.获取特定牌桌的信息
	TargetTableInfo(ctx context.Context, req *TargetTableReq) (resp *TargetTableRsp, err error)

	// 十四.获取用户进场信息
	UserEnterInfo(ctx context.Context, req *UserEnterReq) (resp *UserEnterRsp, err error)

	// 十五.获取盲注列表
	BlindBetList(ctx context.Context, req *BlindBetReq) (resp *BlindBetResp, err error)

	// 十六.获取Room下的所有场次的所有桌子
	RoomAllTable(ctx context.Context, req *RoomAllTableReq) (resp *RoomAllTableResp, err error)

	// 十七.获取实时个人排名相关数据
	UserSelfRank(ctx context.Context, req *UserSelfRankReq) (resp *UserSelfRankResp, err error)

	// 十七.获取实时个人排名相关数据
	ReDistributeTable(ctx context.Context, req *ReDistributeReq) (resp *ReDistributeResp, err error)
}

var EliminationSvc EliminationBMServer

func eliminationPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.Ping(c, p)
	c.JSON(resp, err)
}

func eliminationList(c *bm.Context) {
	p := new(ListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.List(c, p)
	c.JSON(resp, err)
}

func eliminationDetail(c *bm.Context) {
	p := new(DetailReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.Detail(c, p)
	c.JSON(resp, err)
}

func eliminationRewardInfo(c *bm.Context) {
	p := new(RewardInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.RewardInfo(c, p)
	c.JSON(resp, err)
}

func eliminationUserInfo(c *bm.Context) {
	p := new(UserInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.UserInfo(c, p)
	c.JSON(resp, err)
}

func eliminationTableInfo(c *bm.Context) {
	p := new(TableInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.TableInfo(c, p)
	c.JSON(resp, err)
}

func eliminationUserRecord(c *bm.Context) {
	p := new(UserRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.UserRecord(c, p)
	c.JSON(resp, err)
}

func eliminationSignCheck(c *bm.Context) {
	p := new(SignCheckReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.SignCheck(c, p)
	c.JSON(resp, err)
}

func eliminationSignEnsure(c *bm.Context) {
	p := new(SignCommonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.SignEnsure(c, p)
	c.JSON(resp, err)
}

func eliminationCancelSign(c *bm.Context) {
	p := new(SignCommonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.CancelSign(c, p)
	c.JSON(resp, err)
}

func eliminationUpload(c *bm.Context) {
	p := new(UploadReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.Upload(c, p)
	c.JSON(resp, err)
}

func eliminationQueryReward(c *bm.Context) {
	p := new(QueryRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.QueryReward(c, p)
	c.JSON(resp, err)
}

func eliminationGetReward(c *bm.Context) {
	p := new(GetRewardReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.GetReward(c, p)
	c.JSON(resp, err)
}

func eliminationTargetTableInfo(c *bm.Context) {
	p := new(TargetTableReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.TargetTableInfo(c, p)
	c.JSON(resp, err)
}

func eliminationUserEnterInfo(c *bm.Context) {
	p := new(UserEnterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.UserEnterInfo(c, p)
	c.JSON(resp, err)
}

func eliminationBlindBetList(c *bm.Context) {
	p := new(BlindBetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.BlindBetList(c, p)
	c.JSON(resp, err)
}

func eliminationRoomAllTable(c *bm.Context) {
	p := new(RoomAllTableReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.RoomAllTable(c, p)
	c.JSON(resp, err)
}

func eliminationUserSelfRank(c *bm.Context) {
	p := new(UserSelfRankReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.UserSelfRank(c, p)
	c.JSON(resp, err)
}

func eliminationReDistributeTable(c *bm.Context) {
	p := new(ReDistributeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := EliminationSvc.ReDistributeTable(c, p)
	c.JSON(resp, err)
}

// RegisterEliminationBMServer Register the blademaster route
func RegisterEliminationBMServer(e *bm.Engine, server EliminationBMServer) {
	EliminationSvc = server
	e.GET("/elimination.service.v1.Elimination/Ping", eliminationPing)
	e.POST("/Elimination/Query/List", eliminationList)
	e.POST("/Elimination/Query/Detail", eliminationDetail)
	e.POST("/Elimination/Query/RewardInfo", eliminationRewardInfo)
	e.POST("/Elimination/Query/UserInfo", eliminationUserInfo)
	e.POST("/Elimination/Query/TableInfo", eliminationTableInfo)
	e.POST("/Elimination/Query/UserRecord", eliminationUserRecord)
	e.POST("/Elimination/Check/Sign", eliminationSignCheck)
	e.POST("/Elimination/SignEnsure", eliminationSignEnsure)
	e.POST("/Elimination/Cancel/Sign", eliminationCancelSign)
	e.POST("/Elimination/Upload/Score", eliminationUpload)
	e.POST("/Elimination/Query/Reward", eliminationQueryReward)
	e.POST("/Elimination/Get/Reward", eliminationGetReward)
	e.POST("/Elimination/Get/TargetTable", eliminationTargetTableInfo)
	e.POST("/Elimination/Query/UserEnterInfo", eliminationUserEnterInfo)
	e.POST("/Elimination/Query/BlindBetList", eliminationBlindBetList)
	e.POST("/Elimination/Query/RoomAllTable", eliminationRoomAllTable)
	e.POST("/Elimination/Query/UserSelfRank", eliminationUserSelfRank)
	e.POST("/Elimination/Retry/DistributeTable", eliminationReDistributeTable)
}
