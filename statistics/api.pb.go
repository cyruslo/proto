// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatisticsSystemReq struct {
	GameID               int32                               `protobuf:"varint,1,opt,name=gameID,proto3" json:"game_id" form:"game_id" validate:"required"`
	ArenaID              int32                               `protobuf:"varint,2,opt,name=arenaID,proto3" json:"arena_id" form:"arena_id" validate:"required"`
	RoomID               int32                               `protobuf:"varint,3,opt,name=roomID,proto3" json:"room_id" form:"room_id"`
	Systems              []*StatisticsSystemReq_SystemDetail `protobuf:"bytes,4,rep,name=systems,proto3" json:"systems" form:"systems"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *StatisticsSystemReq) Reset()         { *m = StatisticsSystemReq{} }
func (m *StatisticsSystemReq) String() string { return proto.CompactTextString(m) }
func (*StatisticsSystemReq) ProtoMessage()    {}
func (*StatisticsSystemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *StatisticsSystemReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsSystemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsSystemReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsSystemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsSystemReq.Merge(m, src)
}
func (m *StatisticsSystemReq) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsSystemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsSystemReq.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsSystemReq proto.InternalMessageInfo

type StatisticsSystemReq_SystemDetail struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"  validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"  validate:"required"`
	Cost                 int64    `protobuf:"varint,3,opt,name=cost,proto3" json:"cost" form:"cost" validate:"required"`
	Earn                 int64    `protobuf:"varint,4,opt,name=earn,proto3" json:"earn" form:"earn" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatisticsSystemReq_SystemDetail) Reset()         { *m = StatisticsSystemReq_SystemDetail{} }
func (m *StatisticsSystemReq_SystemDetail) String() string { return proto.CompactTextString(m) }
func (*StatisticsSystemReq_SystemDetail) ProtoMessage()    {}
func (*StatisticsSystemReq_SystemDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}
func (m *StatisticsSystemReq_SystemDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsSystemReq_SystemDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsSystemReq_SystemDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsSystemReq_SystemDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsSystemReq_SystemDetail.Merge(m, src)
}
func (m *StatisticsSystemReq_SystemDetail) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsSystemReq_SystemDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsSystemReq_SystemDetail.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsSystemReq_SystemDetail proto.InternalMessageInfo

type StatisticsMonsterReq struct {
	GameID               int32                                 `protobuf:"varint,1,opt,name=gameID,proto3" json:"game_id" form:"game_id"  validate:"required"`
	ArenaID              int32                                 `protobuf:"varint,2,opt,name=arenaID,proto3" json:"arena_id" form:"arena_id"  validate:"required"`
	RoomID               int32                                 `protobuf:"varint,3,opt,name=roomID,proto3" json:"room_id" form:"room_id"`
	Monsters             []*StatisticsMonsterReq_MonsterDetail `protobuf:"bytes,4,rep,name=monsters,proto3" json:"monsters" form:"monsters"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *StatisticsMonsterReq) Reset()         { *m = StatisticsMonsterReq{} }
func (m *StatisticsMonsterReq) String() string { return proto.CompactTextString(m) }
func (*StatisticsMonsterReq) ProtoMessage()    {}
func (*StatisticsMonsterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *StatisticsMonsterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsMonsterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsMonsterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsMonsterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsMonsterReq.Merge(m, src)
}
func (m *StatisticsMonsterReq) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsMonsterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsMonsterReq.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsMonsterReq proto.InternalMessageInfo

type StatisticsMonsterReq_MonsterDetail struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"  validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"  validate:"required"`
	Tax                  int64    `protobuf:"varint,3,opt,name=tax,proto3" json:"tax" form:"tax"`
	Give                 int64    `protobuf:"varint,4,opt,name=give,proto3" json:"give" form:"give"`
	Capture              int64    `protobuf:"varint,5,opt,name=capture,proto3" json:"capture" form:"capture"`
	Cost                 int64    `protobuf:"varint,6,opt,name=cost,proto3" json:"cost" form:"cost"`
	Earn                 int64    `protobuf:"varint,7,opt,name=earn,proto3" json:"earn" form:"earn"`
	Hit                  int64    `protobuf:"varint,8,opt,name=hit,proto3" json:"hit" form:"hit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatisticsMonsterReq_MonsterDetail) Reset()         { *m = StatisticsMonsterReq_MonsterDetail{} }
func (m *StatisticsMonsterReq_MonsterDetail) String() string { return proto.CompactTextString(m) }
func (*StatisticsMonsterReq_MonsterDetail) ProtoMessage()    {}
func (*StatisticsMonsterReq_MonsterDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1, 0}
}
func (m *StatisticsMonsterReq_MonsterDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsMonsterReq_MonsterDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsMonsterReq_MonsterDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsMonsterReq_MonsterDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsMonsterReq_MonsterDetail.Merge(m, src)
}
func (m *StatisticsMonsterReq_MonsterDetail) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsMonsterReq_MonsterDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsMonsterReq_MonsterDetail.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsMonsterReq_MonsterDetail proto.InternalMessageInfo

type StatisticsMutiSystemReq struct {
	GameID               int32                                   `protobuf:"varint,1,opt,name=gameID,proto3" json:"game_id" form:"game_id" validate:"required"`
	ArenaID              int32                                   `protobuf:"varint,2,opt,name=arenaID,proto3" json:"arena_id" form:"arena_id" validate:"required"`
	RoomID               string                                  `protobuf:"bytes,3,opt,name=roomID,proto3" json:"room_id" form:"room_id"`
	Systems              []*StatisticsMutiSystemReq_SystemDetail `protobuf:"bytes,4,rep,name=systems,proto3" json:"systems" form:"systems"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *StatisticsMutiSystemReq) Reset()         { *m = StatisticsMutiSystemReq{} }
func (m *StatisticsMutiSystemReq) String() string { return proto.CompactTextString(m) }
func (*StatisticsMutiSystemReq) ProtoMessage()    {}
func (*StatisticsMutiSystemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *StatisticsMutiSystemReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsMutiSystemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsMutiSystemReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsMutiSystemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsMutiSystemReq.Merge(m, src)
}
func (m *StatisticsMutiSystemReq) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsMutiSystemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsMutiSystemReq.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsMutiSystemReq proto.InternalMessageInfo

type StatisticsMutiSystemReq_SystemDetail struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"  validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"  validate:"required"`
	Value                int64    `protobuf:"varint,3,opt,name=value,proto3" json:"value" form:"value" validate:"required"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type" form:"type" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatisticsMutiSystemReq_SystemDetail) Reset()         { *m = StatisticsMutiSystemReq_SystemDetail{} }
func (m *StatisticsMutiSystemReq_SystemDetail) String() string { return proto.CompactTextString(m) }
func (*StatisticsMutiSystemReq_SystemDetail) ProtoMessage()    {}
func (*StatisticsMutiSystemReq_SystemDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2, 0}
}
func (m *StatisticsMutiSystemReq_SystemDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsMutiSystemReq_SystemDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsMutiSystemReq_SystemDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatisticsMutiSystemReq_SystemDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsMutiSystemReq_SystemDetail.Merge(m, src)
}
func (m *StatisticsMutiSystemReq_SystemDetail) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsMutiSystemReq_SystemDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsMutiSystemReq_SystemDetail.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsMutiSystemReq_SystemDetail proto.InternalMessageInfo

type SystemRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemRsp) Reset()         { *m = SystemRsp{} }
func (m *SystemRsp) String() string { return proto.CompactTextString(m) }
func (*SystemRsp) ProtoMessage()    {}
func (*SystemRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *SystemRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemRsp.Merge(m, src)
}
func (m *SystemRsp) XXX_Size() int {
	return m.Size()
}
func (m *SystemRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SystemRsp proto.InternalMessageInfo

type MonsterRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonsterRsp) Reset()         { *m = MonsterRsp{} }
func (m *MonsterRsp) String() string { return proto.CompactTextString(m) }
func (*MonsterRsp) ProtoMessage()    {}
func (*MonsterRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *MonsterRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonsterRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonsterRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonsterRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonsterRsp.Merge(m, src)
}
func (m *MonsterRsp) XXX_Size() int {
	return m.Size()
}
func (m *MonsterRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MonsterRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MonsterRsp proto.InternalMessageInfo

type MutiSystemRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MutiSystemRsp) Reset()         { *m = MutiSystemRsp{} }
func (m *MutiSystemRsp) String() string { return proto.CompactTextString(m) }
func (*MutiSystemRsp) ProtoMessage()    {}
func (*MutiSystemRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *MutiSystemRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutiSystemRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutiSystemRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutiSystemRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutiSystemRsp.Merge(m, src)
}
func (m *MutiSystemRsp) XXX_Size() int {
	return m.Size()
}
func (m *MutiSystemRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MutiSystemRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MutiSystemRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StatisticsSystemReq)(nil), "statistic.service.v1.StatisticsSystemReq")
	proto.RegisterType((*StatisticsSystemReq_SystemDetail)(nil), "statistic.service.v1.StatisticsSystemReq.SystemDetail")
	proto.RegisterType((*StatisticsMonsterReq)(nil), "statistic.service.v1.StatisticsMonsterReq")
	proto.RegisterType((*StatisticsMonsterReq_MonsterDetail)(nil), "statistic.service.v1.StatisticsMonsterReq.MonsterDetail")
	proto.RegisterType((*StatisticsMutiSystemReq)(nil), "statistic.service.v1.StatisticsMutiSystemReq")
	proto.RegisterType((*StatisticsMutiSystemReq_SystemDetail)(nil), "statistic.service.v1.StatisticsMutiSystemReq.SystemDetail")
	proto.RegisterType((*SystemRsp)(nil), "statistic.service.v1.SystemRsp")
	proto.RegisterType((*MonsterRsp)(nil), "statistic.service.v1.MonsterRsp")
	proto.RegisterType((*MutiSystemRsp)(nil), "statistic.service.v1.MutiSystemRsp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xbf, 0x4f, 0x23, 0x47,
	0x14, 0xc6, 0xf6, 0xda, 0xc6, 0xe3, 0x90, 0x48, 0x03, 0x84, 0xcd, 0x26, 0xf1, 0x5a, 0x43, 0xa4,
	0x90, 0x10, 0xd6, 0x02, 0xf2, 0x83, 0x58, 0x8a, 0x12, 0x19, 0x37, 0x8e, 0x44, 0x8a, 0xa5, 0x4b,
	0x13, 0x0d, 0xf6, 0xb0, 0x1e, 0xc9, 0xf6, 0x2c, 0xbb, 0xb3, 0x16, 0x74, 0x28, 0x75, 0x8a, 0x48,
	0x69, 0xd2, 0xe4, 0xff, 0xa1, 0x8c, 0x74, 0xfd, 0xea, 0x8e, 0x3b, 0x5d, 0xe1, 0xd2, 0xc5, 0xd5,
	0xa7, 0xf9, 0xb1, 0xec, 0x62, 0xd9, 0x07, 0x9c, 0x74, 0xba, 0xbb, 0x6e, 0xde, 0x9b, 0xf7, 0xbe,
	0xb7, 0xef, 0x9b, 0xef, 0x3d, 0x1b, 0x54, 0xb0, 0x4f, 0x1d, 0x3f, 0x60, 0x9c, 0xc1, 0xb5, 0x90,
	0x63, 0x4e, 0x43, 0x4e, 0xbb, 0x4e, 0x48, 0x82, 0x31, 0xed, 0x12, 0x67, 0xbc, 0x6b, 0xed, 0x78,
	0x94, 0xf7, 0xa3, 0x13, 0xa7, 0xcb, 0x86, 0x0d, 0x8f, 0x79, 0xac, 0x21, 0x83, 0x4f, 0xa2, 0x53,
	0x69, 0x49, 0x43, 0x9e, 0x14, 0x88, 0xf5, 0x99, 0xc7, 0x98, 0x37, 0x20, 0x0d, 0xec, 0xd3, 0x06,
	0x1e, 0x8d, 0x98, 0x80, 0x64, 0xa3, 0x50, 0xdd, 0xa2, 0xe7, 0x06, 0x58, 0x3d, 0x4e, 0xaa, 0x84,
	0xc7, 0x17, 0x21, 0x27, 0x43, 0x97, 0x9c, 0xc1, 0x0e, 0x28, 0x79, 0x78, 0x48, 0x3a, 0x6d, 0x33,
	0x57, 0xcf, 0x6d, 0x15, 0x5b, 0xbb, 0x93, 0xd8, 0x2e, 0x0b, 0xcf, 0x1f, 0xb4, 0x37, 0x8d, 0x6d,
	0x74, 0xca, 0x82, 0x61, 0x13, 0x69, 0x07, 0xaa, 0x8f, 0xf1, 0x80, 0xf6, 0x30, 0x27, 0x4d, 0x14,
	0x90, 0xb3, 0x88, 0x06, 0xa4, 0x87, 0x5c, 0x0d, 0x00, 0x8f, 0x40, 0x19, 0x07, 0x64, 0x84, 0x3b,
	0x6d, 0x33, 0x2f, 0xb1, 0xf6, 0x27, 0xb1, 0xbd, 0x2c, 0x5d, 0x0a, 0x6c, 0x53, 0x81, 0x25, 0x9e,
	0xf9, 0x68, 0x09, 0x06, 0xfc, 0x0e, 0x94, 0x02, 0xc6, 0x86, 0x9d, 0xb6, 0x59, 0x90, 0x68, 0x9f,
	0x8b, 0x2f, 0x13, 0x1e, 0x05, 0xf6, 0xa1, 0x02, 0xd3, 0x0e, 0xe4, 0xea, 0x60, 0xc8, 0x40, 0x39,
	0x94, 0xdd, 0x85, 0xa6, 0x51, 0x2f, 0x6c, 0x55, 0xf7, 0xbe, 0x77, 0xe6, 0xb1, 0xeb, 0xcc, 0x21,
	0xc3, 0x51, 0xa7, 0x36, 0xe1, 0x98, 0x0e, 0x54, 0x3d, 0x0d, 0x95, 0xd6, 0xd3, 0x0e, 0xe4, 0x26,
	0x57, 0xd6, 0x5f, 0x79, 0xf0, 0x41, 0x36, 0x11, 0x1e, 0x80, 0x3c, 0xed, 0x69, 0x3a, 0xb7, 0x26,
	0xb1, 0x9d, 0x97, 0xdf, 0x5b, 0x53, 0xf9, 0xa2, 0xed, 0xb9, 0x7d, 0xe7, 0x69, 0x0f, 0xfe, 0x02,
	0x8c, 0x11, 0x1e, 0x12, 0x49, 0x5f, 0xa5, 0xf5, 0xcd, 0x24, 0xb6, 0xa5, 0x3d, 0x8d, 0xed, 0xba,
	0xca, 0x16, 0xd6, 0x82, 0x7c, 0x19, 0x09, 0x7f, 0x06, 0x46, 0x97, 0x85, 0x5c, 0x52, 0x56, 0x68,
	0x6d, 0x0b, 0x04, 0x61, 0x4f, 0x63, 0xdb, 0x56, 0x08, 0xc2, 0x9a, 0x4f, 0xbc, 0x0c, 0x14, 0x00,
	0x04, 0x07, 0x23, 0xd3, 0x48, 0x01, 0x84, 0x9d, 0x02, 0x08, 0x6b, 0x01, 0x80, 0xbc, 0xba, 0x2c,
	0x81, 0xb5, 0x94, 0xdb, 0x23, 0x36, 0x0a, 0x39, 0x09, 0x84, 0xd2, 0x7e, 0x9d, 0x51, 0xda, 0xde,
	0x6d, 0xa5, 0x6d, 0xce, 0x28, 0xed, 0x95, 0x52, 0xfb, 0x6d, 0x56, 0x6a, 0xdf, 0xce, 0x48, 0xed,
	0x8b, 0x59, 0xa9, 0xbd, 0x11, 0xad, 0x45, 0x60, 0x79, 0xa8, 0x1a, 0x4c, 0xc4, 0x76, 0x70, 0x97,
	0xd8, 0x52, 0x42, 0x1c, 0x7d, 0xd4, 0x72, 0xb3, 0x45, 0x07, 0x09, 0xda, 0x34, 0xb6, 0x3f, 0x52,
	0x35, 0x13, 0x0f, 0x72, 0x6f, 0x2e, 0xad, 0xff, 0x0a, 0x60, 0xe5, 0x56, 0xf2, 0x5b, 0x95, 0xdc,
	0x97, 0xa0, 0xc0, 0xf1, 0xb9, 0x56, 0xdc, 0xfa, 0x24, 0xb6, 0x85, 0x39, 0x8d, 0x6d, 0xa0, 0xf2,
	0x39, 0x3e, 0x47, 0xae, 0x70, 0xc1, 0x6d, 0x60, 0x78, 0x74, 0x4c, 0xb4, 0xb4, 0x36, 0x44, 0x29,
	0x61, 0x4f, 0x63, 0xbb, 0xaa, 0xdf, 0x9e, 0x8e, 0x09, 0x72, 0xa5, 0x13, 0xfe, 0x00, 0xca, 0x5d,
	0xec, 0xf3, 0x28, 0x20, 0x66, 0x51, 0xc6, 0xcb, 0x27, 0xd1, 0xae, 0xf4, 0x49, 0xb4, 0x03, 0xb9,
	0xc9, 0x95, 0xa8, 0x22, 0x27, 0xa0, 0x94, 0x56, 0xd1, 0x13, 0x50, 0xcd, 0x4c, 0x80, 0x56, 0xfb,
	0xb6, 0x56, 0x7b, 0x39, 0x0d, 0xd6, 0x6a, 0xaf, 0x66, 0xd4, 0xae, 0x94, 0x2d, 0x1a, 0xed, 0x53,
	0x6e, 0x2e, 0xa7, 0x8d, 0xf6, 0x29, 0x4f, 0x1b, 0xed, 0x53, 0x8e, 0x5c, 0xe1, 0x42, 0x53, 0x03,
	0x6c, 0x64, 0x5e, 0x3c, 0xe2, 0xf4, 0xfd, 0xdb, 0xb7, 0x95, 0xfb, 0xce, 0x40, 0x38, 0xbb, 0x6f,
	0x9b, 0x77, 0x8e, 0x40, 0x96, 0x90, 0xd7, 0xdb, 0xb9, 0x7f, 0xbf, 0x4b, 0x3b, 0xf7, 0x10, 0x14,
	0xc7, 0x78, 0x10, 0x11, 0x3d, 0x02, 0x3b, 0x93, 0xd8, 0x56, 0x8e, 0x14, 0x43, 0x9a, 0xf3, 0xf9,
	0x57, 0xa1, 0x62, 0xef, 0xf2, 0x0b, 0x5f, 0x0d, 0x47, 0x51, 0xed, 0x5d, 0x61, 0xa7, 0x7b, 0x57,
	0x58, 0x0b, 0xf6, 0xae, 0xbc, 0xfa, 0x11, 0x54, 0x34, 0xa9, 0xa1, 0x0f, 0x21, 0x30, 0x0e, 0x59,
	0x8f, 0x28, 0x42, 0x5c, 0x79, 0x86, 0x26, 0x28, 0x1f, 0x91, 0x30, 0xc4, 0x9e, 0xee, 0xd5, 0x4d,
	0x4c, 0xd4, 0x04, 0x20, 0x59, 0x4b, 0x0f, 0xce, 0xfd, 0x09, 0xac, 0x64, 0xde, 0xf3, 0xa1, 0xe9,
	0x7b, 0x2f, 0xf2, 0xa0, 0x72, 0xa3, 0x0c, 0xe8, 0x83, 0x92, 0x02, 0x82, 0x5f, 0xdd, 0xfb, 0x47,
	0xdb, 0xb2, 0x17, 0x84, 0x26, 0x5f, 0x84, 0xac, 0x3f, 0x1f, 0x3d, 0xfb, 0x27, 0xbf, 0x86, 0x60,
	0xe3, 0x26, 0x30, 0x6c, 0x28, 0x25, 0x41, 0x0e, 0xca, 0xba, 0x75, 0xf8, 0xf5, 0xfd, 0x57, 0xb7,
	0x55, 0x9f, 0x1f, 0x9b, 0xb2, 0x88, 0x3e, 0x95, 0x45, 0xd7, 0xd1, 0x6a, 0xb6, 0xa8, 0xde, 0xe0,
	0xf0, 0x32, 0x07, 0x40, 0xca, 0x1a, 0xdc, 0x79, 0xd0, 0xc4, 0x58, 0x9b, 0x0b, 0x8a, 0x67, 0x9f,
	0x01, 0xd5, 0x64, 0x7d, 0x13, 0x7d, 0x7c, 0xab, 0x7e, 0xc4, 0xa9, 0x6a, 0xbc, 0xf5, 0xc9, 0xd5,
	0x93, 0xda, 0xd2, 0xd5, 0x75, 0x2d, 0xf7, 0xff, 0x75, 0x2d, 0xf7, 0xf8, 0xba, 0x96, 0xfb, 0xf7,
	0x69, 0x6d, 0xe9, 0xf7, 0x02, 0xf6, 0xe9, 0x49, 0x49, 0xfe, 0x63, 0xdc, 0x7f, 0x19, 0x00, 0x00,
	0xff, 0xff, 0xc5, 0xd0, 0x09, 0x45, 0xa1, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatisticClient is the client API for Statistic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatisticClient interface {
	System(ctx context.Context, in *StatisticsSystemReq, opts ...grpc.CallOption) (*SystemRsp, error)
	Monster(ctx context.Context, in *StatisticsMonsterReq, opts ...grpc.CallOption) (*MonsterRsp, error)
	MutiSystem(ctx context.Context, in *StatisticsMutiSystemReq, opts ...grpc.CallOption) (*MutiSystemRsp, error)
}

type statisticClient struct {
	cc *grpc.ClientConn
}

func NewStatisticClient(cc *grpc.ClientConn) StatisticClient {
	return &statisticClient{cc}
}

func (c *statisticClient) System(ctx context.Context, in *StatisticsSystemReq, opts ...grpc.CallOption) (*SystemRsp, error) {
	out := new(SystemRsp)
	err := c.cc.Invoke(ctx, "/statistic.service.v1.Statistic/System", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticClient) Monster(ctx context.Context, in *StatisticsMonsterReq, opts ...grpc.CallOption) (*MonsterRsp, error) {
	out := new(MonsterRsp)
	err := c.cc.Invoke(ctx, "/statistic.service.v1.Statistic/Monster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticClient) MutiSystem(ctx context.Context, in *StatisticsMutiSystemReq, opts ...grpc.CallOption) (*MutiSystemRsp, error) {
	out := new(MutiSystemRsp)
	err := c.cc.Invoke(ctx, "/statistic.service.v1.Statistic/MutiSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticServer is the server API for Statistic service.
type StatisticServer interface {
	System(context.Context, *StatisticsSystemReq) (*SystemRsp, error)
	Monster(context.Context, *StatisticsMonsterReq) (*MonsterRsp, error)
	MutiSystem(context.Context, *StatisticsMutiSystemReq) (*MutiSystemRsp, error)
}

func RegisterStatisticServer(s *grpc.Server, srv StatisticServer) {
	s.RegisterService(&_Statistic_serviceDesc, srv)
}

func _Statistic_System_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServer).System(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistic.service.v1.Statistic/System",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServer).System(ctx, req.(*StatisticsSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistic_Monster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsMonsterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServer).Monster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistic.service.v1.Statistic/Monster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServer).Monster(ctx, req.(*StatisticsMonsterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistic_MutiSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsMutiSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServer).MutiSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistic.service.v1.Statistic/MutiSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServer).MutiSystem(ctx, req.(*StatisticsMutiSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Statistic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statistic.service.v1.Statistic",
	HandlerType: (*StatisticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "System",
			Handler:    _Statistic_System_Handler,
		},
		{
			MethodName: "Monster",
			Handler:    _Statistic_Monster_Handler,
		},
		{
			MethodName: "MutiSystem",
			Handler:    _Statistic_MutiSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *StatisticsSystemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsSystemReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
	}
	if m.RoomID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomID))
	}
	if len(m.Systems) > 0 {
		for _, msg := range m.Systems {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatisticsSystemReq_SystemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsSystemReq_SystemDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Cost != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Cost))
	}
	if m.Earn != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Earn))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatisticsMonsterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsMonsterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
	}
	if m.RoomID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomID))
	}
	if len(m.Monsters) > 0 {
		for _, msg := range m.Monsters {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatisticsMonsterReq_MonsterDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsMonsterReq_MonsterDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Tax != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Tax))
	}
	if m.Give != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Give))
	}
	if m.Capture != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Capture))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Cost))
	}
	if m.Earn != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Earn))
	}
	if m.Hit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Hit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatisticsMutiSystemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsMutiSystemReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
	}
	if len(m.RoomID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomID)))
		i += copy(dAtA[i:], m.RoomID)
	}
	if len(m.Systems) > 0 {
		for _, msg := range m.Systems {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatisticsMutiSystemReq_SystemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsMutiSystemReq_SystemDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Value))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MonsterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonsterRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MutiSystemRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutiSystemRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StatisticsSystemReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.RoomID != 0 {
		n += 1 + sovApi(uint64(m.RoomID))
	}
	if len(m.Systems) > 0 {
		for _, e := range m.Systems {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatisticsSystemReq_SystemDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cost != 0 {
		n += 1 + sovApi(uint64(m.Cost))
	}
	if m.Earn != 0 {
		n += 1 + sovApi(uint64(m.Earn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatisticsMonsterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.RoomID != 0 {
		n += 1 + sovApi(uint64(m.RoomID))
	}
	if len(m.Monsters) > 0 {
		for _, e := range m.Monsters {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatisticsMonsterReq_MonsterDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Tax != 0 {
		n += 1 + sovApi(uint64(m.Tax))
	}
	if m.Give != 0 {
		n += 1 + sovApi(uint64(m.Give))
	}
	if m.Capture != 0 {
		n += 1 + sovApi(uint64(m.Capture))
	}
	if m.Cost != 0 {
		n += 1 + sovApi(uint64(m.Cost))
	}
	if m.Earn != 0 {
		n += 1 + sovApi(uint64(m.Earn))
	}
	if m.Hit != 0 {
		n += 1 + sovApi(uint64(m.Hit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatisticsMutiSystemReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Systems) > 0 {
		for _, e := range m.Systems {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatisticsMutiSystemReq_SystemDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovApi(uint64(m.Value))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MonsterRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutiSystemRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatisticsSystemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsSystemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsSystemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Systems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Systems = append(m.Systems, &StatisticsSystemReq_SystemDetail{})
			if err := m.Systems[len(m.Systems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsSystemReq_SystemDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earn", wireType)
			}
			m.Earn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Earn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsMonsterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsMonsterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsMonsterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monsters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monsters = append(m.Monsters, &StatisticsMonsterReq_MonsterDetail{})
			if err := m.Monsters[len(m.Monsters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsMonsterReq_MonsterDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Give", wireType)
			}
			m.Give = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Give |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capture", wireType)
			}
			m.Capture = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capture |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earn", wireType)
			}
			m.Earn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Earn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hit", wireType)
			}
			m.Hit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsMutiSystemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsMutiSystemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsMutiSystemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Systems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Systems = append(m.Systems, &StatisticsMutiSystemReq_SystemDetail{})
			if err := m.Systems[len(m.Systems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsMutiSystemReq_SystemDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonsterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutiSystemRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutiSystemRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutiSystemRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
