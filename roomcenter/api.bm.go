// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathRoomcenterAllocRoom = "/roomcenter/AllocRoom"
var PathRoomcenterPushRoomStatus = "/roomcenter/PushRoomStatus"
var PathRoomcenterPushOnlineStatus = "/roomcenter/PushOnlineStatus"
var PathRoomcenterHeartBeat = "/roomcenter/HeartBeat"
var PathRoomcenterOnUpdateCustomRoomNum = "/roomcenter/OnUpdateCustomRoomNum"
var PathRoomcenterOnGetCustomRoomAddress = "/roomcenter/OnGetCustomRoomAddress"
var PathRoomcenterMultiPlayerAllocRoom = "/roomcenter/MultiPlayerAllocRoom"
var PathRoomcenterQueryArena = "/roomcenter/QueryArena"
var PathRoomcenterAllocCustomRoom = "/roomcenter/AllocCustomRoom"
var PathRoomcenterQueryRoomList = "/roomcenter/QueryRoomList"
var PathRoomcenterQueryArenaNewVersion = "/roomcenter/QueryArenaNewVersion"
var PathRoomcenterUpdateArenaNewVersion = "/roomcenter/UpdateArenaNewVersion"

// RoomcenterBMServer is the server API for Roomcenter service.
type RoomcenterBMServer interface {
	// 客户端获取进入的游戏房间服务器地址
	AllocRoom(ctx context.Context, req *AllocRoomReq) (resp *AllocRoomRsp, err error)

	// 游戏逻辑服上报更新房间人数
	PushRoomStatus(ctx context.Context, req *PushRoomStatusReq) (resp *CommonRsp, err error)

	// 游戏逻辑服上报房间上下线状态（游戏服，启动和关闭时调用）
	PushOnlineStatus(ctx context.Context, req *OnlineStatusReq) (resp *CommonRsp, err error)

	// 游戏逻辑服上报心跳
	HeartBeat(ctx context.Context, req *HeartBeatReq) (resp *CommonRsp, err error)

	// 上报号码
	OnUpdateCustomRoomNum(ctx context.Context, req *UpdateCustomRoomNum) (resp *CommonRsp, err error)

	// 根据号码，获取游戏服务器地址
	OnGetCustomRoomAddress(ctx context.Context, req *GetCustomRoomAddress) (resp *GetCustomRoomAddressResp, err error)

	// 多人分配一个房间
	MultiPlayerAllocRoom(ctx context.Context, req *MultiPlayerAllocRoomReq) (resp *AllocRoomRsp, err error)

	// 查询场列表
	QueryArena(ctx context.Context, req *QueryArenaReq) (resp *QueryArenaRsp, err error)

	// 根据桌子数分配游戏服
	AllocCustomRoom(ctx context.Context, req *AllocRoomReq) (resp *AllocRoomRsp, err error)

	// 查询房间信息
	QueryRoomList(ctx context.Context, req *QueryRoomListReq) (resp *QueryRoomListRsp, err error)

	// 查询场待更新版本
	QueryArenaNewVersion(ctx context.Context, req *QueryArenaNewVersionReq) (resp *QueryArenaNewVersionRsp, err error)

	// 更新场对外
	UpdateArenaNewVersion(ctx context.Context, req *UpdateArenaNewVersionReq) (resp *UpdateArenaNewVersionRsp, err error)
}

var RoomcenterSvc RoomcenterBMServer

func roomcenterAllocRoom(c *bm.Context) {
	p := new(AllocRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.AllocRoom(c, p)
	c.JSON(resp, err)
}

func roomcenterPushRoomStatus(c *bm.Context) {
	p := new(PushRoomStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.PushRoomStatus(c, p)
	c.JSON(resp, err)
}

func roomcenterPushOnlineStatus(c *bm.Context) {
	p := new(OnlineStatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.PushOnlineStatus(c, p)
	c.JSON(resp, err)
}

func roomcenterHeartBeat(c *bm.Context) {
	p := new(HeartBeatReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.HeartBeat(c, p)
	c.JSON(resp, err)
}

func roomcenterOnUpdateCustomRoomNum(c *bm.Context) {
	p := new(UpdateCustomRoomNum)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.OnUpdateCustomRoomNum(c, p)
	c.JSON(resp, err)
}

func roomcenterOnGetCustomRoomAddress(c *bm.Context) {
	p := new(GetCustomRoomAddress)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.OnGetCustomRoomAddress(c, p)
	c.JSON(resp, err)
}

func roomcenterMultiPlayerAllocRoom(c *bm.Context) {
	p := new(MultiPlayerAllocRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.MultiPlayerAllocRoom(c, p)
	c.JSON(resp, err)
}

func roomcenterQueryArena(c *bm.Context) {
	p := new(QueryArenaReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.QueryArena(c, p)
	c.JSON(resp, err)
}

func roomcenterAllocCustomRoom(c *bm.Context) {
	p := new(AllocRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.AllocCustomRoom(c, p)
	c.JSON(resp, err)
}

func roomcenterQueryRoomList(c *bm.Context) {
	p := new(QueryRoomListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.QueryRoomList(c, p)
	c.JSON(resp, err)
}

func roomcenterQueryArenaNewVersion(c *bm.Context) {
	p := new(QueryArenaNewVersionReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.QueryArenaNewVersion(c, p)
	c.JSON(resp, err)
}

func roomcenterUpdateArenaNewVersion(c *bm.Context) {
	p := new(UpdateArenaNewVersionReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := RoomcenterSvc.UpdateArenaNewVersion(c, p)
	c.JSON(resp, err)
}

// RegisterRoomcenterBMServer Register the blademaster route
func RegisterRoomcenterBMServer(e *bm.Engine, server RoomcenterBMServer) {
	RoomcenterSvc = server
	e.POST("/roomcenter/AllocRoom", roomcenterAllocRoom)
	e.POST("/roomcenter/PushRoomStatus", roomcenterPushRoomStatus)
	e.POST("/roomcenter/PushOnlineStatus", roomcenterPushOnlineStatus)
	e.POST("/roomcenter/HeartBeat", roomcenterHeartBeat)
	e.POST("/roomcenter/OnUpdateCustomRoomNum", roomcenterOnUpdateCustomRoomNum)
	e.POST("/roomcenter/OnGetCustomRoomAddress", roomcenterOnGetCustomRoomAddress)
	e.POST("/roomcenter/MultiPlayerAllocRoom", roomcenterMultiPlayerAllocRoom)
	e.POST("/roomcenter/QueryArena", roomcenterQueryArena)
	e.POST("/roomcenter/AllocCustomRoom", roomcenterAllocCustomRoom)
	e.POST("/roomcenter/QueryRoomList", roomcenterQueryRoomList)
	e.POST("/roomcenter/QueryArenaNewVersion", roomcenterQueryArenaNewVersion)
	e.POST("/roomcenter/UpdateArenaNewVersion", roomcenterUpdateArenaNewVersion)
}
