// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MailOpReq_MailOp int32

const (
	MailOpReq_EMailOpRead           MailOpReq_MailOp = 0
	MailOpReq_EMailOpGetReward      MailOpReq_MailOp = 1
	MailOpReq_EMailOpRemove         MailOpReq_MailOp = 2
	MailOpReq_EMailOpDeleteRedPoint MailOpReq_MailOp = 3
)

var MailOpReq_MailOp_name = map[int32]string{
	0: "EMailOpRead",
	1: "EMailOpGetReward",
	2: "EMailOpRemove",
	3: "EMailOpDeleteRedPoint",
}

var MailOpReq_MailOp_value = map[string]int32{
	"EMailOpRead":           0,
	"EMailOpGetReward":      1,
	"EMailOpRemove":         2,
	"EMailOpDeleteRedPoint": 3,
}

func (x MailOpReq_MailOp) String() string {
	return proto.EnumName(MailOpReq_MailOp_name, int32(x))
}

func (MailOpReq_MailOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}

type MailOpReq struct {
	UserDBID             int32    `protobuf:"varint,1,opt,name=UserDBID,proto3" json:"user_dbid" form:"user_dbid" validate:"required"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"game_id" form:"game_id" validate:"required"`
	OpID                 int32    `protobuf:"varint,3,opt,name=OpID,proto3" json:"op_id" form:"op_id"`
	MailIDs              []int32  `protobuf:"varint,4,rep,packed,name=MailIDs,proto3" json:"mail_id" form:"mail_id" validate:"required"`
	PhyID                string   `protobuf:"bytes,5,opt,name=PhyID,proto3" json:"phy_id" form:"phy_id" validate:"required"`
	PlatFormID           int32    `protobuf:"varint,6,opt,name=PlatFormID,proto3" json:"PlatFormID" form:"PlatFormID" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MailOpReq) Reset()         { *m = MailOpReq{} }
func (m *MailOpReq) String() string { return proto.CompactTextString(m) }
func (*MailOpReq) ProtoMessage()    {}
func (*MailOpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *MailOpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailOpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailOpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailOpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailOpReq.Merge(m, src)
}
func (m *MailOpReq) XXX_Size() int {
	return m.Size()
}
func (m *MailOpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MailOpReq.DiscardUnknown(m)
}

var xxx_messageInfo_MailOpReq proto.InternalMessageInfo

type MailOpRsp struct {
	UserDBID             int32    `protobuf:"varint,1,opt,name=UserDBID,proto3" json:"user_dbid" form:"user_dbid" validate:"required"`
	OpID                 int32    `protobuf:"varint,2,opt,name=OpID,proto3" json:"op_id" form:"op_id" validate:"required"`
	Success              int32    `protobuf:"varint,3,opt,name=Success,proto3" json:"success" form:"success" validate:"required"`
	Message              string   `protobuf:"bytes,4,opt,name=Message,proto3" json:"message" form:"message" validate:"required"`
	MailIDs              []int32  `protobuf:"varint,5,rep,packed,name=MailIDs,proto3" json:"mail_id" form:"mail_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MailOpRsp) Reset()         { *m = MailOpRsp{} }
func (m *MailOpRsp) String() string { return proto.CompactTextString(m) }
func (*MailOpRsp) ProtoMessage()    {}
func (*MailOpRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *MailOpRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailOpRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailOpRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailOpRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailOpRsp.Merge(m, src)
}
func (m *MailOpRsp) XXX_Size() int {
	return m.Size()
}
func (m *MailOpRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MailOpRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MailOpRsp proto.InternalMessageInfo

// 邮件道具
type MailRewardInfo struct {
	Type                 int32    `protobuf:"varint,1,opt,name=Type,proto3" json:"nType" form:"nType" validate:"required"`
	Amount               int32    `protobuf:"varint,2,opt,name=Amount,proto3" json:"nAmount" form:"nAmount" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MailRewardInfo) Reset()         { *m = MailRewardInfo{} }
func (m *MailRewardInfo) String() string { return proto.CompactTextString(m) }
func (*MailRewardInfo) ProtoMessage()    {}
func (*MailRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *MailRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailRewardInfo.Merge(m, src)
}
func (m *MailRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *MailRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MailRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MailRewardInfo proto.InternalMessageInfo

// 邮件结构体
type MailInfo struct {
	MailID               int32             `protobuf:"varint,1,opt,name=MailID,proto3" json:"nMailID" form:"nMailID" validate:"required"`
	MailTitle            string            `protobuf:"bytes,2,opt,name=MailTitle,proto3" json:"strMailTitle" form:"strMailTitle" validate:"required"`
	WriteTime            int64             `protobuf:"varint,3,opt,name=WriteTime,proto3" json:"tWriteTime" form:"tWriteTime" validate:"required"`
	ExpireTime           int64             `protobuf:"varint,4,opt,name=ExpireTime,proto3" json:"tExpireTime" form:"tExpireTime" validate:"required"`
	IsRead               bool              `protobuf:"varint,5,opt,name=IsRead,proto3" json:"bIsRead" form:"bIsRead" validate:"required"`
	IsReward             bool              `protobuf:"varint,6,opt,name=IsReward,proto3" json:"bIsReward" form:"bIsReward" validate:"required"`
	Content              string            `protobuf:"bytes,7,opt,name=Content,proto3" json:"strContent" form:"strContent" validate:"required"`
	GameID               int32             `protobuf:"varint,8,opt,name=GameID,proto3" json:"GameID" form:"GameID" validate:"required"`
	Rid                  int32             `protobuf:"varint,9,opt,name=Rid,proto3" json:"nRid" form:"nRid" validate:"required"`
	IsRedPoint           bool              `protobuf:"varint,10,opt,name=IsRedPoint,proto3" json:"bIsRedPoint" form:"bIsRedPoint" validate:"required"`
	MailRewardList       []*MailRewardInfo `protobuf:"bytes,11,rep,name=MailRewardList,proto3" json:"vecMailRewardInfos" form:"vecMailRewardInfos" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MailInfo) Reset()         { *m = MailInfo{} }
func (m *MailInfo) String() string { return proto.CompactTextString(m) }
func (*MailInfo) ProtoMessage()    {}
func (*MailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *MailInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailInfo.Merge(m, src)
}
func (m *MailInfo) XXX_Size() int {
	return m.Size()
}
func (m *MailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MailInfo proto.InternalMessageInfo

// 邮件
type PublishMailReq struct {
	Title                string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Sender               string   `protobuf:"bytes,3,opt,name=Sender,proto3" json:"Sender,omitempty"`
	GameID               int32    `protobuf:"varint,4,opt,name=GameID,proto3" json:"GameID,omitempty"`
	StartTime            string   `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              string   `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	SendType             int32    `protobuf:"varint,7,opt,name=SendType,proto3" json:"SendType,omitempty"`
	UserIDS              string   `protobuf:"bytes,8,opt,name=UserIDS,proto3" json:"UserIDS,omitempty"`
	RewordInfo           string   `protobuf:"bytes,9,opt,name=RewordInfo,proto3" json:"RewordInfo,omitempty"`
	GamePlatFormID       int32    `protobuf:"varint,10,opt,name=GamePlatFormID,proto3" json:"GamePlatFormID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishMailReq) Reset()         { *m = PublishMailReq{} }
func (m *PublishMailReq) String() string { return proto.CompactTextString(m) }
func (*PublishMailReq) ProtoMessage()    {}
func (*PublishMailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *PublishMailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishMailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishMailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishMailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishMailReq.Merge(m, src)
}
func (m *PublishMailReq) XXX_Size() int {
	return m.Size()
}
func (m *PublishMailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishMailReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishMailReq proto.InternalMessageInfo

type PublishMailRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MsgID                int32    `protobuf:"varint,3,opt,name=msgID,proto3" json:"msgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishMailRsp) Reset()         { *m = PublishMailRsp{} }
func (m *PublishMailRsp) String() string { return proto.CompactTextString(m) }
func (*PublishMailRsp) ProtoMessage()    {}
func (*PublishMailRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *PublishMailRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishMailRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishMailRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishMailRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishMailRsp.Merge(m, src)
}
func (m *PublishMailRsp) XXX_Size() int {
	return m.Size()
}
func (m *PublishMailRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishMailRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PublishMailRsp proto.InternalMessageInfo

// 添加邮件
type AddMailInfoReq struct {
	Title                string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Users                string   `protobuf:"bytes,3,opt,name=Users,proto3" json:"Users,omitempty"`
	Reward               string   `protobuf:"bytes,4,opt,name=Reward,proto3" json:"Reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMailInfoReq) Reset()         { *m = AddMailInfoReq{} }
func (m *AddMailInfoReq) String() string { return proto.CompactTextString(m) }
func (*AddMailInfoReq) ProtoMessage()    {}
func (*AddMailInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *AddMailInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMailInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMailInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMailInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMailInfoReq.Merge(m, src)
}
func (m *AddMailInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *AddMailInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMailInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMailInfoReq proto.InternalMessageInfo

type AddMailInfoRsp struct {
	MailID               int32    `protobuf:"varint,1,opt,name=MailID,proto3" json:"MailID,omitempty"`
	Users                string   `protobuf:"bytes,2,opt,name=Users,proto3" json:"Users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMailInfoRsp) Reset()         { *m = AddMailInfoRsp{} }
func (m *AddMailInfoRsp) String() string { return proto.CompactTextString(m) }
func (*AddMailInfoRsp) ProtoMessage()    {}
func (*AddMailInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *AddMailInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMailInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMailInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMailInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMailInfoRsp.Merge(m, src)
}
func (m *AddMailInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddMailInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMailInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddMailInfoRsp proto.InternalMessageInfo

// 发送邮件
type SendMailInfoReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMailInfoReq) Reset()         { *m = SendMailInfoReq{} }
func (m *SendMailInfoReq) String() string { return proto.CompactTextString(m) }
func (*SendMailInfoReq) ProtoMessage()    {}
func (*SendMailInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *SendMailInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMailInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMailInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMailInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailInfoReq.Merge(m, src)
}
func (m *SendMailInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *SendMailInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailInfoReq proto.InternalMessageInfo

type SendMailInfoRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMailInfoRsp) Reset()         { *m = SendMailInfoRsp{} }
func (m *SendMailInfoRsp) String() string { return proto.CompactTextString(m) }
func (*SendMailInfoRsp) ProtoMessage()    {}
func (*SendMailInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *SendMailInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMailInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMailInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMailInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailInfoRsp.Merge(m, src)
}
func (m *SendMailInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *SendMailInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailInfoRsp proto.InternalMessageInfo

// 获取邮件信息
type GetMailInfoReq struct {
	UserID               int64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PlatFormID           int32    `protobuf:"varint,2,opt,name=PlatFormID,proto3" json:"PlatFormID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMailInfoReq) Reset()         { *m = GetMailInfoReq{} }
func (m *GetMailInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetMailInfoReq) ProtoMessage()    {}
func (*GetMailInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *GetMailInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMailInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMailInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMailInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMailInfoReq.Merge(m, src)
}
func (m *GetMailInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMailInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMailInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMailInfoReq proto.InternalMessageInfo

type GetMailInfoResp struct {
	MailInfo             []*MailInfo `protobuf:"bytes,1,rep,name=mailInfo,proto3" json:"mailInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetMailInfoResp) Reset()         { *m = GetMailInfoResp{} }
func (m *GetMailInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetMailInfoResp) ProtoMessage()    {}
func (*GetMailInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *GetMailInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMailInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMailInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMailInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMailInfoResp.Merge(m, src)
}
func (m *GetMailInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMailInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMailInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMailInfoResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("hallemail.service.v1.MailOpReq_MailOp", MailOpReq_MailOp_name, MailOpReq_MailOp_value)
	proto.RegisterType((*MailOpReq)(nil), "hallemail.service.v1.MailOpReq")
	proto.RegisterType((*MailOpRsp)(nil), "hallemail.service.v1.MailOpRsp")
	proto.RegisterType((*MailRewardInfo)(nil), "hallemail.service.v1.MailRewardInfo")
	proto.RegisterType((*MailInfo)(nil), "hallemail.service.v1.MailInfo")
	proto.RegisterType((*PublishMailReq)(nil), "hallemail.service.v1.PublishMailReq")
	proto.RegisterType((*PublishMailRsp)(nil), "hallemail.service.v1.PublishMailRsp")
	proto.RegisterType((*AddMailInfoReq)(nil), "hallemail.service.v1.AddMailInfoReq")
	proto.RegisterType((*AddMailInfoRsp)(nil), "hallemail.service.v1.AddMailInfoRsp")
	proto.RegisterType((*SendMailInfoReq)(nil), "hallemail.service.v1.SendMailInfoReq")
	proto.RegisterType((*SendMailInfoRsp)(nil), "hallemail.service.v1.SendMailInfoRsp")
	proto.RegisterType((*GetMailInfoReq)(nil), "hallemail.service.v1.GetMailInfoReq")
	proto.RegisterType((*GetMailInfoResp)(nil), "hallemail.service.v1.GetMailInfoResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xae, 0xe3, 0xbf, 0x3b, 0x69, 0xdd, 0x74, 0x94, 0xa6, 0x1b, 0xb7, 0xf5, 0xfa, 0xb7, 0xbf,
	0xb6, 0x54, 0x42, 0xb1, 0xd5, 0x22, 0x40, 0x04, 0x81, 0x14, 0xe3, 0x10, 0x2c, 0xa8, 0x92, 0x6e,
	0x52, 0x55, 0x45, 0x42, 0xd5, 0xda, 0x3b, 0x71, 0x56, 0xf2, 0xfe, 0xc9, 0xce, 0x3a, 0x25, 0x70,
	0x40, 0xe2, 0xc4, 0x1d, 0x21, 0x71, 0xe2, 0x84, 0xf8, 0x06, 0x7c, 0x87, 0x9e, 0x10, 0x12, 0xf7,
	0x15, 0x04, 0x4e, 0x3e, 0xe6, 0x13, 0xa0, 0x79, 0x67, 0xbc, 0x33, 0x9b, 0x78, 0xab, 0x08, 0xc4,
	0xcd, 0xef, 0x33, 0xef, 0x3e, 0xef, 0xec, 0xfb, 0x3c, 0xef, 0xec, 0x18, 0x69, 0x76, 0xe8, 0xb6,
	0xc3, 0x28, 0x88, 0x03, 0xbc, 0x7c, 0x60, 0x8f, 0xc7, 0xc4, 0xb3, 0xdd, 0x71, 0x9b, 0x92, 0xe8,
	0xc8, 0x1d, 0x92, 0xf6, 0xd1, 0x83, 0xc6, 0xda, 0xc8, 0x8d, 0x0f, 0x26, 0x83, 0xf6, 0x30, 0xf0,
	0x3a, 0xa3, 0x60, 0x14, 0x74, 0x20, 0x79, 0x30, 0xd9, 0x87, 0x08, 0x02, 0xf8, 0xc5, 0x49, 0x1a,
	0x37, 0x47, 0x41, 0x30, 0x1a, 0x13, 0x99, 0x45, 0xbc, 0x30, 0x3e, 0x16, 0x8b, 0xb7, 0xc4, 0xa2,
	0x1d, 0xba, 0x1d, 0xdb, 0xf7, 0x83, 0xd8, 0x8e, 0xdd, 0xc0, 0xa7, 0x7c, 0xd5, 0xfc, 0xb1, 0x84,
	0xb4, 0x47, 0xb6, 0x3b, 0xde, 0x0e, 0x2d, 0x72, 0x88, 0x1f, 0xa3, 0xda, 0x13, 0x4a, 0xa2, 0x5e,
	0xb7, 0xdf, 0xd3, 0x0b, 0xad, 0xc2, 0xfd, 0x72, 0xf7, 0xcd, 0x69, 0x62, 0x68, 0x13, 0x4a, 0xa2,
	0xe7, 0xce, 0xc0, 0x75, 0x4e, 0x13, 0xe3, 0xce, 0x7e, 0x10, 0x79, 0xeb, 0x66, 0x0a, 0x99, 0xad,
	0x23, 0x7b, 0xec, 0x3a, 0x76, 0x4c, 0xd6, 0xcd, 0x88, 0x1c, 0x4e, 0xdc, 0x88, 0x38, 0xa6, 0x95,
	0xd2, 0xe0, 0x3e, 0xaa, 0x6c, 0xd9, 0x1e, 0xe9, 0xf7, 0xf4, 0x05, 0x20, 0x7c, 0x30, 0x4d, 0x8c,
	0xea, 0xc8, 0xf6, 0xc8, 0x73, 0xa0, 0x33, 0x39, 0x9d, 0x00, 0xe6, 0x93, 0x09, 0x02, 0xbc, 0x86,
	0x4a, 0xdb, 0x61, 0xbf, 0xa7, 0x17, 0x81, 0x68, 0x75, 0x9a, 0x18, 0xe5, 0x20, 0xe4, 0x34, 0x97,
	0x39, 0x0d, 0x84, 0xa6, 0x05, 0x69, 0xf8, 0x63, 0x54, 0x65, 0x6f, 0xd6, 0xef, 0x51, 0xbd, 0xd4,
	0x2a, 0xce, 0x4a, 0xb3, 0x56, 0x67, 0x4a, 0x0b, 0x60, 0x7e, 0xe9, 0x19, 0x03, 0xde, 0x44, 0xe5,
	0x9d, 0x83, 0xe3, 0x7e, 0x4f, 0x2f, 0xb7, 0x0a, 0xf7, 0xb5, 0x6e, 0x67, 0x9a, 0x18, 0x95, 0xf0,
	0xe0, 0x98, 0x33, 0xfd, 0x8f, 0x33, 0xf1, 0x78, 0x3e, 0x11, 0x7f, 0x1a, 0x3f, 0x45, 0x68, 0x67,
	0x6c, 0xc7, 0x1f, 0x06, 0x91, 0xd7, 0xef, 0xe9, 0x15, 0x78, 0x91, 0xb7, 0xa7, 0x89, 0xa1, 0xa0,
	0xa7, 0x89, 0x71, 0x97, 0xf3, 0x49, 0x6c, 0x3e, 0xa7, 0xf2, 0x90, 0xf9, 0x19, 0xaa, 0x70, 0x19,
	0xf1, 0x55, 0xb4, 0xb8, 0x39, 0x53, 0xd4, 0x76, 0x96, 0x2e, 0xe1, 0x65, 0xb4, 0x24, 0x80, 0x2d,
	0x12, 0x5b, 0xe4, 0x85, 0x1d, 0x39, 0x4b, 0x05, 0x7c, 0x0d, 0x5d, 0x49, 0xd3, 0xbc, 0xe0, 0x88,
	0x2c, 0x2d, 0xe0, 0x55, 0x74, 0x5d, 0x40, 0x3d, 0x32, 0x26, 0x31, 0xb1, 0x88, 0xb3, 0x13, 0xb8,
	0x7e, 0xbc, 0x54, 0x34, 0xbf, 0x29, 0xa6, 0x36, 0xa1, 0xe1, 0x7f, 0x61, 0x93, 0x0d, 0xa1, 0x2d,
	0x37, 0xc9, 0x9a, 0xaa, 0x6d, 0x4b, 0xd5, 0x76, 0x2e, 0x4d, 0xaa, 0xf7, 0xee, 0x64, 0x38, 0x24,
	0x94, 0x0a, 0x87, 0x80, 0xde, 0x94, 0x43, 0x52, 0x6f, 0x01, 0xe4, 0xe8, 0x2d, 0x18, 0xc0, 0x3c,
	0x84, 0x52, 0x7b, 0x44, 0xf4, 0x12, 0x28, 0xce, 0xcd, 0xc3, 0x21, 0xc5, 0x3c, 0x1c, 0xc8, 0x33,
	0x0f, 0x5f, 0x55, 0x9d, 0x58, 0xfe, 0xb7, 0x4e, 0x34, 0x7f, 0x28, 0xa0, 0x3a, 0xfb, 0xcd, 0x95,
	0xec, 0xfb, 0xfb, 0x01, 0x6b, 0xde, 0xde, 0x71, 0x48, 0x84, 0x16, 0xd0, 0x3c, 0x9f, 0x01, 0xb2,
	0x79, 0x10, 0xe6, 0x34, 0x8f, 0x2d, 0xb1, 0x31, 0xdd, 0xf0, 0x82, 0x89, 0x1f, 0xab, 0x63, 0xea,
	0x73, 0x48, 0xee, 0x50, 0x00, 0x39, 0x63, 0x2a, 0x16, 0x7f, 0xa9, 0xa2, 0x1a, 0x6c, 0x96, 0x6d,
	0xad, 0xcf, 0x7d, 0x99, 0x1a, 0x85, 0xf3, 0x72, 0x48, 0xe1, 0xe5, 0x40, 0x0e, 0x2f, 0x5f, 0xc4,
	0xcf, 0xb8, 0x05, 0xf7, 0xdc, 0x78, 0x4c, 0x60, 0x97, 0x5a, 0xf7, 0xdd, 0x69, 0x62, 0x5c, 0xa6,
	0x71, 0x94, 0xe2, 0xa7, 0x89, 0xf1, 0x9a, 0x90, 0x59, 0x41, 0xe7, 0xf3, 0x4a, 0x36, 0xfc, 0x04,
	0x69, 0x4f, 0x23, 0x37, 0x26, 0x7b, 0xae, 0x47, 0xc0, 0x3c, 0x45, 0x3e, 0x95, 0x71, 0x8a, 0xca,
	0xa9, 0x94, 0x58, 0x0e, 0x6d, 0xba, 0x8e, 0x9f, 0x21, 0xb4, 0xf9, 0x79, 0xe8, 0x46, 0x9c, 0xb7,
	0x04, 0xbc, 0xef, 0x4c, 0x13, 0x63, 0x31, 0x96, 0xf0, 0x69, 0x62, 0xdc, 0x13, 0xc4, 0x12, 0xcc,
	0x99, 0x77, 0x99, 0xc0, 0xfa, 0xda, 0xa7, 0x6c, 0xc0, 0xe1, 0x40, 0xaa, 0xf1, 0xbe, 0x0e, 0x38,
	0x24, 0xfb, 0x2a, 0x80, 0x9c, 0xbe, 0xf2, 0x45, 0x36, 0xcd, 0xec, 0x17, 0x73, 0x13, 0x9c, 0x48,
	0x35, 0x3e, 0xcd, 0x83, 0x19, 0x28, 0xa7, 0x39, 0x85, 0x72, 0xa6, 0x79, 0xb6, 0x8c, 0x1f, 0xa3,
	0xea, 0x07, 0x81, 0x1f, 0x13, 0x3f, 0xd6, 0xab, 0x20, 0x14, 0x74, 0x93, 0xc6, 0x91, 0x40, 0x65,
	0x37, 0x25, 0x96, 0x63, 0x7b, 0xb1, 0x8a, 0xb7, 0xd2, 0xef, 0x48, 0x0d, 0x8c, 0x04, 0x27, 0x30,
	0x47, 0xe4, 0x09, 0xcc, 0xe3, 0x57, 0x7f, 0x45, 0xde, 0x43, 0x45, 0xcb, 0x75, 0x74, 0x0d, 0x58,
	0x5e, 0x9f, 0x26, 0x46, 0xc9, 0xb7, 0x60, 0x0a, 0x0d, 0xe1, 0x45, 0x2b, 0x6f, 0x04, 0xd9, 0x73,
	0x4c, 0x53, 0xf6, 0x9a, 0xfc, 0x64, 0xd4, 0x11, 0xf4, 0x0b, 0x34, 0x1d, 0x48, 0x58, 0x6a, 0xaa,
	0x80, 0x39, 0x9a, 0xca, 0x04, 0xfc, 0x5d, 0x66, 0xb2, 0x3f, 0x71, 0x69, 0xac, 0x2f, 0xb6, 0x8a,
	0xf7, 0x17, 0x1f, 0xde, 0x69, 0xcf, 0xbb, 0x25, 0xb4, 0xb3, 0xa7, 0x40, 0x77, 0x6b, 0x9a, 0x18,
	0xf8, 0x88, 0x0c, 0xb3, 0x30, 0x3b, 0xf9, 0xd6, 0xf8, 0x66, 0xce, 0xaf, 0xcd, 0xdf, 0xd3, 0x99,
	0x4d, 0x98, 0x3f, 0x2d, 0xa0, 0xfa, 0xce, 0x64, 0x30, 0x76, 0xe9, 0x01, 0x5f, 0x39, 0xc4, 0xcb,
	0xa8, 0xcc, 0xe7, 0x90, 0x4d, 0xb5, 0x66, 0xf1, 0x00, 0xeb, 0x52, 0x76, 0x98, 0x4f, 0xa9, 0xde,
	0x0a, 0xaa, 0xec, 0x12, 0xdf, 0x21, 0x11, 0x4c, 0x97, 0x66, 0x89, 0x88, 0xe1, 0x42, 0x55, 0x36,
	0x1d, 0xe5, 0x54, 0xa4, 0x5b, 0x48, 0xdb, 0x8d, 0xed, 0x28, 0x86, 0xc1, 0x81, 0x4f, 0xae, 0x25,
	0x01, 0x56, 0x67, 0xd3, 0x77, 0x60, 0xad, 0xc2, 0xeb, 0x88, 0x10, 0x37, 0x50, 0x8d, 0x31, 0xc3,
	0x69, 0x58, 0x05, 0xc6, 0x34, 0x66, 0x4f, 0xb1, 0xcf, 0x4d, 0xbf, 0xb7, 0x0b, 0x16, 0xd2, 0xac,
	0x59, 0x88, 0x9b, 0x08, 0x59, 0xe4, 0x45, 0xc0, 0x9b, 0x02, 0xce, 0xd0, 0x2c, 0x05, 0xc1, 0xf7,
	0x50, 0x9d, 0xed, 0x4b, 0xf9, 0x72, 0x23, 0xe0, 0x3e, 0x83, 0x9a, 0x7b, 0xd9, 0x3e, 0xd1, 0x10,
	0x63, 0x54, 0x1a, 0x06, 0x8e, 0x38, 0x99, 0x2d, 0xf8, 0xcd, 0xf6, 0x21, 0x3e, 0x1b, 0xb3, 0x2e,
	0x89, 0x90, 0x75, 0xd5, 0xa3, 0xa3, 0xd9, 0x0d, 0xc7, 0xe2, 0x81, 0xe9, 0xa3, 0xfa, 0x86, 0xe3,
	0xcc, 0x4e, 0xd4, 0x7f, 0xd2, 0xfd, 0x65, 0x54, 0x66, 0xaf, 0x4a, 0x45, 0xf3, 0x79, 0xc0, 0x7a,
	0x2f, 0xa6, 0xbe, 0xc4, 0x35, 0x11, 0xb3, 0xfd, 0x7e, 0xb6, 0x1e, 0x0d, 0x59, 0xa6, 0x7a, 0x88,
	0xa7, 0x27, 0x72, 0xca, 0xbb, 0xa0, 0xf0, 0x9a, 0xd7, 0xd0, 0x55, 0xd6, 0x73, 0x65, 0xc3, 0xe7,
	0x20, 0x1a, 0x9a, 0x1f, 0xa1, 0xfa, 0x16, 0x89, 0xd5, 0xb7, 0x5a, 0x41, 0x15, 0x2e, 0x08, 0x54,
	0x29, 0x5a, 0x22, 0x62, 0xea, 0x28, 0x9d, 0x87, 0xcf, 0x53, 0xe6, 0xea, 0xf3, 0x08, 0x5d, 0xcd,
	0x30, 0xd1, 0x10, 0xaf, 0xa3, 0x9a, 0x27, 0x62, 0xbd, 0x00, 0x23, 0xd4, 0xcc, 0x1f, 0x21, 0x78,
	0x2a, 0xcd, 0x7f, 0xf8, 0x73, 0x19, 0x69, 0x69, 0x2e, 0x7e, 0x0b, 0x95, 0x76, 0x5c, 0x7f, 0x84,
	0x57, 0xda, 0xfc, 0x1a, 0xdd, 0x9e, 0xdd, 0xb1, 0xdb, 0x9b, 0xec, 0x8e, 0xdd, 0xc8, 0xc1, 0xf1,
	0x97, 0xe8, 0xca, 0xb6, 0xaf, 0x98, 0x01, 0xe7, 0xcc, 0x70, 0x76, 0xae, 0x1a, 0x17, 0xc8, 0xa2,
	0xa1, 0xd9, 0xfc, 0xfa, 0xb7, 0xbf, 0xbe, 0x5d, 0xd0, 0xcd, 0x95, 0x4e, 0x9a, 0xdd, 0x51, 0x6b,
	0x41, 0x71, 0x45, 0xc3, 0xbc, 0xe2, 0x59, 0x5b, 0x35, 0x2e, 0x90, 0x95, 0x53, 0x5c, 0xad, 0xf5,
	0x15, 0xaa, 0x6f, 0xfb, 0xaa, 0xda, 0xf8, 0xee, 0x7c, 0xde, 0x33, 0x26, 0x69, 0x5c, 0x24, 0x8d,
	0x86, 0xa6, 0x01, 0xf5, 0x57, 0xcd, 0x1b, 0x4a, 0xfd, 0x4c, 0xb9, 0x63, 0xb4, 0xa8, 0xf8, 0x21,
	0xef, 0xdd, 0xb3, 0xe6, 0xcb, 0x2b, 0x7e, 0xc6, 0x58, 0xe6, 0x6d, 0x28, 0x7e, 0xc3, 0xbc, 0x2e,
	0x6b, 0xab, 0xb5, 0xbe, 0x40, 0xd7, 0x98, 0x69, 0xf9, 0x4d, 0x99, 0x44, 0xf0, 0x4f, 0x0b, 0x1b,
	0xf9, 0xd6, 0x83, 0x7f, 0x5d, 0x8d, 0x57, 0x27, 0xd0, 0xd0, 0xfc, 0x3f, 0x54, 0xbd, 0x6d, 0xde,
	0x94, 0x55, 0xcf, 0x95, 0xe9, 0xae, 0xbe, 0xfc, 0xa3, 0x79, 0xe9, 0xe5, 0x49, 0xb3, 0xf0, 0xeb,
	0x49, 0xb3, 0xf0, 0xfb, 0x49, 0xb3, 0xf0, 0xfd, 0x9f, 0xcd, 0x4b, 0x9f, 0x16, 0xed, 0xd0, 0x1d,
	0x54, 0xc0, 0x9c, 0x6f, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xab, 0x58, 0x79, 0x84, 0x78, 0x0e,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HallemailClient is the client API for Hallemail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HallemailClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// 服务器更新并发送邮件
	OnPublishMail(ctx context.Context, in *PublishMailReq, opts ...grpc.CallOption) (*PublishMailRsp, error)
	// 添加基础邮件
	OnAddMailInfo(ctx context.Context, in *AddMailInfoReq, opts ...grpc.CallOption) (*AddMailInfoRsp, error)
	// 发送邮件(发送添加的基础邮件给到指定的用户)
	OnSendMailInfo(ctx context.Context, in *SendMailInfoReq, opts ...grpc.CallOption) (*SendMailInfoRsp, error)
	// 获取邮件信息(客户端请求)
	GetMailInfo(ctx context.Context, in *GetMailInfoReq, opts ...grpc.CallOption) (*GetMailInfoResp, error)
	// 用户邮件操作(0.read 1.getreward 2.remove 3.deleteRedPoint)
	UserMailOperation(ctx context.Context, in *MailOpReq, opts ...grpc.CallOption) (*MailOpRsp, error)
}

type hallemailClient struct {
	cc *grpc.ClientConn
}

func NewHallemailClient(cc *grpc.ClientConn) HallemailClient {
	return &hallemailClient{cc}
}

func (c *hallemailClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/hallemail.service.v1.hallemail/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallemailClient) OnPublishMail(ctx context.Context, in *PublishMailReq, opts ...grpc.CallOption) (*PublishMailRsp, error) {
	out := new(PublishMailRsp)
	err := c.cc.Invoke(ctx, "/hallemail.service.v1.hallemail/OnPublishMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallemailClient) OnAddMailInfo(ctx context.Context, in *AddMailInfoReq, opts ...grpc.CallOption) (*AddMailInfoRsp, error) {
	out := new(AddMailInfoRsp)
	err := c.cc.Invoke(ctx, "/hallemail.service.v1.hallemail/OnAddMailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallemailClient) OnSendMailInfo(ctx context.Context, in *SendMailInfoReq, opts ...grpc.CallOption) (*SendMailInfoRsp, error) {
	out := new(SendMailInfoRsp)
	err := c.cc.Invoke(ctx, "/hallemail.service.v1.hallemail/OnSendMailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallemailClient) GetMailInfo(ctx context.Context, in *GetMailInfoReq, opts ...grpc.CallOption) (*GetMailInfoResp, error) {
	out := new(GetMailInfoResp)
	err := c.cc.Invoke(ctx, "/hallemail.service.v1.hallemail/GetMailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallemailClient) UserMailOperation(ctx context.Context, in *MailOpReq, opts ...grpc.CallOption) (*MailOpRsp, error) {
	out := new(MailOpRsp)
	err := c.cc.Invoke(ctx, "/hallemail.service.v1.hallemail/UserMailOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HallemailServer is the server API for Hallemail service.
type HallemailServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// 服务器更新并发送邮件
	OnPublishMail(context.Context, *PublishMailReq) (*PublishMailRsp, error)
	// 添加基础邮件
	OnAddMailInfo(context.Context, *AddMailInfoReq) (*AddMailInfoRsp, error)
	// 发送邮件(发送添加的基础邮件给到指定的用户)
	OnSendMailInfo(context.Context, *SendMailInfoReq) (*SendMailInfoRsp, error)
	// 获取邮件信息(客户端请求)
	GetMailInfo(context.Context, *GetMailInfoReq) (*GetMailInfoResp, error)
	// 用户邮件操作(0.read 1.getreward 2.remove 3.deleteRedPoint)
	UserMailOperation(context.Context, *MailOpReq) (*MailOpRsp, error)
}

// UnimplementedHallemailServer can be embedded to have forward compatible implementations.
type UnimplementedHallemailServer struct {
}

func (*UnimplementedHallemailServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedHallemailServer) OnPublishMail(ctx context.Context, req *PublishMailReq) (*PublishMailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPublishMail not implemented")
}
func (*UnimplementedHallemailServer) OnAddMailInfo(ctx context.Context, req *AddMailInfoReq) (*AddMailInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAddMailInfo not implemented")
}
func (*UnimplementedHallemailServer) OnSendMailInfo(ctx context.Context, req *SendMailInfoReq) (*SendMailInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSendMailInfo not implemented")
}
func (*UnimplementedHallemailServer) GetMailInfo(ctx context.Context, req *GetMailInfoReq) (*GetMailInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailInfo not implemented")
}
func (*UnimplementedHallemailServer) UserMailOperation(ctx context.Context, req *MailOpReq) (*MailOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMailOperation not implemented")
}

func RegisterHallemailServer(s *grpc.Server, srv HallemailServer) {
	s.RegisterService(&_Hallemail_serviceDesc, srv)
}

func _Hallemail_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallemailServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hallemail.service.v1.hallemail/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallemailServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hallemail_OnPublishMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallemailServer).OnPublishMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hallemail.service.v1.hallemail/OnPublishMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallemailServer).OnPublishMail(ctx, req.(*PublishMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hallemail_OnAddMailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallemailServer).OnAddMailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hallemail.service.v1.hallemail/OnAddMailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallemailServer).OnAddMailInfo(ctx, req.(*AddMailInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hallemail_OnSendMailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallemailServer).OnSendMailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hallemail.service.v1.hallemail/OnSendMailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallemailServer).OnSendMailInfo(ctx, req.(*SendMailInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hallemail_GetMailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallemailServer).GetMailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hallemail.service.v1.hallemail/GetMailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallemailServer).GetMailInfo(ctx, req.(*GetMailInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hallemail_UserMailOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallemailServer).UserMailOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hallemail.service.v1.hallemail/UserMailOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallemailServer).UserMailOperation(ctx, req.(*MailOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hallemail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hallemail.service.v1.hallemail",
	HandlerType: (*HallemailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hallemail_Ping_Handler,
		},
		{
			MethodName: "OnPublishMail",
			Handler:    _Hallemail_OnPublishMail_Handler,
		},
		{
			MethodName: "OnAddMailInfo",
			Handler:    _Hallemail_OnAddMailInfo_Handler,
		},
		{
			MethodName: "OnSendMailInfo",
			Handler:    _Hallemail_OnSendMailInfo_Handler,
		},
		{
			MethodName: "GetMailInfo",
			Handler:    _Hallemail_GetMailInfo_Handler,
		},
		{
			MethodName: "UserMailOperation",
			Handler:    _Hallemail_UserMailOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *MailOpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailOpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailOpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlatFormID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlatFormID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PhyID) > 0 {
		i -= len(m.PhyID)
		copy(dAtA[i:], m.PhyID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PhyID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MailIDs) > 0 {
		dAtA2 := make([]byte, len(m.MailIDs)*10)
		var j1 int
		for _, num1 := range m.MailIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.OpID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OpID))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserDBID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDBID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MailOpRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailOpRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailOpRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MailIDs) > 0 {
		dAtA4 := make([]byte, len(m.MailIDs)*10)
		var j3 int
		for _, num1 := range m.MailIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Success))
		i--
		dAtA[i] = 0x18
	}
	if m.OpID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OpID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserDBID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDBID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MailRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MailRewardList) > 0 {
		for iNdEx := len(m.MailRewardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MailRewardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.IsRedPoint {
		i--
		if m.IsRedPoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x48
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsReward {
		i--
		if m.IsReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsRead {
		i--
		if m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ExpireTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x20
	}
	if m.WriteTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WriteTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MailTitle) > 0 {
		i -= len(m.MailTitle)
		copy(dAtA[i:], m.MailTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MailTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.MailID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MailID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishMailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishMailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishMailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GamePlatFormID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GamePlatFormID))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RewordInfo) > 0 {
		i -= len(m.RewordInfo)
		copy(dAtA[i:], m.RewordInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RewordInfo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UserIDS) > 0 {
		i -= len(m.UserIDS)
		copy(dAtA[i:], m.UserIDS)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIDS)))
		i--
		dAtA[i] = 0x42
	}
	if m.SendType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SendType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishMailRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishMailRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishMailRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddMailInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMailInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMailInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Users) > 0 {
		i -= len(m.Users)
		copy(dAtA[i:], m.Users)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Users)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMailInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMailInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMailInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Users) > 0 {
		i -= len(m.Users)
		copy(dAtA[i:], m.Users)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Users)))
		i--
		dAtA[i] = 0x12
	}
	if m.MailID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MailID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendMailInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMailInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SendMailInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMailInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetMailInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMailInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMailInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlatFormID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlatFormID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMailInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMailInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMailInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MailInfo) > 0 {
		for iNdEx := len(m.MailInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MailInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MailOpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDBID != 0 {
		n += 1 + sovApi(uint64(m.UserDBID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.OpID != 0 {
		n += 1 + sovApi(uint64(m.OpID))
	}
	if len(m.MailIDs) > 0 {
		l = 0
		for _, e := range m.MailIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	l = len(m.PhyID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlatFormID != 0 {
		n += 1 + sovApi(uint64(m.PlatFormID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MailOpRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDBID != 0 {
		n += 1 + sovApi(uint64(m.UserDBID))
	}
	if m.OpID != 0 {
		n += 1 + sovApi(uint64(m.OpID))
	}
	if m.Success != 0 {
		n += 1 + sovApi(uint64(m.Success))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.MailIDs) > 0 {
		l = 0
		for _, e := range m.MailIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MailRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MailInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailID != 0 {
		n += 1 + sovApi(uint64(m.MailID))
	}
	l = len(m.MailTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.WriteTime != 0 {
		n += 1 + sovApi(uint64(m.WriteTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovApi(uint64(m.ExpireTime))
	}
	if m.IsRead {
		n += 2
	}
	if m.IsReward {
		n += 2
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.IsRedPoint {
		n += 2
	}
	if len(m.MailRewardList) > 0 {
		for _, e := range m.MailRewardList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishMailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SendType != 0 {
		n += 1 + sovApi(uint64(m.SendType))
	}
	l = len(m.UserIDS)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RewordInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GamePlatFormID != 0 {
		n += 1 + sovApi(uint64(m.GamePlatFormID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishMailRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MsgID != 0 {
		n += 1 + sovApi(uint64(m.MsgID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddMailInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddMailInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailID != 0 {
		n += 1 + sovApi(uint64(m.MailID))
	}
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendMailInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendMailInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMailInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.PlatFormID != 0 {
		n += 1 + sovApi(uint64(m.PlatFormID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMailInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MailInfo) > 0 {
		for _, e := range m.MailInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MailOpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailOpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailOpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDBID", wireType)
			}
			m.UserDBID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDBID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpID", wireType)
			}
			m.OpID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MailIDs = append(m.MailIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MailIDs) == 0 {
					m.MailIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MailIDs = append(m.MailIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MailIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatFormID", wireType)
			}
			m.PlatFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatFormID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailOpRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailOpRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailOpRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDBID", wireType)
			}
			m.UserDBID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDBID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpID", wireType)
			}
			m.OpID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			m.Success = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Success |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MailIDs = append(m.MailIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MailIDs) == 0 {
					m.MailIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MailIDs = append(m.MailIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MailIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailID", wireType)
			}
			m.MailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteTime", wireType)
			}
			m.WriteTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRead = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReward = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRedPoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRedPoint = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailRewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailRewardList = append(m.MailRewardList, &MailRewardInfo{})
			if err := m.MailRewardList[len(m.MailRewardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishMailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishMailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishMailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendType", wireType)
			}
			m.SendType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewordInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewordInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GamePlatFormID", wireType)
			}
			m.GamePlatFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GamePlatFormID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishMailRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishMailRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishMailRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMailInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMailInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMailInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMailInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMailInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMailInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailID", wireType)
			}
			m.MailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMailInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMailInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMailInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatFormID", wireType)
			}
			m.PlatFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatFormID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMailInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMailInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMailInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailInfo = append(m.MailInfo, &MailInfo{})
			if err := m.MailInfo[len(m.MailInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
