// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathHallemailPing = "/hallemail.service.v1.hallemail/Ping"
var PathHallemailOnPublishMail = "/hallemail/PublishMail"
var PathHallemailOnAddMailInfo = "/hallemail/AddMailInfo"
var PathHallemailOnSendMailInfo = "/hallemail/SendMailInfo"
var PathHallemailGetMailInfo = "hallemail/GetMailInfo"
var PathHallemailUserMailOperation = "hallemail/UserMailOperation"

// HallemailBMServer is the server API for Hallemail service.
type HallemailBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 服务器更新并发送邮件
	OnPublishMail(ctx context.Context, req *PublishMailReq) (resp *PublishMailRsp, err error)

	// 添加基础邮件
	OnAddMailInfo(ctx context.Context, req *AddMailInfoReq) (resp *AddMailInfoRsp, err error)

	// 发送邮件(发送添加的基础邮件给到指定的用户)
	OnSendMailInfo(ctx context.Context, req *SendMailInfoReq) (resp *SendMailInfoRsp, err error)

	// 获取邮件信息(客户端请求)
	GetMailInfo(ctx context.Context, req *GetMailInfoReq) (resp *GetMailInfoResp, err error)

	// 用户邮件操作(0.read 1.getreward 2.remove 3.deleteRedPoint)
	UserMailOperation(ctx context.Context, req *MailOpReq) (resp *MailOpRsp, err error)
}

var HallemailSvc HallemailBMServer

func hallemailPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallemailSvc.Ping(c, p)
	c.JSON(resp, err)
}

func hallemailOnPublishMail(c *bm.Context) {
	p := new(PublishMailReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallemailSvc.OnPublishMail(c, p)
	c.JSON(resp, err)
}

func hallemailOnAddMailInfo(c *bm.Context) {
	p := new(AddMailInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallemailSvc.OnAddMailInfo(c, p)
	c.JSON(resp, err)
}

func hallemailOnSendMailInfo(c *bm.Context) {
	p := new(SendMailInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallemailSvc.OnSendMailInfo(c, p)
	c.JSON(resp, err)
}

func hallemailGetMailInfo(c *bm.Context) {
	p := new(GetMailInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallemailSvc.GetMailInfo(c, p)
	c.JSON(resp, err)
}

func hallemailUserMailOperation(c *bm.Context) {
	p := new(MailOpReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := HallemailSvc.UserMailOperation(c, p)
	c.JSON(resp, err)
}

// RegisterHallemailBMServer Register the blademaster route
func RegisterHallemailBMServer(e *bm.Engine, server HallemailBMServer) {
	HallemailSvc = server
	e.GET("/hallemail.service.v1.hallemail/Ping", hallemailPing)
	e.POST("/hallemail/PublishMail", hallemailOnPublishMail)
	e.POST("/hallemail/AddMailInfo", hallemailOnAddMailInfo)
	e.POST("/hallemail/SendMailInfo", hallemailOnSendMailInfo)
	e.POST("hallemail/GetMailInfo", hallemailGetMailInfo)
	e.POST("hallemail/UserMailOperation", hallemailUserMailOperation)
}
