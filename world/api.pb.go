// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommonResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResp) Reset()         { *m = CommonResp{} }
func (m *CommonResp) String() string { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()    {}
func (*CommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CommonResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResp.Merge(m, src)
}
func (m *CommonResp) XXX_Size() int {
	return m.Size()
}
func (m *CommonResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResp proto.InternalMessageInfo

// 获取玩家基础信息
type BaseUserInfoReq struct {
	PlayerId             string   `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseUserInfoReq) Reset()         { *m = BaseUserInfoReq{} }
func (m *BaseUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*BaseUserInfoReq) ProtoMessage()    {}
func (*BaseUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *BaseUserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseUserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseUserInfoReq.Merge(m, src)
}
func (m *BaseUserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *BaseUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_BaseUserInfoReq proto.InternalMessageInfo

type BaseUserInfoRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Baseuserinfoget      string   `protobuf:"bytes,3,opt,name=baseuserinfoget,proto3" json:"baseuserinfoget,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseUserInfoRsp) Reset()         { *m = BaseUserInfoRsp{} }
func (m *BaseUserInfoRsp) String() string { return proto.CompactTextString(m) }
func (*BaseUserInfoRsp) ProtoMessage()    {}
func (*BaseUserInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *BaseUserInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseUserInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseUserInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseUserInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseUserInfoRsp.Merge(m, src)
}
func (m *BaseUserInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *BaseUserInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseUserInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BaseUserInfoRsp proto.InternalMessageInfo

// 进房
type EnterRoomReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnterRoomReq) Reset()         { *m = EnterRoomReq{} }
func (m *EnterRoomReq) String() string { return proto.CompactTextString(m) }
func (*EnterRoomReq) ProtoMessage()    {}
func (*EnterRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *EnterRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterRoomReq.Merge(m, src)
}
func (m *EnterRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *EnterRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_EnterRoomReq proto.InternalMessageInfo

type EnterRoomRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Amount               int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Dbserverid           int32    `protobuf:"varint,4,opt,name=dbserverid,proto3" json:"dbserverid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnterRoomRsp) Reset()         { *m = EnterRoomRsp{} }
func (m *EnterRoomRsp) String() string { return proto.CompactTextString(m) }
func (*EnterRoomRsp) ProtoMessage()    {}
func (*EnterRoomRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *EnterRoomRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterRoomRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterRoomRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterRoomRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterRoomRsp.Merge(m, src)
}
func (m *EnterRoomRsp) XXX_Size() int {
	return m.Size()
}
func (m *EnterRoomRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterRoomRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EnterRoomRsp proto.InternalMessageInfo

// 退房
type LeaveRoomReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	IP                   string   `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
	LoginMoney           string   `protobuf:"bytes,6,opt,name=LoginMoney,proto3" json:"LoginMoney,omitempty"`
	WantedMoney          string   `protobuf:"bytes,7,opt,name=WantedMoney,proto3" json:"WantedMoney,omitempty"`
	Ticket               string   `protobuf:"bytes,8,opt,name=Ticket,proto3" json:"Ticket,omitempty"`
	Tax                  string   `protobuf:"bytes,9,opt,name=Tax,proto3" json:"Tax,omitempty"`
	TiSysType            string   `protobuf:"bytes,10,opt,name=TiSysType,proto3" json:"TiSysType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveRoomReq) Reset()         { *m = LeaveRoomReq{} }
func (m *LeaveRoomReq) String() string { return proto.CompactTextString(m) }
func (*LeaveRoomReq) ProtoMessage()    {}
func (*LeaveRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *LeaveRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRoomReq.Merge(m, src)
}
func (m *LeaveRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *LeaveRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRoomReq proto.InternalMessageInfo

// 退房日志
type LeaveRoomLogReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	IP                   string   `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
	WinCount             string   `protobuf:"bytes,6,opt,name=WinCount,proto3" json:"WinCount,omitempty"`
	LoseCount            string   `protobuf:"bytes,7,opt,name=LoseCount,proto3" json:"LoseCount,omitempty"`
	DrawCount            string   `protobuf:"bytes,8,opt,name=DrawCount,proto3" json:"DrawCount,omitempty"`
	FleeCount            string   `protobuf:"bytes,9,opt,name=FleeCount,proto3" json:"FleeCount,omitempty"`
	Score                string   `protobuf:"bytes,10,opt,name=Score,proto3" json:"Score,omitempty"`
	LoginTime            string   `protobuf:"bytes,11,opt,name=LoginTime,proto3" json:"LoginTime,omitempty"`
	GameTime             string   `protobuf:"bytes,12,opt,name=GameTime,proto3" json:"GameTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveRoomLogReq) Reset()         { *m = LeaveRoomLogReq{} }
func (m *LeaveRoomLogReq) String() string { return proto.CompactTextString(m) }
func (*LeaveRoomLogReq) ProtoMessage()    {}
func (*LeaveRoomLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *LeaveRoomLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveRoomLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveRoomLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveRoomLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRoomLogReq.Merge(m, src)
}
func (m *LeaveRoomLogReq) XXX_Size() int {
	return m.Size()
}
func (m *LeaveRoomLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRoomLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRoomLogReq proto.InternalMessageInfo

// 打旋退房日志
type LeaveRoomLogDxReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	IP                   string   `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
	WinCount             string   `protobuf:"bytes,6,opt,name=WinCount,proto3" json:"WinCount,omitempty"`
	LoseCount            string   `protobuf:"bytes,7,opt,name=LoseCount,proto3" json:"LoseCount,omitempty"`
	DrawCount            string   `protobuf:"bytes,8,opt,name=DrawCount,proto3" json:"DrawCount,omitempty"`
	FleeCount            string   `protobuf:"bytes,9,opt,name=FleeCount,proto3" json:"FleeCount,omitempty"`
	Score                string   `protobuf:"bytes,10,opt,name=Score,proto3" json:"Score,omitempty"`
	LoginTime            string   `protobuf:"bytes,11,opt,name=LoginTime,proto3" json:"LoginTime,omitempty"`
	GameTime             string   `protobuf:"bytes,12,opt,name=GameTime,proto3" json:"GameTime,omitempty"`
	IsTrusteeship        string   `protobuf:"bytes,13,opt,name=IsTrusteeship,proto3" json:"IsTrusteeship,omitempty"`
	ClineType            string   `protobuf:"bytes,14,opt,name=ClineType,proto3" json:"ClineType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveRoomLogDxReq) Reset()         { *m = LeaveRoomLogDxReq{} }
func (m *LeaveRoomLogDxReq) String() string { return proto.CompactTextString(m) }
func (*LeaveRoomLogDxReq) ProtoMessage()    {}
func (*LeaveRoomLogDxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *LeaveRoomLogDxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveRoomLogDxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveRoomLogDxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveRoomLogDxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRoomLogDxReq.Merge(m, src)
}
func (m *LeaveRoomLogDxReq) XXX_Size() int {
	return m.Size()
}
func (m *LeaveRoomLogDxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRoomLogDxReq.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRoomLogDxReq proto.InternalMessageInfo

// 更新防刷池
type UpdatePreventCheatReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	GoldNUM              string   `protobuf:"bytes,4,opt,name=goldNUM,proto3" json:"goldNUM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePreventCheatReq) Reset()         { *m = UpdatePreventCheatReq{} }
func (m *UpdatePreventCheatReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePreventCheatReq) ProtoMessage()    {}
func (*UpdatePreventCheatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *UpdatePreventCheatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePreventCheatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePreventCheatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePreventCheatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePreventCheatReq.Merge(m, src)
}
func (m *UpdatePreventCheatReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePreventCheatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePreventCheatReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePreventCheatReq proto.InternalMessageInfo

type UpdatePreventCheatRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	GoldNum              int64    `protobuf:"varint,3,opt,name=goldNum,proto3" json:"goldNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePreventCheatRsp) Reset()         { *m = UpdatePreventCheatRsp{} }
func (m *UpdatePreventCheatRsp) String() string { return proto.CompactTextString(m) }
func (*UpdatePreventCheatRsp) ProtoMessage()    {}
func (*UpdatePreventCheatRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *UpdatePreventCheatRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePreventCheatRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePreventCheatRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePreventCheatRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePreventCheatRsp.Merge(m, src)
}
func (m *UpdatePreventCheatRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePreventCheatRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePreventCheatRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePreventCheatRsp proto.InternalMessageInfo

// 更新金币
type RefreshUserMoneyReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             string   `protobuf:"bytes,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	TiSysType            string   `protobuf:"bytes,3,opt,name=TiSysType,proto3" json:"TiSysType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshUserMoneyReq) Reset()         { *m = RefreshUserMoneyReq{} }
func (m *RefreshUserMoneyReq) String() string { return proto.CompactTextString(m) }
func (*RefreshUserMoneyReq) ProtoMessage()    {}
func (*RefreshUserMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *RefreshUserMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshUserMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshUserMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshUserMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshUserMoneyReq.Merge(m, src)
}
func (m *RefreshUserMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshUserMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshUserMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshUserMoneyReq proto.InternalMessageInfo

type RefreshUserMoneyRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	PlayerID             int64    `protobuf:"varint,3,opt,name=playerID,proto3" json:"playerID,omitempty"`
	Amount               int64    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Ticket               int32    `protobuf:"varint,5,opt,name=ticket,proto3" json:"ticket,omitempty"`
	ExtCoin              string   `protobuf:"bytes,6,opt,name=extCoin,proto3" json:"extCoin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshUserMoneyRsp) Reset()         { *m = RefreshUserMoneyRsp{} }
func (m *RefreshUserMoneyRsp) String() string { return proto.CompactTextString(m) }
func (*RefreshUserMoneyRsp) ProtoMessage()    {}
func (*RefreshUserMoneyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *RefreshUserMoneyRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshUserMoneyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshUserMoneyRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshUserMoneyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshUserMoneyRsp.Merge(m, src)
}
func (m *RefreshUserMoneyRsp) XXX_Size() int {
	return m.Size()
}
func (m *RefreshUserMoneyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshUserMoneyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshUserMoneyRsp proto.InternalMessageInfo

// 在线人数
type CountPlayerReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	Num                  string   `protobuf:"bytes,4,opt,name=Num,proto3" json:"Num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountPlayerReq) Reset()         { *m = CountPlayerReq{} }
func (m *CountPlayerReq) String() string { return proto.CompactTextString(m) }
func (*CountPlayerReq) ProtoMessage()    {}
func (*CountPlayerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *CountPlayerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountPlayerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountPlayerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountPlayerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountPlayerReq.Merge(m, src)
}
func (m *CountPlayerReq) XXX_Size() int {
	return m.Size()
}
func (m *CountPlayerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CountPlayerReq.DiscardUnknown(m)
}

var xxx_messageInfo_CountPlayerReq proto.InternalMessageInfo

// 个人奖池
type UpdateAwardGoldPoolReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	GoldType             string   `protobuf:"bytes,4,opt,name=GoldType,proto3" json:"GoldType,omitempty"`
	GoldNum1             string   `protobuf:"bytes,5,opt,name=GoldNum1,proto3" json:"GoldNum1,omitempty"`
	GoldNum2             string   `protobuf:"bytes,6,opt,name=GoldNum2,proto3" json:"GoldNum2,omitempty"`
	GoldNum3             string   `protobuf:"bytes,7,opt,name=GoldNum3,proto3" json:"GoldNum3,omitempty"`
	GoldNum4             string   `protobuf:"bytes,8,opt,name=GoldNum4,proto3" json:"GoldNum4,omitempty"`
	GoldNum5             string   `protobuf:"bytes,9,opt,name=GoldNum5,proto3" json:"GoldNum5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAwardGoldPoolReq) Reset()         { *m = UpdateAwardGoldPoolReq{} }
func (m *UpdateAwardGoldPoolReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAwardGoldPoolReq) ProtoMessage()    {}
func (*UpdateAwardGoldPoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *UpdateAwardGoldPoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAwardGoldPoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAwardGoldPoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAwardGoldPoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAwardGoldPoolReq.Merge(m, src)
}
func (m *UpdateAwardGoldPoolReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAwardGoldPoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAwardGoldPoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAwardGoldPoolReq proto.InternalMessageInfo

type UpdateAwardGoldPoolRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	GoldNum1             int64    `protobuf:"varint,3,opt,name=goldNum1,proto3" json:"goldNum1,omitempty"`
	GoldNum2             int64    `protobuf:"varint,4,opt,name=goldNum2,proto3" json:"goldNum2,omitempty"`
	GoldNum3             int64    `protobuf:"varint,5,opt,name=goldNum3,proto3" json:"goldNum3,omitempty"`
	GoldNum4             int64    `protobuf:"varint,6,opt,name=goldNum4,proto3" json:"goldNum4,omitempty"`
	GoldNum5             int64    `protobuf:"varint,7,opt,name=goldNum5,proto3" json:"goldNum5,omitempty"`
	GoldSumNum1          int64    `protobuf:"varint,8,opt,name=goldSumNum1,proto3" json:"goldSumNum1,omitempty"`
	GoldSumNum2          int64    `protobuf:"varint,9,opt,name=goldSumNum2,proto3" json:"goldSumNum2,omitempty"`
	GoldSumNum3          int64    `protobuf:"varint,10,opt,name=goldSumNum3,proto3" json:"goldSumNum3,omitempty"`
	GoldSumNum4          int64    `protobuf:"varint,11,opt,name=goldSumNum4,proto3" json:"goldSumNum4,omitempty"`
	GoldSumNum5          int64    `protobuf:"varint,12,opt,name=goldSumNum5,proto3" json:"goldSumNum5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAwardGoldPoolRsp) Reset()         { *m = UpdateAwardGoldPoolRsp{} }
func (m *UpdateAwardGoldPoolRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateAwardGoldPoolRsp) ProtoMessage()    {}
func (*UpdateAwardGoldPoolRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *UpdateAwardGoldPoolRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAwardGoldPoolRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAwardGoldPoolRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAwardGoldPoolRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAwardGoldPoolRsp.Merge(m, src)
}
func (m *UpdateAwardGoldPoolRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAwardGoldPoolRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAwardGoldPoolRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAwardGoldPoolRsp proto.InternalMessageInfo

type GetJackpotRecordReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	Jtype                string   `protobuf:"bytes,2,opt,name=Jtype,proto3" json:"Jtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJackpotRecordReq) Reset()         { *m = GetJackpotRecordReq{} }
func (m *GetJackpotRecordReq) String() string { return proto.CompactTextString(m) }
func (*GetJackpotRecordReq) ProtoMessage()    {}
func (*GetJackpotRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *GetJackpotRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJackpotRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJackpotRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJackpotRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJackpotRecordReq.Merge(m, src)
}
func (m *GetJackpotRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *GetJackpotRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJackpotRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetJackpotRecordReq proto.InternalMessageInfo

type Record struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Arenaid              int32    `protobuf:"varint,4,opt,name=arenaid,proto3" json:"arenaid,omitempty"`
	Value                int64    `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Robot                int32    `protobuf:"varint,6,opt,name=robot,proto3" json:"robot,omitempty"`
	Time                 int32    `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

type GetJackpotRecordRsp struct {
	Code                 int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Records              []*Record `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetJackpotRecordRsp) Reset()         { *m = GetJackpotRecordRsp{} }
func (m *GetJackpotRecordRsp) String() string { return proto.CompactTextString(m) }
func (*GetJackpotRecordRsp) ProtoMessage()    {}
func (*GetJackpotRecordRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *GetJackpotRecordRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJackpotRecordRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJackpotRecordRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJackpotRecordRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJackpotRecordRsp.Merge(m, src)
}
func (m *GetJackpotRecordRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetJackpotRecordRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJackpotRecordRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetJackpotRecordRsp proto.InternalMessageInfo

type InsertJackpotRecordReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	Jtype                string   `protobuf:"bytes,2,opt,name=Jtype,proto3" json:"Jtype,omitempty"`
	ArenaID              string   `protobuf:"bytes,3,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Value                string   `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertJackpotRecordReq) Reset()         { *m = InsertJackpotRecordReq{} }
func (m *InsertJackpotRecordReq) String() string { return proto.CompactTextString(m) }
func (*InsertJackpotRecordReq) ProtoMessage()    {}
func (*InsertJackpotRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *InsertJackpotRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertJackpotRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertJackpotRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertJackpotRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertJackpotRecordReq.Merge(m, src)
}
func (m *InsertJackpotRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *InsertJackpotRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertJackpotRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_InsertJackpotRecordReq proto.InternalMessageInfo

type GetJackpotPoolReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	Jtype                string   `protobuf:"bytes,3,opt,name=Jtype,proto3" json:"Jtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJackpotPoolReq) Reset()         { *m = GetJackpotPoolReq{} }
func (m *GetJackpotPoolReq) String() string { return proto.CompactTextString(m) }
func (*GetJackpotPoolReq) ProtoMessage()    {}
func (*GetJackpotPoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *GetJackpotPoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJackpotPoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJackpotPoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJackpotPoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJackpotPoolReq.Merge(m, src)
}
func (m *GetJackpotPoolReq) XXX_Size() int {
	return m.Size()
}
func (m *GetJackpotPoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJackpotPoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetJackpotPoolReq proto.InternalMessageInfo

type GetJackpotPoolRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Num                  int64    `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJackpotPoolRsp) Reset()         { *m = GetJackpotPoolRsp{} }
func (m *GetJackpotPoolRsp) String() string { return proto.CompactTextString(m) }
func (*GetJackpotPoolRsp) ProtoMessage()    {}
func (*GetJackpotPoolRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *GetJackpotPoolRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJackpotPoolRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJackpotPoolRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJackpotPoolRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJackpotPoolRsp.Merge(m, src)
}
func (m *GetJackpotPoolRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetJackpotPoolRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJackpotPoolRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetJackpotPoolRsp proto.InternalMessageInfo

type UpdateJackpotPoolReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	Jtype                string   `protobuf:"bytes,3,opt,name=Jtype,proto3" json:"Jtype,omitempty"`
	Detal                string   `protobuf:"bytes,4,opt,name=Detal,proto3" json:"Detal,omitempty"`
	Add                  string   `protobuf:"bytes,5,opt,name=Add,proto3" json:"Add,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateJackpotPoolReq) Reset()         { *m = UpdateJackpotPoolReq{} }
func (m *UpdateJackpotPoolReq) String() string { return proto.CompactTextString(m) }
func (*UpdateJackpotPoolReq) ProtoMessage()    {}
func (*UpdateJackpotPoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *UpdateJackpotPoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJackpotPoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJackpotPoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJackpotPoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJackpotPoolReq.Merge(m, src)
}
func (m *UpdateJackpotPoolReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJackpotPoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJackpotPoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJackpotPoolReq proto.InternalMessageInfo

type GetVipInfosReq struct {
	PlayerID             string   `protobuf:"bytes,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVipInfosReq) Reset()         { *m = GetVipInfosReq{} }
func (m *GetVipInfosReq) String() string { return proto.CompactTextString(m) }
func (*GetVipInfosReq) ProtoMessage()    {}
func (*GetVipInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *GetVipInfosReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVipInfosReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVipInfosReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVipInfosReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVipInfosReq.Merge(m, src)
}
func (m *GetVipInfosReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVipInfosReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVipInfosReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVipInfosReq proto.InternalMessageInfo

type GetVipInfosRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Isvip                int32    `protobuf:"varint,3,opt,name=isvip,proto3" json:"isvip,omitempty"`
	Ispermanentvip       int32    `protobuf:"varint,4,opt,name=ispermanentvip,proto3" json:"ispermanentvip,omitempty"`
	EndTime              string   `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVipInfosRsp) Reset()         { *m = GetVipInfosRsp{} }
func (m *GetVipInfosRsp) String() string { return proto.CompactTextString(m) }
func (*GetVipInfosRsp) ProtoMessage()    {}
func (*GetVipInfosRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *GetVipInfosRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVipInfosRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVipInfosRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVipInfosRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVipInfosRsp.Merge(m, src)
}
func (m *GetVipInfosRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetVipInfosRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVipInfosRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetVipInfosRsp proto.InternalMessageInfo

// 更新金币
type UpdateMoneyReq struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UpdateAmount         string   `protobuf:"bytes,2,opt,name=UpdateAmount,proto3" json:"UpdateAmount,omitempty"`
	SourceType           string   `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	IP                   string   `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
	Remark               string   `protobuf:"bytes,5,opt,name=Remark,proto3" json:"Remark,omitempty"`
	TaxAmount            string   `protobuf:"bytes,6,opt,name=TaxAmount,proto3" json:"TaxAmount,omitempty"`
	IsCheckInRoom        string   `protobuf:"bytes,7,opt,name=IsCheckInRoom,proto3" json:"IsCheckInRoom,omitempty"`
	SysType              string   `protobuf:"bytes,8,opt,name=SysType,proto3" json:"SysType,omitempty"`
	GameID               string   `protobuf:"bytes,9,opt,name=GameID,proto3" json:"GameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMoneyReq) Reset()         { *m = UpdateMoneyReq{} }
func (m *UpdateMoneyReq) String() string { return proto.CompactTextString(m) }
func (*UpdateMoneyReq) ProtoMessage()    {}
func (*UpdateMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *UpdateMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMoneyReq.Merge(m, src)
}
func (m *UpdateMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMoneyReq proto.InternalMessageInfo

type UpdateMoneyRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Amount               int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Delta                int64    `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	PlayerID             string   `protobuf:"bytes,5,opt,name=playerID,proto3" json:"playerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMoneyRsp) Reset()         { *m = UpdateMoneyRsp{} }
func (m *UpdateMoneyRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateMoneyRsp) ProtoMessage()    {}
func (*UpdateMoneyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *UpdateMoneyRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMoneyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMoneyRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMoneyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMoneyRsp.Merge(m, src)
}
func (m *UpdateMoneyRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMoneyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMoneyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMoneyRsp proto.InternalMessageInfo

type AwardGoldPoolUserLogReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PoolID               string   `protobuf:"bytes,3,opt,name=PoolID,proto3" json:"PoolID,omitempty"`
	GoldNum              string   `protobuf:"bytes,4,opt,name=GoldNum,proto3" json:"GoldNum,omitempty"`
	PlayerName           string   `protobuf:"bytes,5,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	GoldType             string   `protobuf:"bytes,6,opt,name=GoldType,proto3" json:"GoldType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AwardGoldPoolUserLogReq) Reset()         { *m = AwardGoldPoolUserLogReq{} }
func (m *AwardGoldPoolUserLogReq) String() string { return proto.CompactTextString(m) }
func (*AwardGoldPoolUserLogReq) ProtoMessage()    {}
func (*AwardGoldPoolUserLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *AwardGoldPoolUserLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwardGoldPoolUserLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwardGoldPoolUserLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwardGoldPoolUserLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwardGoldPoolUserLogReq.Merge(m, src)
}
func (m *AwardGoldPoolUserLogReq) XXX_Size() int {
	return m.Size()
}
func (m *AwardGoldPoolUserLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AwardGoldPoolUserLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_AwardGoldPoolUserLogReq proto.InternalMessageInfo

// 更新外部货币
type UpdatEextendCoinReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayerID             string   `protobuf:"bytes,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	CoinType             string   `protobuf:"bytes,3,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	UpdateAmount         string   `protobuf:"bytes,4,opt,name=UpdateAmount,proto3" json:"UpdateAmount,omitempty"`
	SrcType              string   `protobuf:"bytes,5,opt,name=SrcType,proto3" json:"SrcType,omitempty"`
	IP                   string   `protobuf:"bytes,6,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatEextendCoinReq) Reset()         { *m = UpdatEextendCoinReq{} }
func (m *UpdatEextendCoinReq) String() string { return proto.CompactTextString(m) }
func (*UpdatEextendCoinReq) ProtoMessage()    {}
func (*UpdatEextendCoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *UpdatEextendCoinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatEextendCoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatEextendCoinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatEextendCoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatEextendCoinReq.Merge(m, src)
}
func (m *UpdatEextendCoinReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatEextendCoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatEextendCoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatEextendCoinReq proto.InternalMessageInfo

type UpdatEextendCoinRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Amount               int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatEextendCoinRsp) Reset()         { *m = UpdatEextendCoinRsp{} }
func (m *UpdatEextendCoinRsp) String() string { return proto.CompactTextString(m) }
func (*UpdatEextendCoinRsp) ProtoMessage()    {}
func (*UpdatEextendCoinRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *UpdatEextendCoinRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatEextendCoinRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatEextendCoinRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatEextendCoinRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatEextendCoinRsp.Merge(m, src)
}
func (m *UpdatEextendCoinRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdatEextendCoinRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatEextendCoinRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatEextendCoinRsp proto.InternalMessageInfo

// 停服
type ShutDwonReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutDwonReq) Reset()         { *m = ShutDwonReq{} }
func (m *ShutDwonReq) String() string { return proto.CompactTextString(m) }
func (*ShutDwonReq) ProtoMessage()    {}
func (*ShutDwonReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *ShutDwonReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutDwonReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutDwonReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutDwonReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutDwonReq.Merge(m, src)
}
func (m *ShutDwonReq) XXX_Size() int {
	return m.Size()
}
func (m *ShutDwonReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutDwonReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShutDwonReq proto.InternalMessageInfo

// 创建亲友房
type CreateCustomRoomReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	RoomPassword         string   `protobuf:"bytes,2,opt,name=RoomPassword,proto3" json:"RoomPassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCustomRoomReq) Reset()         { *m = CreateCustomRoomReq{} }
func (m *CreateCustomRoomReq) String() string { return proto.CompactTextString(m) }
func (*CreateCustomRoomReq) ProtoMessage()    {}
func (*CreateCustomRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *CreateCustomRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCustomRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCustomRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCustomRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCustomRoomReq.Merge(m, src)
}
func (m *CreateCustomRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateCustomRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCustomRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCustomRoomReq proto.InternalMessageInfo

type CreateCustomRoomRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Roomnum              int64    `protobuf:"varint,3,opt,name=roomnum,proto3" json:"roomnum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCustomRoomRsp) Reset()         { *m = CreateCustomRoomRsp{} }
func (m *CreateCustomRoomRsp) String() string { return proto.CompactTextString(m) }
func (*CreateCustomRoomRsp) ProtoMessage()    {}
func (*CreateCustomRoomRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *CreateCustomRoomRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCustomRoomRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCustomRoomRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCustomRoomRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCustomRoomRsp.Merge(m, src)
}
func (m *CreateCustomRoomRsp) XXX_Size() int {
	return m.Size()
}
func (m *CreateCustomRoomRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCustomRoomRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCustomRoomRsp proto.InternalMessageInfo

// 每局更新记录
type TableRecordUpdateReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ArenaId              string   `protobuf:"bytes,2,opt,name=ArenaId,proto3" json:"ArenaId,omitempty"`
	RoomNum              string   `protobuf:"bytes,3,opt,name=RoomNum,proto3" json:"RoomNum,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	AddNew               string   `protobuf:"bytes,5,opt,name=AddNew,proto3" json:"AddNew,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableRecordUpdateReq) Reset()         { *m = TableRecordUpdateReq{} }
func (m *TableRecordUpdateReq) String() string { return proto.CompactTextString(m) }
func (*TableRecordUpdateReq) ProtoMessage()    {}
func (*TableRecordUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *TableRecordUpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableRecordUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableRecordUpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableRecordUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableRecordUpdateReq.Merge(m, src)
}
func (m *TableRecordUpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *TableRecordUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TableRecordUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_TableRecordUpdateReq proto.InternalMessageInfo

//亲友房 大结算日志
type CustomGameResultReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	TypeID               string   `protobuf:"bytes,2,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	UserIDs              string   `protobuf:"bytes,3,opt,name=UserIDs,proto3" json:"UserIDs,omitempty"`
	ResultData           string   `protobuf:"bytes,4,opt,name=ResultData,proto3" json:"ResultData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomGameResultReq) Reset()         { *m = CustomGameResultReq{} }
func (m *CustomGameResultReq) String() string { return proto.CompactTextString(m) }
func (*CustomGameResultReq) ProtoMessage()    {}
func (*CustomGameResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *CustomGameResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomGameResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomGameResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomGameResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomGameResultReq.Merge(m, src)
}
func (m *CustomGameResultReq) XXX_Size() int {
	return m.Size()
}
func (m *CustomGameResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomGameResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_CustomGameResultReq proto.InternalMessageInfo

// 登录日志
type CommonUserLogAddReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              int32    `protobuf:"varint,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	LogType              int32    `protobuf:"varint,3,opt,name=LogType,proto3" json:"LogType,omitempty"`
	Data                 string   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonUserLogAddReq) Reset()         { *m = CommonUserLogAddReq{} }
func (m *CommonUserLogAddReq) String() string { return proto.CompactTextString(m) }
func (*CommonUserLogAddReq) ProtoMessage()    {}
func (*CommonUserLogAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *CommonUserLogAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonUserLogAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonUserLogAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonUserLogAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonUserLogAddReq.Merge(m, src)
}
func (m *CommonUserLogAddReq) XXX_Size() int {
	return m.Size()
}
func (m *CommonUserLogAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonUserLogAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_CommonUserLogAddReq proto.InternalMessageInfo

// 邮件
type PublishMailReq struct {
	Title                string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Sender               string   `protobuf:"bytes,3,opt,name=Sender,proto3" json:"Sender,omitempty"`
	GameID               int32    `protobuf:"varint,4,opt,name=GameID,proto3" json:"GameID,omitempty"`
	StartTime            string   `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              string   `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	SendType             int32    `protobuf:"varint,7,opt,name=SendType,proto3" json:"SendType,omitempty"`
	UserIDS              string   `protobuf:"bytes,8,opt,name=UserIDS,proto3" json:"UserIDS,omitempty"`
	RewordInfo           string   `protobuf:"bytes,9,opt,name=RewordInfo,proto3" json:"RewordInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishMailReq) Reset()         { *m = PublishMailReq{} }
func (m *PublishMailReq) String() string { return proto.CompactTextString(m) }
func (*PublishMailReq) ProtoMessage()    {}
func (*PublishMailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *PublishMailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishMailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishMailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishMailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishMailReq.Merge(m, src)
}
func (m *PublishMailReq) XXX_Size() int {
	return m.Size()
}
func (m *PublishMailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishMailReq.DiscardUnknown(m)
}

var xxx_messageInfo_PublishMailReq proto.InternalMessageInfo

type PublishMailRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MsgID                int32    `protobuf:"varint,3,opt,name=msgID,proto3" json:"msgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishMailRsp) Reset()         { *m = PublishMailRsp{} }
func (m *PublishMailRsp) String() string { return proto.CompactTextString(m) }
func (*PublishMailRsp) ProtoMessage()    {}
func (*PublishMailRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *PublishMailRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishMailRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishMailRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishMailRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishMailRsp.Merge(m, src)
}
func (m *PublishMailRsp) XXX_Size() int {
	return m.Size()
}
func (m *PublishMailRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishMailRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PublishMailRsp proto.InternalMessageInfo

// WMC_NotifyLoginSucess
type NotifyLoginSucessReq struct {
	PlayerID             int32    `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              int32    `protobuf:"varint,3,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	IP                   string   `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
	ClientVersion        string   `protobuf:"bytes,5,opt,name=ClientVersion,proto3" json:"ClientVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyLoginSucessReq) Reset()         { *m = NotifyLoginSucessReq{} }
func (m *NotifyLoginSucessReq) String() string { return proto.CompactTextString(m) }
func (*NotifyLoginSucessReq) ProtoMessage()    {}
func (*NotifyLoginSucessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *NotifyLoginSucessReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyLoginSucessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyLoginSucessReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyLoginSucessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyLoginSucessReq.Merge(m, src)
}
func (m *NotifyLoginSucessReq) XXX_Size() int {
	return m.Size()
}
func (m *NotifyLoginSucessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyLoginSucessReq.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyLoginSucessReq proto.InternalMessageInfo

type GameLogReturnRatesAddReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PlayType             string   `protobuf:"bytes,2,opt,name=PlayType,proto3" json:"PlayType,omitempty"`
	TheoryReRates        float64  `protobuf:"fixed64,3,opt,name=TheoryReRates,proto3" json:"TheoryReRates,omitempty"`
	Consume              int64    `protobuf:"varint,4,opt,name=Consume,proto3" json:"Consume,omitempty"`
	SavgGain             int32    `protobuf:"varint,5,opt,name=SavgGain,proto3" json:"SavgGain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameLogReturnRatesAddReq) Reset()         { *m = GameLogReturnRatesAddReq{} }
func (m *GameLogReturnRatesAddReq) String() string { return proto.CompactTextString(m) }
func (*GameLogReturnRatesAddReq) ProtoMessage()    {}
func (*GameLogReturnRatesAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *GameLogReturnRatesAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameLogReturnRatesAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameLogReturnRatesAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameLogReturnRatesAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameLogReturnRatesAddReq.Merge(m, src)
}
func (m *GameLogReturnRatesAddReq) XXX_Size() int {
	return m.Size()
}
func (m *GameLogReturnRatesAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GameLogReturnRatesAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_GameLogReturnRatesAddReq proto.InternalMessageInfo

type GiftTicketUserTicketUpdateReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Amount               int32    `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	IP                   string   `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	Memo                 string   `protobuf:"bytes,4,opt,name=Memo,proto3" json:"Memo,omitempty"`
	SourceType           int32    `protobuf:"varint,5,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	GameID               int32    `protobuf:"varint,6,opt,name=GameID,proto3" json:"GameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftTicketUserTicketUpdateReq) Reset()         { *m = GiftTicketUserTicketUpdateReq{} }
func (m *GiftTicketUserTicketUpdateReq) String() string { return proto.CompactTextString(m) }
func (*GiftTicketUserTicketUpdateReq) ProtoMessage()    {}
func (*GiftTicketUserTicketUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *GiftTicketUserTicketUpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftTicketUserTicketUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftTicketUserTicketUpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftTicketUserTicketUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftTicketUserTicketUpdateReq.Merge(m, src)
}
func (m *GiftTicketUserTicketUpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *GiftTicketUserTicketUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftTicketUserTicketUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GiftTicketUserTicketUpdateReq proto.InternalMessageInfo

type GiftTicketUserTicketUpdateRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UserID               int32    `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CurrentTicket        int32    `protobuf:"varint,4,opt,name=CurrentTicket,proto3" json:"CurrentTicket,omitempty"`
	DBMsg                string   `protobuf:"bytes,5,opt,name=DBMsg,proto3" json:"DBMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftTicketUserTicketUpdateRsp) Reset()         { *m = GiftTicketUserTicketUpdateRsp{} }
func (m *GiftTicketUserTicketUpdateRsp) String() string { return proto.CompactTextString(m) }
func (*GiftTicketUserTicketUpdateRsp) ProtoMessage()    {}
func (*GiftTicketUserTicketUpdateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *GiftTicketUserTicketUpdateRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftTicketUserTicketUpdateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftTicketUserTicketUpdateRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftTicketUserTicketUpdateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftTicketUserTicketUpdateRsp.Merge(m, src)
}
func (m *GiftTicketUserTicketUpdateRsp) XXX_Size() int {
	return m.Size()
}
func (m *GiftTicketUserTicketUpdateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftTicketUserTicketUpdateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GiftTicketUserTicketUpdateRsp proto.InternalMessageInfo

type AwardUserTelephoneBillReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Phone                string   `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Par                  int32    `protobuf:"varint,3,opt,name=Par,proto3" json:"Par,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Sign                 int32    `protobuf:"varint,5,opt,name=Sign,proto3" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AwardUserTelephoneBillReq) Reset()         { *m = AwardUserTelephoneBillReq{} }
func (m *AwardUserTelephoneBillReq) String() string { return proto.CompactTextString(m) }
func (*AwardUserTelephoneBillReq) ProtoMessage()    {}
func (*AwardUserTelephoneBillReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *AwardUserTelephoneBillReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwardUserTelephoneBillReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwardUserTelephoneBillReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwardUserTelephoneBillReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwardUserTelephoneBillReq.Merge(m, src)
}
func (m *AwardUserTelephoneBillReq) XXX_Size() int {
	return m.Size()
}
func (m *AwardUserTelephoneBillReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AwardUserTelephoneBillReq.DiscardUnknown(m)
}

var xxx_messageInfo_AwardUserTelephoneBillReq proto.InternalMessageInfo

// 每局日志
type EveryGameLogReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID" validate:"required"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID" validate:"required"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID" validate:"required"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID" validate:"required"`
	TableID              string   `protobuf:"bytes,5,opt,name=TableID,proto3" json:"TableID" validate:"required"`
	Money                string   `protobuf:"bytes,6,opt,name=Money,proto3" json:"Money" validate:"required"`
	Gameno               string   `protobuf:"bytes,7,opt,name=Gameno,proto3" json:"Gameno" validate:"required"`
	Chairno              string   `protobuf:"bytes,8,opt,name=Chairno,proto3" json:"Chairno" validate:"required"`
	Tax                  string   `protobuf:"bytes,9,opt,name=Tax,proto3" json:"Tax" validate:"required"`
	Balance              string   `protobuf:"bytes,10,opt,name=Balance,proto3" json:"Balance" validate:"required"`
	Iscoingame           string   `protobuf:"bytes,11,opt,name=Iscoingame,proto3" json:"Iscoingame" validate:"required"`
	BIsTrusteeship       string   `protobuf:"bytes,12,opt,name=BIsTrusteeship,proto3" json:"BIsTrusteeship" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EveryGameLogReq) Reset()         { *m = EveryGameLogReq{} }
func (m *EveryGameLogReq) String() string { return proto.CompactTextString(m) }
func (*EveryGameLogReq) ProtoMessage()    {}
func (*EveryGameLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}
func (m *EveryGameLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EveryGameLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EveryGameLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EveryGameLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EveryGameLogReq.Merge(m, src)
}
func (m *EveryGameLogReq) XXX_Size() int {
	return m.Size()
}
func (m *EveryGameLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EveryGameLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_EveryGameLogReq proto.InternalMessageInfo

// 俱乐部每局日志
type ClubEveryGameLogReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlayID               string   `protobuf:"bytes,5,opt,name=PlayID,proto3" json:"PlayID,omitempty"`
	TableID              string   `protobuf:"bytes,6,opt,name=TableID,proto3" json:"TableID,omitempty"`
	Chairno              string   `protobuf:"bytes,7,opt,name=Chairno,proto3" json:"Chairno,omitempty"`
	Gameno               string   `protobuf:"bytes,8,opt,name=Gameno,proto3" json:"Gameno,omitempty"`
	TotalRound           string   `protobuf:"bytes,9,opt,name=TotalRound,proto3" json:"TotalRound,omitempty"`
	CurrentRound         string   `protobuf:"bytes,10,opt,name=CurrentRound,proto3" json:"CurrentRound,omitempty"`
	Money                string   `protobuf:"bytes,11,opt,name=Money,proto3" json:"Money,omitempty"`
	Balance              string   `protobuf:"bytes,12,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Tax                  string   `protobuf:"bytes,13,opt,name=Tax,proto3" json:"Tax,omitempty"`
	DeductType           string   `protobuf:"bytes,14,opt,name=DeductType,proto3" json:"DeductType,omitempty"`
	PaymentUserId        string   `protobuf:"bytes,15,opt,name=PaymentUserId,proto3" json:"PaymentUserId,omitempty"`
	IsTrusteeship        string   `protobuf:"bytes,16,opt,name=IsTrusteeship,proto3" json:"IsTrusteeship,omitempty"`
	ClubID               string   `protobuf:"bytes,17,opt,name=ClubID,proto3" json:"ClubID,omitempty"`
	ClientSource         string   `protobuf:"bytes,18,opt,name=ClientSource,proto3" json:"ClientSource,omitempty"`
	RoomNum              string   `protobuf:"bytes,19,opt,name=RoomNum,proto3" json:"RoomNum,omitempty"`
	LittleGameNo         string   `protobuf:"bytes,20,opt,name=LittleGameNo,proto3" json:"LittleGameNo,omitempty"`
	RoomUserId           string   `protobuf:"bytes,21,opt,name=RoomUserId,proto3" json:"RoomUserId,omitempty"`
	BeginTime            string   `protobuf:"bytes,22,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime              string   `protobuf:"bytes,23,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	IsAutoCreateRoom     string   `protobuf:"bytes,24,opt,name=IsAutoCreateRoom,proto3" json:"IsAutoCreateRoom,omitempty"`
	PayRoomCardNum       string   `protobuf:"bytes,25,opt,name=PayRoomCardNum,proto3" json:"PayRoomCardNum,omitempty"`
	PiecrustNum          string   `protobuf:"bytes,26,opt,name=PiecrustNum,proto3" json:"PiecrustNum,omitempty"`
	TakeInLimitNum       string   `protobuf:"bytes,27,opt,name=TakeInLimitNum,proto3" json:"TakeInLimitNum,omitempty"`
	TakeInType           string   `protobuf:"bytes,28,opt,name=TakeInType,proto3" json:"TakeInType,omitempty"`
	UserNickName         string   `protobuf:"bytes,29,opt,name=UserNickName,proto3" json:"UserNickName,omitempty"`
	RoomUserNickName     string   `protobuf:"bytes,30,opt,name=RoomUserNickName,proto3" json:"RoomUserNickName,omitempty"`
	PaymentUserNickName  string   `protobuf:"bytes,31,opt,name=PaymentUserNickName,proto3" json:"PaymentUserNickName,omitempty"`
	PlayerMaxNum         string   `protobuf:"bytes,32,opt,name=PlayerMaxNum,proto3" json:"PlayerMaxNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClubEveryGameLogReq) Reset()         { *m = ClubEveryGameLogReq{} }
func (m *ClubEveryGameLogReq) String() string { return proto.CompactTextString(m) }
func (*ClubEveryGameLogReq) ProtoMessage()    {}
func (*ClubEveryGameLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}
func (m *ClubEveryGameLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClubEveryGameLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClubEveryGameLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClubEveryGameLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClubEveryGameLogReq.Merge(m, src)
}
func (m *ClubEveryGameLogReq) XXX_Size() int {
	return m.Size()
}
func (m *ClubEveryGameLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClubEveryGameLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClubEveryGameLogReq proto.InternalMessageInfo

type ClubEveryGameLogRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	GameLogID            int32    `protobuf:"varint,3,opt,name=GameLogID,proto3" json:"GameLogID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClubEveryGameLogRsp) Reset()         { *m = ClubEveryGameLogRsp{} }
func (m *ClubEveryGameLogRsp) String() string { return proto.CompactTextString(m) }
func (*ClubEveryGameLogRsp) ProtoMessage()    {}
func (*ClubEveryGameLogRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}
func (m *ClubEveryGameLogRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClubEveryGameLogRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClubEveryGameLogRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClubEveryGameLogRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClubEveryGameLogRsp.Merge(m, src)
}
func (m *ClubEveryGameLogRsp) XXX_Size() int {
	return m.Size()
}
func (m *ClubEveryGameLogRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClubEveryGameLogRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClubEveryGameLogRsp proto.InternalMessageInfo

// 删除最后金币记录
type RemoveUserLastMoneyReq struct {
	PlayerID             string   `protobuf:"bytes,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveUserLastMoneyReq) Reset()         { *m = RemoveUserLastMoneyReq{} }
func (m *RemoveUserLastMoneyReq) String() string { return proto.CompactTextString(m) }
func (*RemoveUserLastMoneyReq) ProtoMessage()    {}
func (*RemoveUserLastMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}
func (m *RemoveUserLastMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveUserLastMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveUserLastMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveUserLastMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUserLastMoneyReq.Merge(m, src)
}
func (m *RemoveUserLastMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveUserLastMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUserLastMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUserLastMoneyReq proto.InternalMessageInfo

// vip点
type SaveVipPointReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             string   `protobuf:"bytes,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Score                string   `protobuf:"bytes,5,opt,name=Score,proto3" json:"Score,omitempty"`
	IP                   string   `protobuf:"bytes,6,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveVipPointReq) Reset()         { *m = SaveVipPointReq{} }
func (m *SaveVipPointReq) String() string { return proto.CompactTextString(m) }
func (*SaveVipPointReq) ProtoMessage()    {}
func (*SaveVipPointReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}
func (m *SaveVipPointReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveVipPointReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveVipPointReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveVipPointReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveVipPointReq.Merge(m, src)
}
func (m *SaveVipPointReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveVipPointReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveVipPointReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveVipPointReq proto.InternalMessageInfo

// vip
type GetVipInfoReq struct {
	PlayerID             string   `protobuf:"bytes,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVipInfoReq) Reset()         { *m = GetVipInfoReq{} }
func (m *GetVipInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetVipInfoReq) ProtoMessage()    {}
func (*GetVipInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}
func (m *GetVipInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVipInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVipInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVipInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVipInfoReq.Merge(m, src)
}
func (m *GetVipInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVipInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVipInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVipInfoReq proto.InternalMessageInfo

type GetVipInfoRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Grade                int32    `protobuf:"varint,3,opt,name=grade,proto3" json:"grade,omitempty"`
	Score                float64  `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
	FrequenterScore      float64  `protobuf:"fixed64,5,opt,name=frequenterScore,proto3" json:"frequenterScore,omitempty"`
	AdvDays              int32    `protobuf:"varint,6,opt,name=advDays,proto3" json:"advDays,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVipInfoRsp) Reset()         { *m = GetVipInfoRsp{} }
func (m *GetVipInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GetVipInfoRsp) ProtoMessage()    {}
func (*GetVipInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}
func (m *GetVipInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVipInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVipInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVipInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVipInfoRsp.Merge(m, src)
}
func (m *GetVipInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetVipInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVipInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetVipInfoRsp proto.InternalMessageInfo

type UserInfoVipGetReq struct {
	GameID               string   `protobuf:"bytes,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfoVipGetReq) Reset()         { *m = UserInfoVipGetReq{} }
func (m *UserInfoVipGetReq) String() string { return proto.CompactTextString(m) }
func (*UserInfoVipGetReq) ProtoMessage()    {}
func (*UserInfoVipGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}
func (m *UserInfoVipGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoVipGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoVipGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoVipGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoVipGetReq.Merge(m, src)
}
func (m *UserInfoVipGetReq) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoVipGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoVipGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoVipGetReq proto.InternalMessageInfo

type UserInfoVipGetRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SupuserID            int32    `protobuf:"varint,3,opt,name=supuserID,proto3" json:"supuserID,omitempty"`
	SupsuserID           int32    `protobuf:"varint,4,opt,name=supsuserID,proto3" json:"supsuserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfoVipGetRsp) Reset()         { *m = UserInfoVipGetRsp{} }
func (m *UserInfoVipGetRsp) String() string { return proto.CompactTextString(m) }
func (*UserInfoVipGetRsp) ProtoMessage()    {}
func (*UserInfoVipGetRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}
func (m *UserInfoVipGetRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoVipGetRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoVipGetRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoVipGetRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoVipGetRsp.Merge(m, src)
}
func (m *UserInfoVipGetRsp) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoVipGetRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoVipGetRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoVipGetRsp proto.InternalMessageInfo

//玩家游戏中消耗金币或者扩展货币数量变化
type PlayerConsumeReq struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GameID               string   `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`
	CoinType             string   `protobuf:"bytes,3,opt,name=coinType,proto3" json:"coinType,omitempty"`
	CoinValue            string   `protobuf:"bytes,4,opt,name=coinValue,proto3" json:"coinValue,omitempty"`
	Ip                   string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	RoomSN               string   `protobuf:"bytes,6,opt,name=roomSN,proto3" json:"roomSN,omitempty"`
	CoinCnt              string   `protobuf:"bytes,7,opt,name=coinCnt,proto3" json:"coinCnt,omitempty"`
	Round                string   `protobuf:"bytes,8,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerConsumeReq) Reset()         { *m = PlayerConsumeReq{} }
func (m *PlayerConsumeReq) String() string { return proto.CompactTextString(m) }
func (*PlayerConsumeReq) ProtoMessage()    {}
func (*PlayerConsumeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}
func (m *PlayerConsumeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerConsumeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerConsumeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerConsumeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerConsumeReq.Merge(m, src)
}
func (m *PlayerConsumeReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayerConsumeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerConsumeReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerConsumeReq proto.InternalMessageInfo

//玩家输赢信息
type PlayerGameInfoReq struct {
	UserIDs              string   `protobuf:"bytes,1,opt,name=userIDs,proto3" json:"userIDs,omitempty"`
	GameID               string   `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerGameInfoReq) Reset()         { *m = PlayerGameInfoReq{} }
func (m *PlayerGameInfoReq) String() string { return proto.CompactTextString(m) }
func (*PlayerGameInfoReq) ProtoMessage()    {}
func (*PlayerGameInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}
func (m *PlayerGameInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerGameInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerGameInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerGameInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerGameInfoReq.Merge(m, src)
}
func (m *PlayerGameInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayerGameInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerGameInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerGameInfoReq proto.InternalMessageInfo

type TagPlayerGameInfo struct {
	UserID               int32    `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	WinCount             int32    `protobuf:"varint,2,opt,name=winCount,proto3" json:"winCount,omitempty"`
	LoseCount            int32    `protobuf:"varint,3,opt,name=loseCount,proto3" json:"loseCount,omitempty"`
	DrawCount            int32    `protobuf:"varint,4,opt,name=drawCount,proto3" json:"drawCount,omitempty"`
	FleeCount            int32    `protobuf:"varint,5,opt,name=fleeCount,proto3" json:"fleeCount,omitempty"`
	Score                int32    `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	RightID              int32    `protobuf:"varint,7,opt,name=rightID,proto3" json:"rightID,omitempty"`
	Score2               int64    `protobuf:"varint,8,opt,name=score2,proto3" json:"score2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagPlayerGameInfo) Reset()         { *m = TagPlayerGameInfo{} }
func (m *TagPlayerGameInfo) String() string { return proto.CompactTextString(m) }
func (*TagPlayerGameInfo) ProtoMessage()    {}
func (*TagPlayerGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}
func (m *TagPlayerGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagPlayerGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagPlayerGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagPlayerGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagPlayerGameInfo.Merge(m, src)
}
func (m *TagPlayerGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *TagPlayerGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TagPlayerGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TagPlayerGameInfo proto.InternalMessageInfo

type PlayerGameInfoRsp struct {
	Code                 int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Infos                []*TagPlayerGameInfo `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PlayerGameInfoRsp) Reset()         { *m = PlayerGameInfoRsp{} }
func (m *PlayerGameInfoRsp) String() string { return proto.CompactTextString(m) }
func (*PlayerGameInfoRsp) ProtoMessage()    {}
func (*PlayerGameInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}
func (m *PlayerGameInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerGameInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerGameInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerGameInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerGameInfoRsp.Merge(m, src)
}
func (m *PlayerGameInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *PlayerGameInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerGameInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerGameInfoRsp proto.InternalMessageInfo

type PlayerArenaInfoReq struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GameID               string   `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,3,opt,name=arenaID,proto3" json:"arenaID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerArenaInfoReq) Reset()         { *m = PlayerArenaInfoReq{} }
func (m *PlayerArenaInfoReq) String() string { return proto.CompactTextString(m) }
func (*PlayerArenaInfoReq) ProtoMessage()    {}
func (*PlayerArenaInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}
func (m *PlayerArenaInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerArenaInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerArenaInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerArenaInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerArenaInfoReq.Merge(m, src)
}
func (m *PlayerArenaInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayerArenaInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerArenaInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerArenaInfoReq proto.InternalMessageInfo

type PlayerArenaInfoRsp struct {
	Code                 int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Info                 *TagPlayerGameInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PlayerArenaInfoRsp) Reset()         { *m = PlayerArenaInfoRsp{} }
func (m *PlayerArenaInfoRsp) String() string { return proto.CompactTextString(m) }
func (*PlayerArenaInfoRsp) ProtoMessage()    {}
func (*PlayerArenaInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}
func (m *PlayerArenaInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerArenaInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerArenaInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerArenaInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerArenaInfoRsp.Merge(m, src)
}
func (m *PlayerArenaInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *PlayerArenaInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerArenaInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerArenaInfoRsp proto.InternalMessageInfo

type FrequentArgumentReq struct {
	SnGameId             int32    `protobuf:"varint,1,opt,name=snGameId,proto3" json:"snGameId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequentArgumentReq) Reset()         { *m = FrequentArgumentReq{} }
func (m *FrequentArgumentReq) String() string { return proto.CompactTextString(m) }
func (*FrequentArgumentReq) ProtoMessage()    {}
func (*FrequentArgumentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}
func (m *FrequentArgumentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequentArgumentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequentArgumentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrequentArgumentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequentArgumentReq.Merge(m, src)
}
func (m *FrequentArgumentReq) XXX_Size() int {
	return m.Size()
}
func (m *FrequentArgumentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequentArgumentReq.DiscardUnknown(m)
}

var xxx_messageInfo_FrequentArgumentReq proto.InternalMessageInfo

type FrequentArgumentRsp struct {
	N1StFreqArgu         int32    `protobuf:"varint,1,opt,name=n1stFreqArgu,proto3" json:"n1stFreqArgu,omitempty"`
	N2NdFreqArgu         int32    `protobuf:"varint,2,opt,name=n2ndFreqArgu,proto3" json:"n2ndFreqArgu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequentArgumentRsp) Reset()         { *m = FrequentArgumentRsp{} }
func (m *FrequentArgumentRsp) String() string { return proto.CompactTextString(m) }
func (*FrequentArgumentRsp) ProtoMessage()    {}
func (*FrequentArgumentRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}
func (m *FrequentArgumentRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequentArgumentRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequentArgumentRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrequentArgumentRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequentArgumentRsp.Merge(m, src)
}
func (m *FrequentArgumentRsp) XXX_Size() int {
	return m.Size()
}
func (m *FrequentArgumentRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequentArgumentRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FrequentArgumentRsp proto.InternalMessageInfo

type WebUpdateUserCashReq struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	SourceType           string   `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	WantedAmount         string   `protobuf:"bytes,3,opt,name=WantedAmount,proto3" json:"WantedAmount,omitempty"`
	IPAddress            string   `protobuf:"bytes,4,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	TaxAmount            string   `protobuf:"bytes,5,opt,name=TaxAmount,proto3" json:"TaxAmount,omitempty"`
	Remark               string   `protobuf:"bytes,6,opt,name=Remark,proto3" json:"Remark,omitempty"`
	MachineNumber        string   `protobuf:"bytes,7,opt,name=MachineNumber,proto3" json:"MachineNumber,omitempty"`
	IsWriteLog           string   `protobuf:"bytes,8,opt,name=IsWriteLog,proto3" json:"IsWriteLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebUpdateUserCashReq) Reset()         { *m = WebUpdateUserCashReq{} }
func (m *WebUpdateUserCashReq) String() string { return proto.CompactTextString(m) }
func (*WebUpdateUserCashReq) ProtoMessage()    {}
func (*WebUpdateUserCashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}
func (m *WebUpdateUserCashReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebUpdateUserCashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebUpdateUserCashReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebUpdateUserCashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebUpdateUserCashReq.Merge(m, src)
}
func (m *WebUpdateUserCashReq) XXX_Size() int {
	return m.Size()
}
func (m *WebUpdateUserCashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WebUpdateUserCashReq.DiscardUnknown(m)
}

var xxx_messageInfo_WebUpdateUserCashReq proto.InternalMessageInfo

type WebUpdateUserCashRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CurrentAmount        int64    `protobuf:"varint,3,opt,name=CurrentAmount,proto3" json:"CurrentAmount,omitempty"`
	ModifyAmount         int64    `protobuf:"varint,4,opt,name=ModifyAmount,proto3" json:"ModifyAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebUpdateUserCashRsp) Reset()         { *m = WebUpdateUserCashRsp{} }
func (m *WebUpdateUserCashRsp) String() string { return proto.CompactTextString(m) }
func (*WebUpdateUserCashRsp) ProtoMessage()    {}
func (*WebUpdateUserCashRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{60}
}
func (m *WebUpdateUserCashRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebUpdateUserCashRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebUpdateUserCashRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebUpdateUserCashRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebUpdateUserCashRsp.Merge(m, src)
}
func (m *WebUpdateUserCashRsp) XXX_Size() int {
	return m.Size()
}
func (m *WebUpdateUserCashRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_WebUpdateUserCashRsp.DiscardUnknown(m)
}

var xxx_messageInfo_WebUpdateUserCashRsp proto.InternalMessageInfo

type GameCutCardLogReq struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GameID               string   `protobuf:"bytes,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              string   `protobuf:"bytes,3,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	CutNum               string   `protobuf:"bytes,4,opt,name=CutNum,proto3" json:"CutNum,omitempty"`
	CoinType             string   `protobuf:"bytes,5,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	CutCoinNum           string   `protobuf:"bytes,6,opt,name=CutCoinNum,proto3" json:"CutCoinNum,omitempty"`
	SourceType           string   `protobuf:"bytes,7,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	CreateTime           string   `protobuf:"bytes,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameCutCardLogReq) Reset()         { *m = GameCutCardLogReq{} }
func (m *GameCutCardLogReq) String() string { return proto.CompactTextString(m) }
func (*GameCutCardLogReq) ProtoMessage()    {}
func (*GameCutCardLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{61}
}
func (m *GameCutCardLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameCutCardLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameCutCardLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameCutCardLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameCutCardLogReq.Merge(m, src)
}
func (m *GameCutCardLogReq) XXX_Size() int {
	return m.Size()
}
func (m *GameCutCardLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GameCutCardLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_GameCutCardLogReq proto.InternalMessageInfo

type AddMailInfoReq struct {
	Title                string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Users                string   `protobuf:"bytes,3,opt,name=Users,proto3" json:"Users,omitempty"`
	Reward               string   `protobuf:"bytes,4,opt,name=Reward,proto3" json:"Reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMailInfoReq) Reset()         { *m = AddMailInfoReq{} }
func (m *AddMailInfoReq) String() string { return proto.CompactTextString(m) }
func (*AddMailInfoReq) ProtoMessage()    {}
func (*AddMailInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{62}
}
func (m *AddMailInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMailInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMailInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMailInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMailInfoReq.Merge(m, src)
}
func (m *AddMailInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *AddMailInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMailInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMailInfoReq proto.InternalMessageInfo

type AddMailInfoRsp struct {
	MailID               int32    `protobuf:"varint,1,opt,name=MailID,proto3" json:"MailID,omitempty"`
	Users                string   `protobuf:"bytes,2,opt,name=Users,proto3" json:"Users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMailInfoRsp) Reset()         { *m = AddMailInfoRsp{} }
func (m *AddMailInfoRsp) String() string { return proto.CompactTextString(m) }
func (*AddMailInfoRsp) ProtoMessage()    {}
func (*AddMailInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{63}
}
func (m *AddMailInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMailInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMailInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMailInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMailInfoRsp.Merge(m, src)
}
func (m *AddMailInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddMailInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMailInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddMailInfoRsp proto.InternalMessageInfo

type SendMailInfoReq struct {
	MailID               int32    `protobuf:"varint,1,opt,name=MailID,proto3" json:"MailID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	StartTime            float64  `protobuf:"fixed64,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTIme              float64  `protobuf:"fixed64,4,opt,name=EndTIme,proto3" json:"EndTIme,omitempty"`
	SendType             int32    `protobuf:"varint,5,opt,name=SendType,proto3" json:"SendType,omitempty"`
	Users                string   `protobuf:"bytes,6,opt,name=Users,proto3" json:"Users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMailInfoReq) Reset()         { *m = SendMailInfoReq{} }
func (m *SendMailInfoReq) String() string { return proto.CompactTextString(m) }
func (*SendMailInfoReq) ProtoMessage()    {}
func (*SendMailInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{64}
}
func (m *SendMailInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMailInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMailInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMailInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailInfoReq.Merge(m, src)
}
func (m *SendMailInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *SendMailInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailInfoReq proto.InternalMessageInfo

type SendMailInfoRsp struct {
	Users                string   `protobuf:"bytes,1,opt,name=Users,proto3" json:"Users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMailInfoRsp) Reset()         { *m = SendMailInfoRsp{} }
func (m *SendMailInfoRsp) String() string { return proto.CompactTextString(m) }
func (*SendMailInfoRsp) ProtoMessage()    {}
func (*SendMailInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{65}
}
func (m *SendMailInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMailInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMailInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMailInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailInfoRsp.Merge(m, src)
}
func (m *SendMailInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *SendMailInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailInfoRsp proto.InternalMessageInfo

type CheckUserChargeReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	CheckType            int32    `protobuf:"varint,3,opt,name=CheckType,proto3" json:"CheckType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckUserChargeReq) Reset()         { *m = CheckUserChargeReq{} }
func (m *CheckUserChargeReq) String() string { return proto.CompactTextString(m) }
func (*CheckUserChargeReq) ProtoMessage()    {}
func (*CheckUserChargeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{66}
}
func (m *CheckUserChargeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckUserChargeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckUserChargeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckUserChargeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUserChargeReq.Merge(m, src)
}
func (m *CheckUserChargeReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckUserChargeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUserChargeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUserChargeReq proto.InternalMessageInfo

type CheckUserChargeRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result               bool     `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckUserChargeRsp) Reset()         { *m = CheckUserChargeRsp{} }
func (m *CheckUserChargeRsp) String() string { return proto.CompactTextString(m) }
func (*CheckUserChargeRsp) ProtoMessage()    {}
func (*CheckUserChargeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{67}
}
func (m *CheckUserChargeRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckUserChargeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckUserChargeRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckUserChargeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUserChargeRsp.Merge(m, src)
}
func (m *CheckUserChargeRsp) XXX_Size() int {
	return m.Size()
}
func (m *CheckUserChargeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUserChargeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUserChargeRsp proto.InternalMessageInfo

type CheckChargePropReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	PropID               int32    `protobuf:"varint,3,opt,name=PropID,proto3" json:"PropID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckChargePropReq) Reset()         { *m = CheckChargePropReq{} }
func (m *CheckChargePropReq) String() string { return proto.CompactTextString(m) }
func (*CheckChargePropReq) ProtoMessage()    {}
func (*CheckChargePropReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{68}
}
func (m *CheckChargePropReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckChargePropReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckChargePropReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckChargePropReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckChargePropReq.Merge(m, src)
}
func (m *CheckChargePropReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckChargePropReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckChargePropReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckChargePropReq proto.InternalMessageInfo

type CheckChargePropRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IsBYFlay             int32    `protobuf:"varint,3,opt,name=IsBYFlay,proto3" json:"IsBYFlay,omitempty"`
	LastBuyTime          string   `protobuf:"bytes,4,opt,name=LastBuyTime,proto3" json:"LastBuyTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckChargePropRsp) Reset()         { *m = CheckChargePropRsp{} }
func (m *CheckChargePropRsp) String() string { return proto.CompactTextString(m) }
func (*CheckChargePropRsp) ProtoMessage()    {}
func (*CheckChargePropRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{69}
}
func (m *CheckChargePropRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckChargePropRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckChargePropRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckChargePropRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckChargePropRsp.Merge(m, src)
}
func (m *CheckChargePropRsp) XXX_Size() int {
	return m.Size()
}
func (m *CheckChargePropRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckChargePropRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckChargePropRsp proto.InternalMessageInfo

type GetUserBestResultReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserBestResultReq) Reset()         { *m = GetUserBestResultReq{} }
func (m *GetUserBestResultReq) String() string { return proto.CompactTextString(m) }
func (*GetUserBestResultReq) ProtoMessage()    {}
func (*GetUserBestResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{70}
}
func (m *GetUserBestResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserBestResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserBestResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserBestResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserBestResultReq.Merge(m, src)
}
func (m *GetUserBestResultReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserBestResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserBestResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserBestResultReq proto.InternalMessageInfo

type GetUserBestResultRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserBestResultRsp) Reset()         { *m = GetUserBestResultRsp{} }
func (m *GetUserBestResultRsp) String() string { return proto.CompactTextString(m) }
func (*GetUserBestResultRsp) ProtoMessage()    {}
func (*GetUserBestResultRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{71}
}
func (m *GetUserBestResultRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserBestResultRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserBestResultRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserBestResultRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserBestResultRsp.Merge(m, src)
}
func (m *GetUserBestResultRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetUserBestResultRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserBestResultRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserBestResultRsp proto.InternalMessageInfo

type UpdateUserBestResultReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateUserBestResultReq) Reset()         { *m = UpdateUserBestResultReq{} }
func (m *UpdateUserBestResultReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserBestResultReq) ProtoMessage()    {}
func (*UpdateUserBestResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{72}
}
func (m *UpdateUserBestResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserBestResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserBestResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserBestResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserBestResultReq.Merge(m, src)
}
func (m *UpdateUserBestResultReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserBestResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserBestResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserBestResultReq proto.InternalMessageInfo

//插入翻翻翻日志
type InsertCommonLogReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	AreanID              int32    `protobuf:"varint,2,opt,name=AreanID,proto3" json:"AreanID,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Log                  string   `protobuf:"bytes,4,opt,name=Log,proto3" json:"Log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertCommonLogReq) Reset()         { *m = InsertCommonLogReq{} }
func (m *InsertCommonLogReq) String() string { return proto.CompactTextString(m) }
func (*InsertCommonLogReq) ProtoMessage()    {}
func (*InsertCommonLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{73}
}
func (m *InsertCommonLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertCommonLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertCommonLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertCommonLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertCommonLogReq.Merge(m, src)
}
func (m *InsertCommonLogReq) XXX_Size() int {
	return m.Size()
}
func (m *InsertCommonLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertCommonLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_InsertCommonLogReq proto.InternalMessageInfo

//查询翻翻翻日志
type QueryCommonLogReq struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GameID               int32    `protobuf:"varint,2,opt,name=GameID,proto3" json:"GameID,omitempty"`
	LogType              int32    `protobuf:"varint,3,opt,name=LogType,proto3" json:"LogType,omitempty"`
	StartTime            string   `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              string   `protobuf:"bytes,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryCommonLogReq) Reset()         { *m = QueryCommonLogReq{} }
func (m *QueryCommonLogReq) String() string { return proto.CompactTextString(m) }
func (*QueryCommonLogReq) ProtoMessage()    {}
func (*QueryCommonLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{74}
}
func (m *QueryCommonLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommonLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommonLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommonLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommonLogReq.Merge(m, src)
}
func (m *QueryCommonLogReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommonLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommonLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommonLogReq proto.InternalMessageInfo

type QueryCommonLogRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Logs                 []string `protobuf:"bytes,3,rep,name=Logs,proto3" json:"Logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryCommonLogRsp) Reset()         { *m = QueryCommonLogRsp{} }
func (m *QueryCommonLogRsp) String() string { return proto.CompactTextString(m) }
func (*QueryCommonLogRsp) ProtoMessage()    {}
func (*QueryCommonLogRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{75}
}
func (m *QueryCommonLogRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommonLogRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommonLogRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommonLogRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommonLogRsp.Merge(m, src)
}
func (m *QueryCommonLogRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommonLogRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommonLogRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommonLogRsp proto.InternalMessageInfo

type GetRobotReq struct {
	IsVisitorRoom        bool     `protobuf:"varint,1,opt,name=isVisitorRoom,proto3" json:"isVisitorRoom,omitempty"`
	MinCoin              int64    `protobuf:"varint,2,opt,name=minCoin,proto3" json:"minCoin,omitempty"`
	MaxCoin              int64    `protobuf:"varint,3,opt,name=maxCoin,proto3" json:"maxCoin,omitempty"`
	INum                 int32    `protobuf:"varint,4,opt,name=iNum,proto3" json:"iNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRobotReq) Reset()         { *m = GetRobotReq{} }
func (m *GetRobotReq) String() string { return proto.CompactTextString(m) }
func (*GetRobotReq) ProtoMessage()    {}
func (*GetRobotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{76}
}
func (m *GetRobotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRobotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRobotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRobotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRobotReq.Merge(m, src)
}
func (m *GetRobotReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRobotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRobotReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRobotReq proto.InternalMessageInfo

type GetRobotRsp struct {
	Records              []*GetRobotsRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetRobotRsp) Reset()         { *m = GetRobotRsp{} }
func (m *GetRobotRsp) String() string { return proto.CompactTextString(m) }
func (*GetRobotRsp) ProtoMessage()    {}
func (*GetRobotRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{77}
}
func (m *GetRobotRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRobotRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRobotRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRobotRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRobotRsp.Merge(m, src)
}
func (m *GetRobotRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetRobotRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRobotRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRobotRsp proto.InternalMessageInfo

type GetRobotsRecord struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Ceritification       string   `protobuf:"bytes,3,opt,name=ceritification,proto3" json:"ceritification,omitempty"`
	HeadUrl              string   `protobuf:"bytes,4,opt,name=headUrl,proto3" json:"headUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRobotsRecord) Reset()         { *m = GetRobotsRecord{} }
func (m *GetRobotsRecord) String() string { return proto.CompactTextString(m) }
func (*GetRobotsRecord) ProtoMessage()    {}
func (*GetRobotsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{78}
}
func (m *GetRobotsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRobotsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRobotsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRobotsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRobotsRecord.Merge(m, src)
}
func (m *GetRobotsRecord) XXX_Size() int {
	return m.Size()
}
func (m *GetRobotsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRobotsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_GetRobotsRecord proto.InternalMessageInfo

type UpdateRobotReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Money                int64    `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRobotReq) Reset()         { *m = UpdateRobotReq{} }
func (m *UpdateRobotReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRobotReq) ProtoMessage()    {}
func (*UpdateRobotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{79}
}
func (m *UpdateRobotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRobotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRobotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRobotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRobotReq.Merge(m, src)
}
func (m *UpdateRobotReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRobotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRobotReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRobotReq proto.InternalMessageInfo

type UpdateRobotRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRobotRsp) Reset()         { *m = UpdateRobotRsp{} }
func (m *UpdateRobotRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateRobotRsp) ProtoMessage()    {}
func (*UpdateRobotRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{80}
}
func (m *UpdateRobotRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRobotRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRobotRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRobotRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRobotRsp.Merge(m, src)
}
func (m *UpdateRobotRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRobotRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRobotRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRobotRsp proto.InternalMessageInfo

type GetMultiUserMoneyReq struct {
	UserIDs              string   `protobuf:"bytes,1,opt,name=userIDs,proto3" json:"userIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMultiUserMoneyReq) Reset()         { *m = GetMultiUserMoneyReq{} }
func (m *GetMultiUserMoneyReq) String() string { return proto.CompactTextString(m) }
func (*GetMultiUserMoneyReq) ProtoMessage()    {}
func (*GetMultiUserMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{81}
}
func (m *GetMultiUserMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiUserMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiUserMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMultiUserMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiUserMoneyReq.Merge(m, src)
}
func (m *GetMultiUserMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiUserMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiUserMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiUserMoneyReq proto.InternalMessageInfo

type GetMultiUserMoneyRsp struct {
	UserMoneyInfos       []*MultiUserMoney `protobuf:"bytes,1,rep,name=userMoneyInfos,proto3" json:"userMoneyInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMultiUserMoneyRsp) Reset()         { *m = GetMultiUserMoneyRsp{} }
func (m *GetMultiUserMoneyRsp) String() string { return proto.CompactTextString(m) }
func (*GetMultiUserMoneyRsp) ProtoMessage()    {}
func (*GetMultiUserMoneyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{82}
}
func (m *GetMultiUserMoneyRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiUserMoneyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiUserMoneyRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMultiUserMoneyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiUserMoneyRsp.Merge(m, src)
}
func (m *GetMultiUserMoneyRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiUserMoneyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiUserMoneyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiUserMoneyRsp proto.InternalMessageInfo

type MultiUserMoney struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Money                int64    `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiUserMoney) Reset()         { *m = MultiUserMoney{} }
func (m *MultiUserMoney) String() string { return proto.CompactTextString(m) }
func (*MultiUserMoney) ProtoMessage()    {}
func (*MultiUserMoney) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{83}
}
func (m *MultiUserMoney) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiUserMoney) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiUserMoney.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiUserMoney) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiUserMoney.Merge(m, src)
}
func (m *MultiUserMoney) XXX_Size() int {
	return m.Size()
}
func (m *MultiUserMoney) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiUserMoney.DiscardUnknown(m)
}

var xxx_messageInfo_MultiUserMoney proto.InternalMessageInfo

type GetMultiUserGameInfoReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=gameID,proto3" json:"gameID,omitempty"`
	UserIDs              string   `protobuf:"bytes,2,opt,name=userIDs,proto3" json:"userIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMultiUserGameInfoReq) Reset()         { *m = GetMultiUserGameInfoReq{} }
func (m *GetMultiUserGameInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetMultiUserGameInfoReq) ProtoMessage()    {}
func (*GetMultiUserGameInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{84}
}
func (m *GetMultiUserGameInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiUserGameInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiUserGameInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMultiUserGameInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiUserGameInfoReq.Merge(m, src)
}
func (m *GetMultiUserGameInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiUserGameInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiUserGameInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiUserGameInfoReq proto.InternalMessageInfo

type GetMultiUserGameInfoRsp struct {
	MultiUserInfos       []*GetMultiUserGameInfo `protobuf:"bytes,1,rep,name=multiUserInfos,proto3" json:"multiUserInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetMultiUserGameInfoRsp) Reset()         { *m = GetMultiUserGameInfoRsp{} }
func (m *GetMultiUserGameInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GetMultiUserGameInfoRsp) ProtoMessage()    {}
func (*GetMultiUserGameInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{85}
}
func (m *GetMultiUserGameInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiUserGameInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiUserGameInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMultiUserGameInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiUserGameInfoRsp.Merge(m, src)
}
func (m *GetMultiUserGameInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiUserGameInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiUserGameInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiUserGameInfoRsp proto.InternalMessageInfo

type GetMultiUserGameInfo struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	WinCount             int32    `protobuf:"varint,2,opt,name=winCount,proto3" json:"winCount,omitempty"`
	LoseCount            int32    `protobuf:"varint,3,opt,name=loseCount,proto3" json:"loseCount,omitempty"`
	DrawCount            int32    `protobuf:"varint,4,opt,name=drawCount,proto3" json:"drawCount,omitempty"`
	FleeCount            int32    `protobuf:"varint,5,opt,name=fleeCount,proto3" json:"fleeCount,omitempty"`
	RightID              int32    `protobuf:"varint,6,opt,name=rightID,proto3" json:"rightID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMultiUserGameInfo) Reset()         { *m = GetMultiUserGameInfo{} }
func (m *GetMultiUserGameInfo) String() string { return proto.CompactTextString(m) }
func (*GetMultiUserGameInfo) ProtoMessage()    {}
func (*GetMultiUserGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{86}
}
func (m *GetMultiUserGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiUserGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiUserGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMultiUserGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiUserGameInfo.Merge(m, src)
}
func (m *GetMultiUserGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiUserGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiUserGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiUserGameInfo proto.InternalMessageInfo

type RobotInfo struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Ceritification       string   `protobuf:"bytes,3,opt,name=ceritification,proto3" json:"ceritification,omitempty"`
	HeadUrl              string   `protobuf:"bytes,4,opt,name=headUrl,proto3" json:"headUrl,omitempty"`
	Money                int64    `protobuf:"varint,5,opt,name=money,proto3" json:"money,omitempty"`
	WinCount             int32    `protobuf:"varint,6,opt,name=winCount,proto3" json:"winCount,omitempty"`
	LoseCount            int32    `protobuf:"varint,7,opt,name=loseCount,proto3" json:"loseCount,omitempty"`
	DrawCount            int32    `protobuf:"varint,8,opt,name=drawCount,proto3" json:"drawCount,omitempty"`
	FleeCount            int32    `protobuf:"varint,9,opt,name=fleeCount,proto3" json:"fleeCount,omitempty"`
	RightID              int32    `protobuf:"varint,10,opt,name=rightID,proto3" json:"rightID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotInfo) Reset()         { *m = RobotInfo{} }
func (m *RobotInfo) String() string { return proto.CompactTextString(m) }
func (*RobotInfo) ProtoMessage()    {}
func (*RobotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{87}
}
func (m *RobotInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobotInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotInfo.Merge(m, src)
}
func (m *RobotInfo) XXX_Size() int {
	return m.Size()
}
func (m *RobotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RobotInfo proto.InternalMessageInfo

type QueryTridentWinRecordReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	TopNum               int32    `protobuf:"varint,2,opt,name=TopNum,proto3" json:"TopNum,omitempty"`
	BeginDate            string   `protobuf:"bytes,3,opt,name=BeginDate,proto3" json:"BeginDate,omitempty"`
	EndDate              string   `protobuf:"bytes,4,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTridentWinRecordReq) Reset()         { *m = QueryTridentWinRecordReq{} }
func (m *QueryTridentWinRecordReq) String() string { return proto.CompactTextString(m) }
func (*QueryTridentWinRecordReq) ProtoMessage()    {}
func (*QueryTridentWinRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{88}
}
func (m *QueryTridentWinRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTridentWinRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTridentWinRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTridentWinRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTridentWinRecordReq.Merge(m, src)
}
func (m *QueryTridentWinRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryTridentWinRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTridentWinRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTridentWinRecordReq proto.InternalMessageInfo

type TridentWinRecord struct {
	NDBID                int32    `protobuf:"varint,1,opt,name=nDBID,proto3" json:"nDBID" validate:"required"`
	SzNickName           string   `protobuf:"bytes,2,opt,name=szNickName,proto3" json:"szNickName" validate:"required"`
	SzDateTime           string   `protobuf:"bytes,3,opt,name=szDateTime,proto3" json:"szDateTime" validate:"required"`
	NNewRecord           int32    `protobuf:"varint,4,opt,name=nNewRecord,proto3" json:"nNewRecord" validate:"required"`
	LlTick               int64    `protobuf:"varint,5,opt,name=llTick,proto3" json:"llTick" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TridentWinRecord) Reset()         { *m = TridentWinRecord{} }
func (m *TridentWinRecord) String() string { return proto.CompactTextString(m) }
func (*TridentWinRecord) ProtoMessage()    {}
func (*TridentWinRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{89}
}
func (m *TridentWinRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TridentWinRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TridentWinRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TridentWinRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TridentWinRecord.Merge(m, src)
}
func (m *TridentWinRecord) XXX_Size() int {
	return m.Size()
}
func (m *TridentWinRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TridentWinRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TridentWinRecord proto.InternalMessageInfo

type QueryTridentWinRecordRsp struct {
	Code                 int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TridentWinRecords    []*TridentWinRecord `protobuf:"bytes,3,rep,name=TridentWinRecords,proto3" json:"TridentWinRecords,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *QueryTridentWinRecordRsp) Reset()         { *m = QueryTridentWinRecordRsp{} }
func (m *QueryTridentWinRecordRsp) String() string { return proto.CompactTextString(m) }
func (*QueryTridentWinRecordRsp) ProtoMessage()    {}
func (*QueryTridentWinRecordRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{90}
}
func (m *QueryTridentWinRecordRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTridentWinRecordRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTridentWinRecordRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTridentWinRecordRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTridentWinRecordRsp.Merge(m, src)
}
func (m *QueryTridentWinRecordRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryTridentWinRecordRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTridentWinRecordRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTridentWinRecordRsp proto.InternalMessageInfo

type InsetTridentWinRecordReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	UserDBID             int32    `protobuf:"varint,2,opt,name=UserDBID,proto3" json:"UserDBID,omitempty"`
	WinNum               int32    `protobuf:"varint,3,opt,name=WinNum,proto3" json:"WinNum,omitempty"`
	NickName             string   `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsetTridentWinRecordReq) Reset()         { *m = InsetTridentWinRecordReq{} }
func (m *InsetTridentWinRecordReq) String() string { return proto.CompactTextString(m) }
func (*InsetTridentWinRecordReq) ProtoMessage()    {}
func (*InsetTridentWinRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{91}
}
func (m *InsetTridentWinRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsetTridentWinRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsetTridentWinRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsetTridentWinRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsetTridentWinRecordReq.Merge(m, src)
}
func (m *InsetTridentWinRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *InsetTridentWinRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InsetTridentWinRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_InsetTridentWinRecordReq proto.InternalMessageInfo

// 消耗统计
type OnUpdateConsumeStatReq struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	ArenaID              int32    `protobuf:"varint,2,opt,name=ArenaID,proto3" json:"ArenaID,omitempty"`
	ServerID             int32    `protobuf:"varint,3,opt,name=ServerID,proto3" json:"ServerID,omitempty"`
	PlayerID             int64    `protobuf:"varint,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	IP                   string   `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
	Consume              int64    `protobuf:"varint,6,opt,name=Consume,proto3" json:"Consume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnUpdateConsumeStatReq) Reset()         { *m = OnUpdateConsumeStatReq{} }
func (m *OnUpdateConsumeStatReq) String() string { return proto.CompactTextString(m) }
func (*OnUpdateConsumeStatReq) ProtoMessage()    {}
func (*OnUpdateConsumeStatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{92}
}
func (m *OnUpdateConsumeStatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnUpdateConsumeStatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnUpdateConsumeStatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnUpdateConsumeStatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnUpdateConsumeStatReq.Merge(m, src)
}
func (m *OnUpdateConsumeStatReq) XXX_Size() int {
	return m.Size()
}
func (m *OnUpdateConsumeStatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OnUpdateConsumeStatReq.DiscardUnknown(m)
}

var xxx_messageInfo_OnUpdateConsumeStatReq proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonResp)(nil), "world.service.v1.CommonResp")
	proto.RegisterType((*BaseUserInfoReq)(nil), "world.service.v1.BaseUserInfoReq")
	proto.RegisterType((*BaseUserInfoRsp)(nil), "world.service.v1.BaseUserInfoRsp")
	proto.RegisterType((*EnterRoomReq)(nil), "world.service.v1.EnterRoomReq")
	proto.RegisterType((*EnterRoomRsp)(nil), "world.service.v1.EnterRoomRsp")
	proto.RegisterType((*LeaveRoomReq)(nil), "world.service.v1.LeaveRoomReq")
	proto.RegisterType((*LeaveRoomLogReq)(nil), "world.service.v1.LeaveRoomLogReq")
	proto.RegisterType((*LeaveRoomLogDxReq)(nil), "world.service.v1.LeaveRoomLogDxReq")
	proto.RegisterType((*UpdatePreventCheatReq)(nil), "world.service.v1.UpdatePreventCheatReq")
	proto.RegisterType((*UpdatePreventCheatRsp)(nil), "world.service.v1.UpdatePreventCheatRsp")
	proto.RegisterType((*RefreshUserMoneyReq)(nil), "world.service.v1.RefreshUserMoneyReq")
	proto.RegisterType((*RefreshUserMoneyRsp)(nil), "world.service.v1.RefreshUserMoneyRsp")
	proto.RegisterType((*CountPlayerReq)(nil), "world.service.v1.CountPlayerReq")
	proto.RegisterType((*UpdateAwardGoldPoolReq)(nil), "world.service.v1.UpdateAwardGoldPoolReq")
	proto.RegisterType((*UpdateAwardGoldPoolRsp)(nil), "world.service.v1.UpdateAwardGoldPoolRsp")
	proto.RegisterType((*GetJackpotRecordReq)(nil), "world.service.v1.GetJackpotRecordReq")
	proto.RegisterType((*Record)(nil), "world.service.v1.Record")
	proto.RegisterType((*GetJackpotRecordRsp)(nil), "world.service.v1.GetJackpotRecordRsp")
	proto.RegisterType((*InsertJackpotRecordReq)(nil), "world.service.v1.InsertJackpotRecordReq")
	proto.RegisterType((*GetJackpotPoolReq)(nil), "world.service.v1.GetJackpotPoolReq")
	proto.RegisterType((*GetJackpotPoolRsp)(nil), "world.service.v1.GetJackpotPoolRsp")
	proto.RegisterType((*UpdateJackpotPoolReq)(nil), "world.service.v1.UpdateJackpotPoolReq")
	proto.RegisterType((*GetVipInfosReq)(nil), "world.service.v1.GetVipInfosReq")
	proto.RegisterType((*GetVipInfosRsp)(nil), "world.service.v1.GetVipInfosRsp")
	proto.RegisterType((*UpdateMoneyReq)(nil), "world.service.v1.UpdateMoneyReq")
	proto.RegisterType((*UpdateMoneyRsp)(nil), "world.service.v1.UpdateMoneyRsp")
	proto.RegisterType((*AwardGoldPoolUserLogReq)(nil), "world.service.v1.AwardGoldPoolUserLogReq")
	proto.RegisterType((*UpdatEextendCoinReq)(nil), "world.service.v1.UpdatEextendCoinReq")
	proto.RegisterType((*UpdatEextendCoinRsp)(nil), "world.service.v1.UpdatEextendCoinRsp")
	proto.RegisterType((*ShutDwonReq)(nil), "world.service.v1.ShutDwonReq")
	proto.RegisterType((*CreateCustomRoomReq)(nil), "world.service.v1.CreateCustomRoomReq")
	proto.RegisterType((*CreateCustomRoomRsp)(nil), "world.service.v1.CreateCustomRoomRsp")
	proto.RegisterType((*TableRecordUpdateReq)(nil), "world.service.v1.TableRecordUpdateReq")
	proto.RegisterType((*CustomGameResultReq)(nil), "world.service.v1.CustomGameResultReq")
	proto.RegisterType((*CommonUserLogAddReq)(nil), "world.service.v1.CommonUserLogAddReq")
	proto.RegisterType((*PublishMailReq)(nil), "world.service.v1.PublishMailReq")
	proto.RegisterType((*PublishMailRsp)(nil), "world.service.v1.PublishMailRsp")
	proto.RegisterType((*NotifyLoginSucessReq)(nil), "world.service.v1.NotifyLoginSucessReq")
	proto.RegisterType((*GameLogReturnRatesAddReq)(nil), "world.service.v1.GameLogReturnRatesAddReq")
	proto.RegisterType((*GiftTicketUserTicketUpdateReq)(nil), "world.service.v1.GiftTicketUserTicketUpdateReq")
	proto.RegisterType((*GiftTicketUserTicketUpdateRsp)(nil), "world.service.v1.GiftTicketUserTicketUpdateRsp")
	proto.RegisterType((*AwardUserTelephoneBillReq)(nil), "world.service.v1.AwardUserTelephoneBillReq")
	proto.RegisterType((*EveryGameLogReq)(nil), "world.service.v1.EveryGameLogReq")
	proto.RegisterType((*ClubEveryGameLogReq)(nil), "world.service.v1.ClubEveryGameLogReq")
	proto.RegisterType((*ClubEveryGameLogRsp)(nil), "world.service.v1.ClubEveryGameLogRsp")
	proto.RegisterType((*RemoveUserLastMoneyReq)(nil), "world.service.v1.RemoveUserLastMoneyReq")
	proto.RegisterType((*SaveVipPointReq)(nil), "world.service.v1.SaveVipPointReq")
	proto.RegisterType((*GetVipInfoReq)(nil), "world.service.v1.GetVipInfoReq")
	proto.RegisterType((*GetVipInfoRsp)(nil), "world.service.v1.GetVipInfoRsp")
	proto.RegisterType((*UserInfoVipGetReq)(nil), "world.service.v1.UserInfoVipGetReq")
	proto.RegisterType((*UserInfoVipGetRsp)(nil), "world.service.v1.UserInfoVipGetRsp")
	proto.RegisterType((*PlayerConsumeReq)(nil), "world.service.v1.PlayerConsumeReq")
	proto.RegisterType((*PlayerGameInfoReq)(nil), "world.service.v1.PlayerGameInfoReq")
	proto.RegisterType((*TagPlayerGameInfo)(nil), "world.service.v1.tagPlayerGameInfo")
	proto.RegisterType((*PlayerGameInfoRsp)(nil), "world.service.v1.PlayerGameInfoRsp")
	proto.RegisterType((*PlayerArenaInfoReq)(nil), "world.service.v1.PlayerArenaInfoReq")
	proto.RegisterType((*PlayerArenaInfoRsp)(nil), "world.service.v1.PlayerArenaInfoRsp")
	proto.RegisterType((*FrequentArgumentReq)(nil), "world.service.v1.FrequentArgumentReq")
	proto.RegisterType((*FrequentArgumentRsp)(nil), "world.service.v1.FrequentArgumentRsp")
	proto.RegisterType((*WebUpdateUserCashReq)(nil), "world.service.v1.WebUpdateUserCashReq")
	proto.RegisterType((*WebUpdateUserCashRsp)(nil), "world.service.v1.WebUpdateUserCashRsp")
	proto.RegisterType((*GameCutCardLogReq)(nil), "world.service.v1.GameCutCardLogReq")
	proto.RegisterType((*AddMailInfoReq)(nil), "world.service.v1.AddMailInfoReq")
	proto.RegisterType((*AddMailInfoRsp)(nil), "world.service.v1.AddMailInfoRsp")
	proto.RegisterType((*SendMailInfoReq)(nil), "world.service.v1.SendMailInfoReq")
	proto.RegisterType((*SendMailInfoRsp)(nil), "world.service.v1.SendMailInfoRsp")
	proto.RegisterType((*CheckUserChargeReq)(nil), "world.service.v1.CheckUserChargeReq")
	proto.RegisterType((*CheckUserChargeRsp)(nil), "world.service.v1.CheckUserChargeRsp")
	proto.RegisterType((*CheckChargePropReq)(nil), "world.service.v1.CheckChargePropReq")
	proto.RegisterType((*CheckChargePropRsp)(nil), "world.service.v1.CheckChargePropRsp")
	proto.RegisterType((*GetUserBestResultReq)(nil), "world.service.v1.GetUserBestResultReq")
	proto.RegisterType((*GetUserBestResultRsp)(nil), "world.service.v1.GetUserBestResultRsp")
	proto.RegisterType((*UpdateUserBestResultReq)(nil), "world.service.v1.UpdateUserBestResultReq")
	proto.RegisterType((*InsertCommonLogReq)(nil), "world.service.v1.InsertCommonLogReq")
	proto.RegisterType((*QueryCommonLogReq)(nil), "world.service.v1.QueryCommonLogReq")
	proto.RegisterType((*QueryCommonLogRsp)(nil), "world.service.v1.QueryCommonLogRsp")
	proto.RegisterType((*GetRobotReq)(nil), "world.service.v1.GetRobotReq")
	proto.RegisterType((*GetRobotRsp)(nil), "world.service.v1.GetRobotRsp")
	proto.RegisterType((*GetRobotsRecord)(nil), "world.service.v1.GetRobotsRecord")
	proto.RegisterType((*UpdateRobotReq)(nil), "world.service.v1.UpdateRobotReq")
	proto.RegisterType((*UpdateRobotRsp)(nil), "world.service.v1.UpdateRobotRsp")
	proto.RegisterType((*GetMultiUserMoneyReq)(nil), "world.service.v1.GetMultiUserMoneyReq")
	proto.RegisterType((*GetMultiUserMoneyRsp)(nil), "world.service.v1.GetMultiUserMoneyRsp")
	proto.RegisterType((*MultiUserMoney)(nil), "world.service.v1.MultiUserMoney")
	proto.RegisterType((*GetMultiUserGameInfoReq)(nil), "world.service.v1.GetMultiUserGameInfoReq")
	proto.RegisterType((*GetMultiUserGameInfoRsp)(nil), "world.service.v1.GetMultiUserGameInfoRsp")
	proto.RegisterType((*GetMultiUserGameInfo)(nil), "world.service.v1.GetMultiUserGameInfo")
	proto.RegisterType((*RobotInfo)(nil), "world.service.v1.RobotInfo")
	proto.RegisterType((*QueryTridentWinRecordReq)(nil), "world.service.v1.QueryTridentWinRecordReq")
	proto.RegisterType((*TridentWinRecord)(nil), "world.service.v1.TridentWinRecord")
	proto.RegisterType((*QueryTridentWinRecordRsp)(nil), "world.service.v1.QueryTridentWinRecordRsp")
	proto.RegisterType((*InsetTridentWinRecordReq)(nil), "world.service.v1.InsetTridentWinRecordReq")
	proto.RegisterType((*OnUpdateConsumeStatReq)(nil), "world.service.v1.OnUpdateConsumeStatReq")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 5205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3c, 0x4b, 0x70, 0x24, 0x47,
	0x56, 0x5b, 0x6a, 0xb5, 0x3e, 0x39, 0x33, 0x1a, 0xa9, 0x24, 0x6b, 0x7a, 0xca, 0x1a, 0x49, 0xce,
	0x19, 0x8f, 0xc7, 0xeb, 0xf5, 0x8c, 0x3d, 0x1f, 0x13, 0x5e, 0x1c, 0x38, 0x24, 0xf5, 0x78, 0x90,
	0x91, 0x34, 0x72, 0x4b, 0x33, 0x03, 0xbb, 0x18, 0x28, 0x75, 0xa5, 0x5a, 0x15, 0xd3, 0x5d, 0xd5,
	0x53, 0x1f, 0x7d, 0xf0, 0x12, 0x66, 0x97, 0x30, 0x18, 0x16, 0x1c, 0x01, 0xc4, 0xf2, 0xd9, 0xdb,
	0x1e, 0x80, 0x80, 0x65, 0x4f, 0x1c, 0xb8, 0x71, 0xe1, 0xb2, 0x47, 0x08, 0x38, 0x71, 0x98, 0x00,
	0xc3, 0x85, 0xb9, 0xc1, 0x99, 0x20, 0x88, 0x7c, 0x99, 0x59, 0x95, 0x99, 0x95, 0xd5, 0x1f, 0xf9,
	0xb3, 0x17, 0x6e, 0xfd, 0x5e, 0xbe, 0xca, 0xf7, 0xf2, 0xe5, 0xcb, 0x97, 0x2f, 0x5f, 0xbe, 0x6c,
	0x34, 0xe9, 0x76, 0xfd, 0xeb, 0xdd, 0x28, 0x4c, 0x42, 0x7b, 0xfa, 0x28, 0x8c, 0xda, 0xde, 0xf5,
	0x98, 0x44, 0x87, 0x7e, 0x93, 0x5c, 0x3f, 0x7c, 0xdd, 0x79, 0xb5, 0xe5, 0x27, 0x07, 0xe9, 0xde,
	0xf5, 0x66, 0xd8, 0xb9, 0xd1, 0x0a, 0x5b, 0xe1, 0x0d, 0x20, 0xdc, 0x4b, 0xf7, 0x01, 0x02, 0x00,
	0x7e, 0xb1, 0x0e, 0x9c, 0x85, 0x56, 0x18, 0xb6, 0xda, 0xe4, 0x86, 0xdb, 0xf5, 0x6f, 0xb8, 0x41,
	0x10, 0x26, 0x6e, 0xe2, 0x87, 0x41, 0xcc, 0x5a, 0xf1, 0xd7, 0x11, 0x5a, 0x0b, 0x3b, 0x9d, 0x30,
	0x68, 0x90, 0xb8, 0x6b, 0xdb, 0x68, 0xb4, 0x19, 0x7a, 0xa4, 0x66, 0x2d, 0x5b, 0xd7, 0xaa, 0x0d,
	0xf8, 0x6d, 0xd7, 0xd0, 0x78, 0x87, 0xc4, 0xb1, 0xdb, 0x22, 0xb5, 0x91, 0x65, 0xeb, 0xda, 0x64,
	0x43, 0x80, 0xf8, 0x55, 0x74, 0x7e, 0xd5, 0x8d, 0xc9, 0x83, 0x98, 0x44, 0xeb, 0xc1, 0x7e, 0xd8,
	0x20, 0x4f, 0x6c, 0x07, 0x4d, 0x6c, 0xb7, 0xdd, 0x13, 0x12, 0xad, 0x7b, 0xd0, 0xc9, 0x64, 0x23,
	0x83, 0xb1, 0xaf, 0x91, 0x0f, 0xcb, 0xcf, 0xbe, 0x86, 0xce, 0xef, 0xb9, 0x31, 0x49, 0x63, 0x12,
	0xf9, 0xc1, 0x7e, 0xd8, 0x22, 0x49, 0xad, 0x02, 0x14, 0x3a, 0x1a, 0x1f, 0xa3, 0xb3, 0x77, 0x83,
	0x84, 0x44, 0x8d, 0x30, 0xec, 0x50, 0xb1, 0xe6, 0xd1, 0xd8, 0x3d, 0xb7, 0x43, 0xd6, 0xeb, 0x5c,
	0x28, 0x0e, 0x51, 0x5e, 0x2b, 0x11, 0x09, 0xdc, 0xf5, 0xba, 0xe0, 0xc5, 0x41, 0x3a, 0x90, 0x1d,
	0x12, 0x1d, 0x92, 0x68, 0xbd, 0xce, 0x99, 0x64, 0xb0, 0x34, 0xc8, 0x7a, 0x6d, 0x54, 0x19, 0x64,
	0x1d, 0x27, 0x32, 0xe7, 0xa1, 0x47, 0x38, 0x8f, 0xc6, 0xdc, 0x4e, 0x98, 0x06, 0x6c, 0x60, 0x95,
	0x06, 0x87, 0xec, 0x45, 0x84, 0xbc, 0xbd, 0x18, 0xf8, 0xfb, 0x1e, 0xf0, 0xac, 0x36, 0x24, 0x0c,
	0xfe, 0x83, 0x11, 0x74, 0x76, 0x83, 0xb8, 0x87, 0xe4, 0x4b, 0x1f, 0xb0, 0x3d, 0x85, 0x46, 0xd6,
	0xb7, 0x6b, 0x55, 0xc0, 0x8e, 0xac, 0x6f, 0x53, 0x51, 0x37, 0xc2, 0x96, 0x1f, 0x6c, 0x86, 0x01,
	0x39, 0xa9, 0x8d, 0x01, 0x5e, 0xc2, 0xd8, 0xcb, 0xe8, 0xcc, 0x23, 0x37, 0x48, 0x88, 0xc7, 0x08,
	0xc6, 0x81, 0x40, 0x46, 0x51, 0xd9, 0x77, 0xfd, 0xe6, 0x63, 0x92, 0xd4, 0x26, 0x98, 0xec, 0x0c,
	0xb2, 0xa7, 0x51, 0x65, 0xd7, 0x3d, 0xae, 0x4d, 0x02, 0x92, 0xfe, 0xb4, 0x17, 0xd0, 0xe4, 0xae,
	0xbf, 0x73, 0x12, 0xef, 0x9e, 0x74, 0x49, 0x0d, 0x01, 0x3e, 0x47, 0xe0, 0x7f, 0x1c, 0x41, 0xe7,
	0x33, 0xa5, 0x6c, 0x84, 0xad, 0x9f, 0xac, 0x5e, 0x1c, 0x34, 0xf1, 0xc8, 0x0f, 0xd6, 0x60, 0x72,
	0x99, 0x56, 0x32, 0x98, 0x8e, 0x63, 0x23, 0x8c, 0x09, 0x6b, 0x64, 0x1a, 0xc9, 0x11, 0xb4, 0xb5,
	0x1e, 0xb9, 0x47, 0xac, 0x95, 0xa9, 0x24, 0x47, 0xd0, 0xd6, 0x77, 0xda, 0x84, 0x7f, 0xcb, 0x74,
	0x93, 0x23, 0xec, 0x39, 0x54, 0xdd, 0x69, 0x86, 0x91, 0xd0, 0x0e, 0x03, 0x18, 0xbf, 0x96, 0x1f,
	0xec, 0xfa, 0x1d, 0x52, 0x3b, 0x23, 0xf8, 0x71, 0x04, 0x95, 0x94, 0x6a, 0x05, 0x1a, 0xcf, 0x32,
	0x49, 0x05, 0x8c, 0xff, 0xb8, 0x82, 0x66, 0x64, 0x9d, 0xd6, 0x8f, 0xff, 0x5f, 0xab, 0x9f, 0x59,
	0xab, 0xf6, 0x15, 0x74, 0x6e, 0x3d, 0xde, 0x8d, 0xd2, 0x38, 0x21, 0x24, 0x3e, 0xf0, 0xbb, 0xb5,
	0x73, 0x40, 0xa0, 0x22, 0x69, 0xff, 0x6b, 0x6d, 0x3f, 0x20, 0x60, 0xed, 0x53, 0xac, 0xff, 0x0c,
	0x81, 0x3f, 0x44, 0xcf, 0x3d, 0xe8, 0x7a, 0x6e, 0x42, 0xb6, 0x23, 0x72, 0x48, 0x82, 0x64, 0xed,
	0x80, 0xb8, 0xc9, 0xe7, 0x3f, 0x39, 0x35, 0x34, 0xde, 0x0a, 0xdb, 0xde, 0xd6, 0x83, 0x4d, 0x3e,
	0x37, 0x02, 0xc4, 0xbf, 0x6c, 0x14, 0x60, 0x68, 0x17, 0x28, 0x18, 0xa4, 0x1d, 0xee, 0x03, 0x05,
	0x88, 0x5b, 0x68, 0xb6, 0x41, 0xf6, 0x23, 0x12, 0x1f, 0xd0, 0x2d, 0x04, 0x7c, 0x45, 0xaf, 0xf1,
	0xc9, 0x66, 0x34, 0xa2, 0x99, 0x91, 0xe2, 0x38, 0x2a, 0xba, 0xe3, 0xf8, 0x4b, 0xcb, 0xc0, 0x69,
	0xe8, 0x81, 0x38, 0x68, 0xa2, 0x2b, 0xf8, 0xb3, 0x91, 0x64, 0xb0, 0xe4, 0xe7, 0x47, 0x15, 0x3f,
	0x3f, 0x8f, 0xc6, 0x12, 0xe6, 0xfa, 0xaa, 0xc0, 0x83, 0x43, 0x94, 0x0b, 0x39, 0x4e, 0xd6, 0x42,
	0x3f, 0xe0, 0x56, 0x2e, 0x40, 0xdc, 0x45, 0x53, 0x60, 0x93, 0x6c, 0x68, 0x9f, 0xff, 0x7c, 0x4f,
	0xa3, 0x0a, 0x9d, 0x0a, 0x36, 0xd7, 0xf4, 0x27, 0xfe, 0x64, 0x04, 0xcd, 0xb3, 0x89, 0x5e, 0x39,
	0x72, 0x23, 0xef, 0x5e, 0xd8, 0xf6, 0xb6, 0xc3, 0xb0, 0xfd, 0x85, 0xf8, 0x01, 0xda, 0x39, 0xcc,
	0x11, 0xf7, 0x03, 0x02, 0x16, 0x6d, 0x5b, 0x69, 0xe7, 0x75, 0xee, 0x0d, 0x32, 0x58, 0x6a, 0xbb,
	0x29, 0x7c, 0x82, 0x80, 0xa5, 0xb6, 0x5b, 0xdc, 0x25, 0x64, 0xb0, 0xd4, 0x76, 0x9b, 0x3b, 0x84,
	0x0c, 0x96, 0xda, 0xee, 0x70, 0x77, 0x90, 0xc1, 0xf8, 0x7f, 0x4a, 0x14, 0x72, 0x1a, 0x8b, 0x69,
	0x89, 0x41, 0x71, 0x8b, 0x69, 0x49, 0x83, 0x6a, 0x89, 0x41, 0x8d, 0x2a, 0x6d, 0x37, 0xa5, 0xb6,
	0x5b, 0xa0, 0x8c, 0xbc, 0xed, 0x96, 0xd4, 0x76, 0x1b, 0x94, 0x91, 0xb7, 0xdd, 0x96, 0xda, 0xee,
	0x80, 0x32, 0xf2, 0xb6, 0x3b, 0x74, 0x9b, 0xa6, 0xbf, 0x77, 0xd2, 0x0e, 0x88, 0x33, 0x01, 0xcd,
	0x32, 0x4a, 0xa5, 0xb8, 0x09, 0x5a, 0x51, 0x28, 0x6e, 0xaa, 0x14, 0xb7, 0xc0, 0x59, 0x2a, 0x14,
	0xb7, 0x54, 0x8a, 0xdb, 0xe0, 0x34, 0x15, 0x8a, 0xdb, 0x2a, 0xc5, 0x1d, 0xf0, 0x9c, 0x0a, 0xc5,
	0x1d, 0xbc, 0x86, 0x66, 0xef, 0x91, 0xe4, 0x5d, 0xb7, 0xf9, 0xb8, 0x1b, 0x26, 0x0d, 0xd2, 0x0c,
	0x23, 0xaf, 0x97, 0x2d, 0xce, 0xa1, 0xea, 0xbb, 0x09, 0x35, 0x29, 0xa6, 0x7c, 0x06, 0xe0, 0xef,
	0x5b, 0x68, 0x8c, 0x7d, 0x4b, 0xb7, 0x18, 0x9f, 0x05, 0xaf, 0x95, 0xc6, 0x88, 0xef, 0xd1, 0x39,
	0x0c, 0xdc, 0x8e, 0xa0, 0x87, 0xdf, 0x14, 0x97, 0x08, 0xd7, 0x51, 0x6d, 0xc0, 0x6f, 0x3a, 0xaf,
	0x2e, 0xb5, 0xea, 0x2c, 0x40, 0x13, 0x20, 0x65, 0x79, 0xe8, 0xb6, 0x53, 0xc2, 0x27, 0x87, 0x01,
	0x14, 0x1b, 0x85, 0x7b, 0x21, 0xdb, 0xb7, 0xaa, 0x0d, 0x06, 0x40, 0xcf, 0x74, 0x8b, 0x18, 0xe7,
	0x3d, 0xd3, 0x4d, 0xf7, 0xc8, 0x30, 0xc2, 0xa1, 0x8d, 0xeb, 0x26, 0x1a, 0x8f, 0xe0, 0xd3, 0xb8,
	0x56, 0x59, 0xae, 0x5c, 0x3b, 0x73, 0xb3, 0x76, 0x5d, 0x3f, 0x59, 0x5c, 0xe7, 0x7d, 0x0b, 0x42,
	0xfc, 0xe7, 0x16, 0x9a, 0x5f, 0x0f, 0x62, 0x12, 0x7d, 0x46, 0xf5, 0xca, 0x0e, 0xa0, 0x52, 0x70,
	0x00, 0xa5, 0x9b, 0xbd, 0x8d, 0x46, 0xb7, 0xa8, 0xe6, 0xd9, 0x02, 0x87, 0xdf, 0xb9, 0x2e, 0xd9,
	0xca, 0x66, 0x00, 0xfe, 0x26, 0x9a, 0xc9, 0x35, 0x74, 0x7a, 0x6f, 0x94, 0x09, 0x5f, 0x91, 0x6d,
	0x63, 0xa7, 0xd0, 0xf9, 0xd0, 0xca, 0xe7, 0x5e, 0x94, 0x2d, 0x6a, 0xf0, 0xa2, 0xbf, 0x69, 0xa1,
	0x39, 0xe6, 0x34, 0xbe, 0x18, 0xa9, 0x29, 0xb6, 0x4e, 0x12, 0xb7, 0xcd, 0xb5, 0xca, 0x00, 0x2a,
	0xc8, 0x8a, 0xe7, 0x71, 0x8d, 0xd2, 0x9f, 0xf8, 0x6b, 0x68, 0xea, 0x1e, 0x49, 0x1e, 0xfa, 0x5d,
	0x7a, 0x26, 0x8b, 0xd5, 0x33, 0x5c, 0x5d, 0x3b, 0xc3, 0xd5, 0xf1, 0x1f, 0x59, 0x2a, 0xf9, 0xd0,
	0x9a, 0x98, 0x43, 0x55, 0x3f, 0x3e, 0xf4, 0xbb, 0x7c, 0xe9, 0x30, 0xc0, 0xbe, 0x8a, 0xa6, 0xfc,
	0xb8, 0x4b, 0xa2, 0x8e, 0x1b, 0x90, 0x20, 0xa1, 0xcd, 0x6c, 0x09, 0x69, 0x58, 0xd8, 0x07, 0x03,
	0x0f, 0x62, 0xa8, 0x2a, 0xdf, 0x07, 0x19, 0x88, 0x7f, 0x67, 0x04, 0x4d, 0x31, 0x7d, 0xca, 0x81,
	0x01, 0x9c, 0x35, 0x33, 0x4d, 0x32, 0xc8, 0xc6, 0xe8, 0x2c, 0x77, 0xd7, 0x6c, 0x0b, 0x66, 0x12,
	0x2a, 0x38, 0x7a, 0x8a, 0xd9, 0x09, 0xd3, 0xa8, 0x49, 0xa4, 0x08, 0x41, 0xc2, 0xf0, 0x38, 0x74,
	0x34, 0x8b, 0x43, 0xe7, 0xa9, 0xfb, 0xe8, 0xb8, 0xd1, 0x63, 0x2e, 0x17, 0x87, 0x20, 0xd0, 0x70,
	0x8f, 0x39, 0xa3, 0x31, 0x1e, 0x68, 0x08, 0x04, 0x8b, 0xfb, 0xd6, 0x0e, 0x48, 0xf3, 0xf1, 0x7a,
	0x40, 0x03, 0x6a, 0xbe, 0x25, 0xa9, 0x48, 0x3a, 0x68, 0x11, 0xaa, 0xb0, 0x6d, 0x49, 0x80, 0x92,
	0xad, 0x4c, 0xca, 0xb6, 0x82, 0x3f, 0xb6, 0x54, 0x65, 0x7c, 0x6e, 0xe7, 0xd0, 0x39, 0x54, 0xf5,
	0x48, 0x3b, 0x71, 0xf9, 0x16, 0xc4, 0x00, 0x25, 0xd2, 0xe1, 0x9b, 0xb1, 0x80, 0xf1, 0xdf, 0x5a,
	0xe8, 0x82, 0xb2, 0x2d, 0xd2, 0x49, 0xe8, 0x73, 0x18, 0xcb, 0x27, 0x6e, 0x44, 0x99, 0xb8, 0x79,
	0x34, 0x46, 0x7b, 0xc8, 0x9c, 0x08, 0x87, 0xe8, 0x38, 0xf8, 0x66, 0x2c, 0x62, 0x52, 0x0e, 0xd2,
	0x69, 0x64, 0xa6, 0x2b, 0xf9, 0x11, 0x09, 0xa3, 0x84, 0x18, 0x63, 0x6a, 0x88, 0x81, 0xff, 0xc6,
	0x42, 0xb3, 0xa0, 0xc4, 0xbb, 0xe4, 0x38, 0x21, 0x81, 0x47, 0xc3, 0xad, 0xd3, 0xc6, 0x9b, 0x0e,
	0x9a, 0xa0, 0x9f, 0x4b, 0xc6, 0x94, 0xc1, 0x05, 0x73, 0x1c, 0x35, 0x98, 0x23, 0x35, 0x81, 0xa8,
	0x09, 0x9f, 0x73, 0xbb, 0xe7, 0x20, 0x37, 0xc4, 0x31, 0x61, 0x88, 0xf8, 0x9b, 0x06, 0xa1, 0x3f,
	0xaf, 0xe9, 0xc7, 0x6f, 0xa3, 0x33, 0x3b, 0x07, 0x69, 0x52, 0x3f, 0x0a, 0x83, 0x53, 0xb9, 0x2a,
	0xfc, 0x1e, 0x9a, 0x5d, 0x8b, 0x88, 0x9b, 0x90, 0xb5, 0x34, 0x4e, 0xc2, 0x8e, 0x94, 0xad, 0x80,
	0x29, 0xf6, 0x94, 0x95, 0xea, 0x51, 0xd5, 0x50, 0x92, 0x6d, 0x37, 0x8e, 0x8f, 0xc2, 0xc8, 0x13,
	0x2b, 0x55, 0xc6, 0xe1, 0xf7, 0x0d, 0x5d, 0x9e, 0xe6, 0xd0, 0x11, 0x85, 0x61, 0x27, 0xc8, 0x0f,
	0x1d, 0x1c, 0xa4, 0x0e, 0x6f, 0x6e, 0xd7, 0xdd, 0x6b, 0x13, 0xb6, 0xf5, 0xb1, 0x59, 0xe9, 0x25,
	0x73, 0x36, 0x78, 0x4f, 0x1d, 0x3c, 0xb4, 0x50, 0xe9, 0xc4, 0x46, 0x30, 0xd9, 0x10, 0x20, 0x98,
	0x8e, 0x18, 0xa3, 0xd8, 0x04, 0x39, 0x4c, 0xf9, 0xac, 0x78, 0xde, 0x16, 0x39, 0x12, 0x9e, 0x85,
	0x41, 0xf8, 0x43, 0x34, 0xcb, 0x46, 0x4c, 0x95, 0xde, 0x20, 0x71, 0xda, 0x4e, 0xfa, 0xac, 0x29,
	0x6a, 0x2f, 0xf9, 0x9a, 0x62, 0x10, 0x15, 0x8a, 0xad, 0xae, 0x58, 0x08, 0xc5, 0x41, 0xba, 0x76,
	0x58, 0xb7, 0x75, 0x97, 0x2f, 0xf8, 0xc9, 0x86, 0x84, 0xc1, 0x29, 0x9a, 0x65, 0x99, 0x43, 0xbe,
	0xa2, 0x57, 0x3c, 0x43, 0x60, 0x50, 0x2d, 0x33, 0x8a, 0x6a, 0xbe, 0x7f, 0xd5, 0xd0, 0xf8, 0x46,
	0xd8, 0xda, 0xcd, 0xe3, 0x29, 0x01, 0xd2, 0x49, 0x94, 0x98, 0xc3, 0x6f, 0xfc, 0xbf, 0x16, 0x9a,
	0xda, 0x4e, 0xf7, 0xda, 0x7e, 0x7c, 0xb0, 0xe9, 0xfa, 0xb0, 0x65, 0xce, 0xa1, 0xea, 0xae, 0x9f,
	0xb4, 0x09, 0x1f, 0x32, 0x03, 0x68, 0xb7, 0x6b, 0x61, 0x90, 0x90, 0xcc, 0xc3, 0x0b, 0x90, 0x8a,
	0xb8, 0x43, 0x02, 0x8f, 0x44, 0xc2, 0x8f, 0x30, 0x48, 0x12, 0x7d, 0x54, 0x11, 0x7d, 0x01, 0x4d,
	0xee, 0x24, 0x6e, 0x94, 0x48, 0xfb, 0x4e, 0x8e, 0xa0, 0x7c, 0xee, 0xf2, 0x3d, 0x89, 0x9f, 0xcd,
	0x38, 0xc8, 0x0e, 0x37, 0x01, 0xf3, 0x2e, 0x2c, 0x9e, 0xcb, 0xe0, 0x5c, 0xef, 0x3b, 0xc2, 0xa9,
	0x73, 0x90, 0xe9, 0x9d, 0x4e, 0x3d, 0xdd, 0x61, 0xb9, 0x63, 0x97, 0x30, 0x78, 0x57, 0x1d, 0xff,
	0x69, 0x76, 0xe0, 0x4e, 0xdc, 0xe2, 0x4e, 0xb4, 0xda, 0x60, 0x00, 0x0d, 0x80, 0xe7, 0xb6, 0xc2,
	0xc4, 0xdf, 0x3f, 0x81, 0x94, 0xc5, 0x4e, 0xda, 0x24, 0xb1, 0x31, 0x1a, 0xa8, 0x4a, 0x6e, 0x2d,
	0x57, 0xd8, 0x48, 0xd9, 0x5c, 0x57, 0xd4, 0xb9, 0xd6, 0xf7, 0xcd, 0x2b, 0xe8, 0xdc, 0x5a, 0xdb,
	0x27, 0x41, 0xf2, 0x90, 0x44, 0xb1, 0x1f, 0x06, 0x5c, 0xbd, 0x2a, 0x12, 0xff, 0x95, 0x85, 0x6a,
	0xb4, 0x6b, 0xd8, 0x37, 0x92, 0x34, 0x0a, 0x1a, 0x6e, 0x42, 0xe2, 0x3e, 0x06, 0xc7, 0x05, 0xdf,
	0xcd, 0x83, 0xd1, 0x0c, 0xa6, 0x6c, 0x77, 0x0f, 0x48, 0x18, 0x9d, 0x34, 0x08, 0x74, 0x05, 0x62,
	0x5a, 0x0d, 0x15, 0xc9, 0x2d, 0x28, 0x4e, 0x3b, 0x84, 0xef, 0x77, 0x02, 0x84, 0x99, 0x75, 0x0f,
	0x5b, 0xf7, 0x5c, 0x3f, 0xe0, 0x27, 0xf5, 0x0c, 0xc6, 0x3f, 0xb4, 0xd0, 0xa5, 0x7b, 0xfe, 0x7e,
	0xc2, 0xb2, 0x96, 0x74, 0x56, 0xf9, 0xaf, 0x82, 0xeb, 0xc8, 0x24, 0xce, 0xf7, 0x37, 0x29, 0x24,
	0xa9, 0x36, 0x38, 0xc4, 0x95, 0x56, 0xc9, 0x94, 0x66, 0xa3, 0xd1, 0x4d, 0xd2, 0x09, 0xc5, 0xb2,
	0xa0, 0xbf, 0xb5, 0x80, 0x85, 0xc9, 0x24, 0x07, 0x2c, 0xb9, 0x96, 0xc6, 0x64, 0x2d, 0xe1, 0x1f,
	0xf4, 0x96, 0xf6, 0x34, 0x5b, 0x07, 0x1f, 0x5b, 0x45, 0x19, 0x1b, 0x9d, 0xe8, 0x34, 0x8a, 0x48,
	0xc0, 0x39, 0xf1, 0x25, 0xa6, 0x22, 0x21, 0x68, 0x5d, 0xdd, 0x8c, 0x5b, 0xdc, 0x0c, 0x18, 0x80,
	0x7f, 0xc3, 0x42, 0x17, 0x21, 0x86, 0x00, 0xf1, 0x48, 0x9b, 0x74, 0x0f, 0xc2, 0x80, 0xac, 0xfa,
	0xed, 0x76, 0x2f, 0x6d, 0xce, 0xa1, 0xea, 0x36, 0xa5, 0x13, 0x27, 0x11, 0x00, 0x68, 0x00, 0xbc,
	0xed, 0x46, 0x5c, 0x38, 0xfa, 0x93, 0x8e, 0x2f, 0x4b, 0x31, 0x54, 0x1b, 0xa3, 0xc2, 0xf1, 0xec,
	0xf8, 0x2d, 0x31, 0xb7, 0xf0, 0x1b, 0x7f, 0x34, 0x86, 0xce, 0xdf, 0x3d, 0x24, 0xd1, 0x49, 0x66,
	0x89, 0x4f, 0xec, 0x37, 0x55, 0x6f, 0xbb, 0xfa, 0xc2, 0xb3, 0xa7, 0x4b, 0x1c, 0xf3, 0xdf, 0x4f,
	0x97, 0x66, 0x0f, 0xdd, 0xb6, 0x4f, 0xd5, 0xf8, 0x75, 0x1c, 0x91, 0x27, 0xa9, 0x1f, 0x11, 0x0f,
	0x67, 0xe6, 0xf9, 0x96, 0xb6, 0x49, 0xae, 0xe2, 0x67, 0x4f, 0x97, 0x04, 0xaa, 0xec, 0xe3, 0x6c,
	0x1d, 0xbd, 0xad, 0xe7, 0x4d, 0x56, 0x2f, 0x3f, 0x7b, 0xba, 0x94, 0xe1, 0xca, 0xbe, 0xcf, 0x93,
	0x2b, 0x6f, 0xeb, 0xe7, 0x2e, 0xd6, 0x81, 0xc0, 0x95, 0x76, 0x90, 0xad, 0xfd, 0xb7, 0xd0, 0x38,
	0xec, 0x8b, 0x22, 0xe6, 0x63, 0xf2, 0x73, 0x54, 0xa9, 0xfc, 0xbc, 0xdd, 0x7e, 0x03, 0x55, 0xa5,
	0x0b, 0x82, 0xd5, 0xe5, 0x67, 0x4f, 0x97, 0x18, 0xa2, 0xec, 0x4b, 0xd6, 0x2a, 0x14, 0x1e, 0x84,
	0x2c, 0x54, 0xce, 0x15, 0x1e, 0x84, 0x3d, 0x15, 0x1e, 0x84, 0x54, 0xe0, 0xb5, 0x03, 0xd7, 0x8f,
	0x82, 0x90, 0x79, 0x5c, 0x26, 0x30, 0x47, 0x95, 0x0a, 0xcc, 0xdb, 0xed, 0xd7, 0xa4, 0xcb, 0x87,
	0xd5, 0xc5, 0x67, 0x4f, 0x97, 0x28, 0x58, 0xf6, 0x15, 0x5c, 0x4e, 0xbc, 0x85, 0xc6, 0x57, 0xdd,
	0xb6, 0x1b, 0x34, 0x79, 0x9a, 0x98, 0xf1, 0xe3, 0xa8, 0x52, 0x7e, 0xbc, 0xdd, 0xbe, 0x8b, 0xd0,
	0x7a, 0xdc, 0x0c, 0xfd, 0xa0, 0xe5, 0x8a, 0x6c, 0xf2, 0xea, 0x8b, 0xcf, 0x9e, 0x2e, 0x49, 0xd8,
	0xb2, 0x3e, 0x24, 0x12, 0xfb, 0x3d, 0x34, 0xb5, 0xaa, 0xa6, 0x96, 0x21, 0xf7, 0xbc, 0xfa, 0xf2,
	0xb3, 0xa7, 0x4b, 0x5a, 0x4b, 0x59, 0x77, 0x1a, 0x19, 0xfe, 0xee, 0x04, 0x9a, 0x5d, 0x6b, 0xa7,
	0x7b, 0xfa, 0x5a, 0xf8, 0xf2, 0x2e, 0x01, 0xe8, 0x39, 0xa0, 0xed, 0x9e, 0x64, 0xa7, 0x0d, 0x0e,
	0x51, 0x4e, 0xc2, 0x24, 0xf9, 0x4e, 0x2c, 0xcc, 0xad, 0x96, 0xcf, 0xfd, 0x38, 0x8f, 0x05, 0xf8,
	0xbc, 0xce, 0x67, 0x06, 0x35, 0x91, 0x4b, 0x1d, 0x80, 0x3f, 0xdd, 0x0d, 0x13, 0xb7, 0xdd, 0x08,
	0xd3, 0xc0, 0x13, 0xbb, 0x70, 0x8e, 0xa1, 0xa1, 0x29, 0x77, 0x5d, 0x8c, 0x82, 0xdd, 0x04, 0x28,
	0x38, 0xea, 0x81, 0x98, 0x91, 0xb3, 0xcb, 0x00, 0x6e, 0xc2, 0xb5, 0xdc, 0x2e, 0xd8, 0x3d, 0x40,
	0x36, 0xe7, 0xfc, 0x82, 0xeb, 0x5c, 0x7e, 0xc1, 0xb5, 0x88, 0x50, 0x9d, 0x78, 0x69, 0x33, 0x91,
	0x72, 0xfe, 0x12, 0x86, 0x7a, 0xd5, 0x6d, 0xf7, 0xa4, 0x43, 0x82, 0x84, 0xc7, 0xa2, 0xe7, 0xd9,
	0xf6, 0xa9, 0x20, 0x8b, 0xd7, 0x0b, 0xd3, 0xa6, 0xeb, 0x85, 0x79, 0x34, 0x46, 0xa7, 0x75, 0xbd,
	0x5e, 0x9b, 0x61, 0x9a, 0x60, 0x10, 0x8c, 0x14, 0x76, 0x63, 0xb6, 0x9b, 0xd4, 0x6c, 0x3e, 0x52,
	0x09, 0x27, 0x87, 0xb6, 0xb3, 0x6a, 0x68, 0x8b, 0xd1, 0xd9, 0x0d, 0x3f, 0x49, 0xda, 0x84, 0xea,
	0x75, 0x2b, 0xac, 0xcd, 0xb1, 0xaf, 0x65, 0x1c, 0x44, 0x3c, 0x61, 0xd8, 0xe1, 0x43, 0x78, 0x8e,
	0x47, 0x3c, 0x19, 0x86, 0xc6, 0x5f, 0xab, 0x44, 0x5c, 0xac, 0xcc, 0xb3, 0xf8, 0x2b, 0x43, 0xc8,
	0xf1, 0xd7, 0x05, 0x35, 0xfe, 0xfa, 0x2a, 0x9a, 0x5e, 0x8f, 0x57, 0xd2, 0x24, 0x64, 0x07, 0x04,
	0x38, 0x61, 0xd7, 0x80, 0xa4, 0x80, 0xb7, 0xaf, 0xa2, 0xa9, 0x6d, 0xf7, 0x84, 0xfe, 0x5c, 0x73,
	0x23, 0x38, 0x4a, 0x5e, 0x04, 0x4a, 0x0d, 0x6b, 0x2f, 0xa3, 0x33, 0xdb, 0x3e, 0x69, 0x52, 0xbd,
	0x51, 0x22, 0x87, 0x5d, 0x5f, 0x4a, 0x28, 0xda, 0xd3, 0xae, 0xfb, 0x98, 0xac, 0x07, 0x1b, 0x7e,
	0xc7, 0x07, 0xa2, 0xe7, 0x59, 0x4f, 0x2a, 0x16, 0x2c, 0x0c, 0x30, 0x30, 0xb7, 0x0b, 0xdc, 0xc2,
	0x32, 0x0c, 0x9c, 0x0b, 0x63, 0x12, 0x6d, 0xf9, 0xcd, 0xc7, 0x70, 0x7a, 0xbd, 0xc4, 0xcf, 0x85,
	0x12, 0x8e, 0x8e, 0x50, 0xe8, 0x29, 0xa3, 0x5b, 0x64, 0x23, 0xd4, 0xf1, 0xf6, 0x6b, 0x68, 0x56,
	0x32, 0x8b, 0x8c, 0x7c, 0x09, 0xc8, 0x4d, 0x4d, 0x54, 0x02, 0xb6, 0xe6, 0x36, 0xdd, 0x63, 0x3a,
	0x8e, 0x65, 0x26, 0x81, 0x8c, 0xc3, 0xae, 0xc1, 0x19, 0x0c, 0x1d, 0x34, 0x2c, 0xa0, 0x49, 0xfe,
	0x6d, 0x16, 0x37, 0xe4, 0x08, 0x7c, 0x1b, 0xcd, 0x37, 0x48, 0x27, 0x3c, 0x84, 0xca, 0x81, 0x0d,
	0x37, 0x4e, 0xb2, 0x0c, 0x4f, 0xaf, 0x4c, 0xd5, 0x0f, 0x2c, 0x74, 0x7e, 0xc7, 0x3d, 0x24, 0x0f,
	0xfd, 0xee, 0x76, 0xe8, 0x07, 0xc9, 0x97, 0xeb, 0xa2, 0xb2, 0x1b, 0xc2, 0xaa, 0x7c, 0x43, 0xa8,
	0x1f, 0xd6, 0x5f, 0x41, 0xe7, 0xf2, 0x64, 0x5a, 0xbf, 0x01, 0xfd, 0xc8, 0x52, 0xa8, 0x4f, 0x13,
	0xf7, 0xb7, 0x22, 0xd7, 0x13, 0x87, 0x2c, 0x06, 0x50, 0x6c, 0x0c, 0x82, 0x8e, 0x42, 0x04, 0xcc,
	0x00, 0xfb, 0x1a, 0x3a, 0xbf, 0x4f, 0x77, 0x00, 0x12, 0x24, 0x24, 0xca, 0x07, 0x62, 0x35, 0x74,
	0x34, 0x64, 0xbd, 0xbd, 0xc3, 0xba, 0x7b, 0x12, 0xf3, 0xc0, 0x52, 0x80, 0x78, 0x0d, 0xcd, 0x88,
	0x52, 0x8f, 0x87, 0x7e, 0xf7, 0x1e, 0x49, 0x4e, 0x91, 0xf2, 0xc1, 0x1f, 0x16, 0x3a, 0x39, 0x8d,
	0x71, 0xc5, 0x69, 0x37, 0x95, 0x83, 0xd2, 0x1c, 0x41, 0x57, 0x61, 0x9c, 0x76, 0x63, 0xde, 0xcc,
	0x2b, 0x2b, 0x72, 0x0c, 0xfe, 0x67, 0x0b, 0x4d, 0xb3, 0x29, 0xe0, 0xb1, 0x3f, 0x1f, 0x45, 0xaa,
	0x64, 0x16, 0xd3, 0x2c, 0x80, 0x6f, 0xe5, 0xe7, 0xa1, 0xc9, 0x06, 0x87, 0xe8, 0xb4, 0x36, 0xb5,
	0xf4, 0x8f, 0x80, 0xa9, 0x78, 0xf4, 0xf7, 0x43, 0x48, 0x6a, 0x33, 0x33, 0xca, 0x11, 0x70, 0x19,
	0xd1, 0x15, 0xf7, 0xdd, 0xcc, 0x49, 0x47, 0x61, 0xd8, 0xd9, 0xd9, 0xe2, 0x56, 0xc4, 0x21, 0x3a,
	0x7c, 0xfa, 0xd1, 0x5a, 0x76, 0xd3, 0x2d, 0x40, 0x76, 0xcd, 0x40, 0x77, 0x28, 0xb6, 0xbf, 0x31,
	0x00, 0xdf, 0x45, 0x33, 0x6c, 0x54, 0xa0, 0x7f, 0x6e, 0x7d, 0x35, 0x34, 0x9e, 0xf2, 0x5c, 0x00,
	0x1b, 0x97, 0x00, 0xcb, 0x06, 0x86, 0xff, 0xd3, 0x42, 0x33, 0x89, 0xdb, 0x52, 0xbb, 0xd2, 0xd4,
	0x53, 0xcd, 0xd4, 0xe3, 0xa0, 0x89, 0x23, 0x71, 0x59, 0xcf, 0x4e, 0x38, 0x19, 0x4c, 0xd5, 0xd0,
	0xce, 0x2e, 0xeb, 0xf9, 0x2c, 0xb5, 0xe5, 0xcb, 0x7a, 0x2f, 0xbb, 0xac, 0x67, 0x93, 0x94, 0x23,
	0x68, 0xeb, 0x7e, 0x76, 0x59, 0xcf, 0x42, 0xf6, 0x1c, 0x91, 0x5b, 0x38, 0xbf, 0x67, 0x89, 0x85,
	0xdd, 0x46, 0x7e, 0xeb, 0x20, 0x59, 0xaf, 0xf3, 0xa3, 0xb9, 0x00, 0xa9, 0xf4, 0x40, 0x72, 0x93,
	0x5f, 0x7a, 0x71, 0x08, 0x7f, 0xab, 0xa0, 0xb2, 0xa1, 0x4d, 0xf1, 0x4d, 0x54, 0xf5, 0x83, 0xfd,
	0x50, 0xdc, 0xc0, 0x5c, 0x2e, 0xde, 0xc0, 0x14, 0x94, 0xd9, 0x60, 0x5f, 0xe0, 0x5f, 0x42, 0x36,
	0x6b, 0x60, 0x9e, 0x89, 0xcf, 0xd8, 0xb0, 0x86, 0x28, 0xee, 0xa8, 0xf2, 0x7b, 0x18, 0x0e, 0xe2,
	0x0f, 0x8a, 0xfd, 0x0f, 0x3d, 0xbc, 0x9f, 0x42, 0xa3, 0x54, 0x58, 0xe8, 0x7a, 0xc0, 0xd1, 0xc1,
	0x07, 0xf8, 0x75, 0x34, 0xfb, 0x0e, 0xf7, 0x2b, 0x2b, 0x51, 0x2b, 0xa5, 0x1b, 0x11, 0xf7, 0x86,
	0x71, 0x00, 0xa4, 0x9e, 0x48, 0x3d, 0x08, 0x18, 0xbf, 0x6f, 0xf8, 0x24, 0xee, 0xd2, 0x2d, 0x2b,
	0x78, 0x3d, 0x4e, 0x68, 0x13, 0x45, 0xf3, 0xcf, 0x14, 0x1c, 0xd0, 0xdc, 0x0c, 0xbc, 0x8c, 0x66,
	0x84, 0xd3, 0x48, 0x38, 0xfc, 0xbb, 0x23, 0x68, 0xee, 0x11, 0xd9, 0x63, 0xa7, 0x60, 0xea, 0x81,
	0xd6, 0xdc, 0xf8, 0xa0, 0xd7, 0xa5, 0x82, 0x7a, 0xfe, 0x1e, 0x29, 0x5c, 0x18, 0x60, 0x74, 0x96,
	0xd5, 0x38, 0xad, 0xe4, 0x89, 0xd5, 0xc9, 0x86, 0x82, 0xa3, 0x76, 0xbc, 0xbe, 0xbd, 0xe2, 0x79,
	0x11, 0x89, 0x63, 0xe1, 0x0a, 0x32, 0x84, 0x7a, 0x95, 0x50, 0xd5, 0xaf, 0x12, 0xf2, 0x0b, 0x88,
	0x31, 0xe5, 0x02, 0xe2, 0x0a, 0x3a, 0xb7, 0xe9, 0x36, 0x0f, 0xfc, 0x80, 0x6c, 0xa5, 0x9d, 0x3d,
	0x12, 0x89, 0x2b, 0x06, 0x05, 0x49, 0xa5, 0x5f, 0x8f, 0x1f, 0x45, 0x7e, 0x42, 0xb7, 0x5c, 0xee,
	0x29, 0x24, 0x0c, 0xfe, 0xc4, 0x32, 0xa9, 0x63, 0x68, 0x03, 0xc9, 0x93, 0x00, 0x2b, 0x72, 0x7a,
	0x59, 0x45, 0x52, 0x55, 0x6d, 0x86, 0x9e, 0xbf, 0x7f, 0xb2, 0x22, 0x97, 0x48, 0x28, 0x38, 0xfc,
	0x5f, 0x16, 0x9a, 0xa1, 0x96, 0xb0, 0x96, 0x26, 0x34, 0x32, 0xcb, 0x8f, 0x20, 0xc6, 0xc9, 0x51,
	0xf3, 0x54, 0x93, 0x65, 0x79, 0x2a, 0x69, 0xdf, 0xa7, 0xc1, 0x70, 0x9a, 0xe4, 0x37, 0x0a, 0x1c,
	0x52, 0x12, 0xf9, 0x55, 0x2d, 0x91, 0xbf, 0x88, 0x10, 0x15, 0x27, 0xf4, 0x03, 0xfa, 0x1d, 0xaf,
	0x7c, 0xcb, 0x31, 0x9a, 0x89, 0x8c, 0x17, 0x4c, 0x84, 0x7e, 0x0f, 0x01, 0x29, 0xc4, 0xb2, 0x7c,
	0x12, 0x72, 0x0c, 0x0e, 0xd0, 0xd4, 0x8a, 0xe7, 0x6d, 0xba, 0x7e, 0x5b, 0x2c, 0xff, 0x61, 0x13,
	0x9f, 0x73, 0xa8, 0x4a, 0x35, 0x22, 0x52, 0xbd, 0x0c, 0x60, 0xa6, 0x73, 0xe4, 0x66, 0xb9, 0x67,
	0x0e, 0xe1, 0x9f, 0x51, 0xf9, 0xc5, 0xb0, 0xfb, 0x00, 0x98, 0x39, 0x76, 0x06, 0xe5, 0xfd, 0x8e,
	0x48, 0xfd, 0xe2, 0x1f, 0xd2, 0x08, 0x8c, 0x04, 0x8a, 0xc4, 0x65, 0x3d, 0x94, 0x65, 0x12, 0x95,
	0xd4, 0x2b, 0x4b, 0xd2, 0x15, 0x53, 0xaf, 0xeb, 0x1d, 0x11, 0xbe, 0x08, 0x50, 0x49, 0xbd, 0x56,
	0xb5, 0xd4, 0x6b, 0x26, 0xed, 0x98, 0x2c, 0xed, 0x4b, 0x9a, 0xb0, 0x71, 0x37, 0x27, 0xb4, 0x64,
	0xc2, 0x3d, 0x64, 0xc3, 0xed, 0x1c, 0x2c, 0x83, 0x03, 0x37, 0x6a, 0xf5, 0xcb, 0xe9, 0x95, 0x0d,
	0x0c, 0x7a, 0x91, 0xd2, 0xde, 0x39, 0x02, 0x7f, 0xa3, 0xc8, 0xe3, 0x34, 0x99, 0xb8, 0x08, 0xb2,
	0xf5, 0xd0, 0xfd, 0x44, 0x83, 0x43, 0xf8, 0x17, 0x79, 0xdf, 0xac, 0xdf, 0xed, 0x28, 0xec, 0x9e,
	0x46, 0x7e, 0x7a, 0x06, 0x8f, 0xc2, 0x6e, 0x9e, 0xe7, 0x63, 0x10, 0xfe, 0x75, 0xab, 0xd8, 0xfd,
	0x69, 0x0a, 0x61, 0xd6, 0xe3, 0xd5, 0x5f, 0x78, 0xa7, 0xed, 0x9e, 0xf0, 0xee, 0x33, 0x98, 0x1e,
	0xc0, 0xe8, 0x19, 0x60, 0x35, 0x3d, 0x01, 0x9b, 0x60, 0x26, 0x2b, 0xa3, 0xf0, 0x3b, 0x68, 0xee,
	0x1e, 0x4b, 0x65, 0xae, 0x92, 0x38, 0x51, 0xae, 0x46, 0x86, 0x19, 0x22, 0xfe, 0x79, 0x53, 0x3f,
	0x43, 0x8f, 0xc5, 0x46, 0xa3, 0x9e, 0x9b, 0xb8, 0x7c, 0xc9, 0xc1, 0x6f, 0xfc, 0x3e, 0xba, 0x90,
	0xbb, 0xd2, 0xcf, 0x24, 0xa4, 0xb1, 0xfb, 0x36, 0xb2, 0x59, 0xd5, 0x06, 0xbb, 0x9f, 0x31, 0xe6,
	0x67, 0xf4, 0x64, 0xbd, 0x1b, 0x28, 0x17, 0x33, 0x14, 0xcc, 0x32, 0xa3, 0x15, 0x29, 0x33, 0x3a,
	0x8d, 0x2a, 0x74, 0x8b, 0xe0, 0xf5, 0x60, 0x74, 0x6f, 0xf8, 0x9e, 0x85, 0x66, 0xde, 0x4b, 0x49,
	0x74, 0xa2, 0x73, 0x1b, 0x6a, 0x1c, 0xe5, 0x97, 0x40, 0x8a, 0x0b, 0x18, 0xed, 0x71, 0xfb, 0x52,
	0x55, 0x4e, 0xff, 0xf8, 0x41, 0x41, 0xac, 0xd3, 0xcc, 0xdd, 0x46, 0xd8, 0x62, 0xe1, 0xda, 0x64,
	0x03, 0x7e, 0xe3, 0x0f, 0xd0, 0x19, 0x7a, 0x0c, 0x09, 0xf7, 0x42, 0x98, 0xaf, 0x2b, 0xe8, 0x9c,
	0x1f, 0x3f, 0xf4, 0x63, 0x3f, 0x09, 0xa1, 0xe6, 0x1b, 0x7a, 0x9e, 0x68, 0xa8, 0x48, 0x60, 0x41,
	0x23, 0x5d, 0x3f, 0x00, 0x16, 0x95, 0x86, 0x00, 0xa1, 0xc5, 0x3d, 0x86, 0x16, 0x7e, 0xf3, 0xc8,
	0x41, 0xca, 0xdc, 0x17, 0x1b, 0x50, 0xb5, 0x01, 0xbf, 0xf1, 0xbb, 0x12, 0xf3, 0xb8, 0x6b, 0xff,
	0x74, 0x5e, 0xd3, 0x63, 0x41, 0x44, 0xf9, 0x42, 0x31, 0xe6, 0x12, 0xf4, 0xb1, 0x5e, 0xdc, 0xf3,
	0x5b, 0x16, 0x3a, 0xaf, 0x35, 0x66, 0xf1, 0xa4, 0xa8, 0x7f, 0xe2, 0x10, 0x5d, 0x90, 0x81, 0x48,
	0x18, 0xf0, 0xbb, 0x14, 0x01, 0xdb, 0x57, 0xd1, 0x54, 0x93, 0x44, 0x7e, 0xe2, 0xef, 0xfb, 0x4d,
	0x78, 0x5a, 0xc0, 0x6d, 0x51, 0xc3, 0xd2, 0x91, 0x1e, 0x10, 0xd7, 0x7b, 0x10, 0x89, 0x92, 0x14,
	0x01, 0xd2, 0x8d, 0x86, 0x5f, 0x37, 0x08, 0xad, 0xaa, 0x72, 0x54, 0x33, 0x39, 0xe6, 0x50, 0xb5,
	0x03, 0x19, 0x35, 0xa6, 0x45, 0x06, 0xe0, 0x37, 0xd4, 0xef, 0x4b, 0xa6, 0x79, 0x1a, 0x55, 0x3a,
	0x71, 0x8b, 0x8b, 0x4f, 0x7f, 0xe2, 0xd7, 0x60, 0x81, 0x6f, 0xa6, 0xed, 0xc4, 0x57, 0x2a, 0x4a,
	0x4b, 0xcf, 0x41, 0xf8, 0x57, 0x4c, 0x5f, 0xc4, 0x5d, 0xfb, 0x67, 0xd1, 0x54, 0x2a, 0x60, 0x28,
	0x8c, 0xe1, 0xf3, 0xb1, 0x5c, 0x9c, 0x0f, 0xed, 0x63, 0xed, 0x3b, 0xaa, 0x0b, 0x95, 0x62, 0x48,
	0x5d, 0xfc, 0x1c, 0xba, 0x20, 0x4b, 0x28, 0x1f, 0xef, 0xf2, 0x43, 0x01, 0xef, 0x28, 0x3f, 0x14,
	0x88, 0xe1, 0x8e, 0xa8, 0xc3, 0xf5, 0x4b, 0x3a, 0x8b, 0xbb, 0xf6, 0x16, 0x9a, 0xea, 0x08, 0xbc,
	0x3c, 0xe2, 0xab, 0x46, 0x0b, 0x2c, 0x76, 0xa1, 0x7d, 0x8d, 0xff, 0xce, 0x52, 0x55, 0x5b, 0x38,
	0x4c, 0xea, 0xc3, 0xff, 0xc9, 0x1c, 0x26, 0xa5, 0x63, 0xe3, 0x98, 0x72, 0x6c, 0xc4, 0x7f, 0x31,
	0x82, 0x26, 0xc1, 0xfe, 0xfa, 0x49, 0xfd, 0xc5, 0x2d, 0xa4, 0xdc, 0x24, 0xaa, 0x92, 0x49, 0x28,
	0x9a, 0x1a, 0xeb, 0xa5, 0xa9, 0xf1, 0x9e, 0x9a, 0x9a, 0xe8, 0xa9, 0xa9, 0xc9, 0x1e, 0x9a, 0x42,
	0xaa, 0xa6, 0xbe, 0x63, 0xa1, 0x1a, 0x78, 0xe6, 0xdd, 0xc8, 0xf7, 0x48, 0x90, 0x3c, 0xf2, 0x83,
	0xb2, 0xba, 0x42, 0x25, 0xde, 0xd8, 0x0d, 0xbb, 0xd4, 0x1f, 0xf2, 0x7d, 0x83, 0x41, 0x59, 0x6e,
	0xb8, 0xee, 0x26, 0x59, 0x25, 0x77, 0x86, 0xe0, 0xbb, 0x03, 0xb4, 0x8d, 0x66, 0xbb, 0x03, 0x05,
	0xf1, 0xbf, 0x8c, 0xa0, 0x69, 0x9d, 0xbf, 0xfd, 0x06, 0xaa, 0x06, 0xf5, 0x55, 0xc1, 0x9b, 0xdd,
	0x4a, 0x01, 0xa2, 0xf4, 0x56, 0x0a, 0x5a, 0xed, 0xbb, 0x08, 0xc5, 0xbf, 0xba, 0xa5, 0xcc, 0x2b,
	0xbb, 0xac, 0xc9, 0xb1, 0xa5, 0x97, 0x35, 0x39, 0x09, 0xeb, 0xa6, 0x2e, 0x0e, 0x00, 0x15, 0xb9,
	0x1b, 0x81, 0xed, 0xd1, 0x8d, 0x20, 0xa1, 0xdd, 0x04, 0x5b, 0xe4, 0x88, 0x8d, 0x89, 0x19, 0x38,
	0xeb, 0x26, 0xc7, 0x96, 0x76, 0x93, 0x93, 0xd8, 0x6f, 0xa2, 0xb1, 0x76, 0x7b, 0xd7, 0x6f, 0xb2,
	0x92, 0xb6, 0x0a, 0xbb, 0x6a, 0x63, 0x98, 0xd2, 0xab, 0x36, 0xd6, 0x8c, 0xbf, 0x5f, 0x3a, 0xc3,
	0x43, 0x6f, 0xc1, 0xdb, 0x68, 0x46, 0xef, 0x44, 0xa4, 0x4f, 0x70, 0xd1, 0xd5, 0x14, 0xf8, 0x15,
	0x3f, 0x06, 0xf3, 0xa3, 0xe1, 0x51, 0x32, 0x8c, 0xf9, 0x39, 0x68, 0x82, 0x7a, 0x25, 0x30, 0x0e,
	0xee, 0x6d, 0x04, 0x4c, 0xbf, 0x79, 0xc4, 0xce, 0x7c, 0x3c, 0x14, 0x66, 0x10, 0xfd, 0x26, 0xb3,
	0x09, 0x9e, 0x1f, 0x16, 0x30, 0xfe, 0x6b, 0x0b, 0xcd, 0xdf, 0x0f, 0xd8, 0xae, 0xc5, 0x13, 0x8b,
	0x3b, 0x89, 0xe9, 0xbd, 0xc6, 0x20, 0x05, 0x34, 0x7a, 0x92, 0xba, 0xda, 0x23, 0x49, 0x5d, 0xe9,
	0xf1, 0x98, 0x46, 0xaa, 0x77, 0x18, 0x53, 0xea, 0x1d, 0x6e, 0xfe, 0xfd, 0x1b, 0xa8, 0xfa, 0x88,
	0x2a, 0xdb, 0xfe, 0x00, 0xcd, 0xdc, 0x0f, 0xe4, 0x67, 0x7c, 0xf7, 0x48, 0x62, 0x1b, 0xc2, 0x0e,
	0xed, 0x61, 0xa0, 0xd3, 0x8f, 0x24, 0xee, 0xe2, 0xe5, 0xef, 0xfc, 0xd3, 0x7f, 0xfc, 0xe1, 0x88,
	0x63, 0xd7, 0x6e, 0x00, 0xe9, 0x8d, 0x22, 0x1f, 0x1f, 0x9d, 0xb9, 0x1f, 0x64, 0xcf, 0xeb, 0xec,
	0xc5, 0x62, 0x9f, 0xf2, 0xab, 0x3f, 0xa7, 0x67, 0x7b, 0xdc, 0xc5, 0x0e, 0x30, 0x9c, 0xb3, 0xed,
	0x8c, 0x61, 0xde, 0x77, 0x8b, 0xb2, 0xca, 0x5e, 0x3a, 0x99, 0x58, 0xc9, 0xef, 0xed, 0x9c, 0x85,
	0x62, 0x7b, 0xfe, 0xac, 0x52, 0x30, 0xc2, 0x39, 0xa3, 0xbc, 0xe7, 0x2e, 0x9a, 0x92, 0xc0, 0x8d,
	0xb0, 0x65, 0xd2, 0xa6, 0xf6, 0x8c, 0xad, 0x0f, 0xbb, 0x4b, 0xc0, 0xee, 0x02, 0x7e, 0xae, 0xc8,
	0x8e, 0xf6, 0x7f, 0x88, 0xa6, 0x55, 0x4c, 0xfd, 0xd8, 0xbe, 0xdc, 0x9b, 0x27, 0x3c, 0xf3, 0xea,
	0xc3, 0x75, 0x09, 0xb8, 0x5e, 0xc4, 0x17, 0x8c, 0x5c, 0xeb, 0xc7, 0xf6, 0xef, 0x59, 0x68, 0x4e,
	0xd8, 0xbc, 0xfc, 0x46, 0xc8, 0x7e, 0xa9, 0xd8, 0xaf, 0xf1, 0x29, 0x93, 0x33, 0x18, 0x61, 0xdc,
	0xc5, 0x97, 0x41, 0x96, 0x4b, 0xf6, 0xf3, 0x99, 0x2c, 0x06, 0xb6, 0x1f, 0x59, 0xc8, 0xbe, 0x1f,
	0xe8, 0x0f, 0x7d, 0xec, 0x17, 0x4d, 0x75, 0xf1, 0x85, 0x67, 0x47, 0xce, 0x20, 0x64, 0x71, 0x17,
	0xbf, 0x00, 0x92, 0x3c, 0x8f, 0x2f, 0x66, 0x92, 0x14, 0x18, 0x76, 0xd0, 0xb9, 0xfb, 0x81, 0xf4,
	0x88, 0xc7, 0x5e, 0x36, 0xe9, 0x59, 0x7e, 0xe3, 0xd3, 0x67, 0x26, 0x16, 0x80, 0xe7, 0xbc, 0x3d,
	0x97, 0xf1, 0x94, 0x7b, 0xff, 0x7d, 0x0b, 0x3d, 0x27, 0xf4, 0xa1, 0x54, 0xe6, 0xda, 0xd7, 0xca,
	0xd4, 0xab, 0x3f, 0xf4, 0x71, 0x06, 0xa4, 0x8c, 0xbb, 0xf8, 0x0a, 0xc8, 0xb2, 0x88, 0x17, 0xb4,
	0x99, 0x50, 0x39, 0xb3, 0xa9, 0xd0, 0x1f, 0x39, 0x98, 0xa6, 0xc2, 0xf0, 0xd4, 0xc3, 0x19, 0x84,
	0xcc, 0x38, 0x15, 0x05, 0x86, 0x1f, 0x81, 0x6e, 0x0c, 0x4f, 0x1e, 0x4c, 0xba, 0x31, 0xbf, 0x8c,
	0xe8, 0x33, 0x37, 0x45, 0x7d, 0x98, 0xb8, 0xfd, 0x1a, 0x5d, 0xa2, 0xea, 0xa3, 0x03, 0xd3, 0x12,
	0x2d, 0xbc, 0x79, 0x70, 0xfa, 0x13, 0x19, 0x57, 0xaa, 0xc6, 0xea, 0x43, 0x34, 0x2b, 0xe6, 0x49,
	0x46, 0x5f, 0x2d, 0x9b, 0x75, 0x4d, 0x88, 0xde, 0x1a, 0xc0, 0xc0, 0x7d, 0x01, 0x3b, 0x9a, 0x45,
	0xc8, 0x9c, 0x9e, 0xd0, 0x25, 0x21, 0xbd, 0x33, 0x30, 0x2d, 0x09, 0xf5, 0xd5, 0x82, 0xd3, 0x87,
	0xc2, 0xb8, 0x2c, 0x64, 0x0e, 0xc0, 0x52, 0x2a, 0x9a, 0x37, 0xb1, 0x54, 0x1f, 0x18, 0x38, 0x7d,
	0x28, 0x72, 0x96, 0x78, 0x4e, 0x1b, 0x2b, 0xe3, 0xf0, 0x31, 0x04, 0x01, 0xa6, 0xea, 0x78, 0xfb,
	0xe5, 0x62, 0xd7, 0x25, 0x55, 0xf4, 0x7d, 0xb4, 0xfd, 0x22, 0x48, 0xb0, 0x84, 0x2f, 0x65, 0x12,
	0x18, 0xf9, 0xb1, 0x05, 0xa8, 0x57, 0x8e, 0x9b, 0x16, 0xa0, 0xa1, 0x24, 0xde, 0x19, 0x84, 0xcc,
	0xb8, 0x00, 0x0b, 0x0c, 0x3d, 0x84, 0xee, 0x07, 0xa2, 0xc6, 0xdc, 0xbe, 0x54, 0xec, 0x57, 0xaa,
	0x3f, 0xef, 0x33, 0xf2, 0x8b, 0xc0, 0x6d, 0x16, 0xcf, 0x64, 0xdc, 0xb2, 0x7e, 0xd9, 0x68, 0xf5,
	0xb2, 0x71, 0xd3, 0x68, 0x0d, 0xd5, 0xea, 0xce, 0x20, 0x64, 0xc6, 0xd1, 0x16, 0x18, 0xc2, 0x3a,
	0x2b, 0x54, 0x97, 0x9b, 0xd6, 0x99, 0xa9, 0x04, 0x7d, 0xb0, 0x75, 0x66, 0xe7, 0xeb, 0xac, 0xc8,
	0xe9, 0x5b, 0xa0, 0x07, 0xad, 0x8c, 0xdc, 0xa8, 0x87, 0x62, 0xa9, 0x79, 0x1f, 0xf6, 0x7c, 0xf8,
	0xb6, 0x34, 0x7c, 0x9d, 0x0f, 0xe3, 0xae, 0xd5, 0x90, 0x1b, 0xb9, 0x17, 0xeb, 0xcc, 0x07, 0xe3,
	0x2e, 0x2b, 0x5f, 0xe7, 0x03, 0x0b, 0x5e, 0xaa, 0xa4, 0x36, 0x2d, 0x78, 0xb5, 0xd0, 0xdc, 0xe9,
	0x43, 0x61, 0x5c, 0xf0, 0x32, 0x07, 0x98, 0xef, 0x42, 0x95, 0xb5, 0x69, 0xbe, 0x4d, 0xa5, 0xd8,
	0x43, 0xcf, 0x77, 0x91, 0xd3, 0x77, 0x2d, 0x74, 0xe1, 0x7e, 0x60, 0x2c, 0xa5, 0xb6, 0xbf, 0x6a,
	0x70, 0xa0, 0x25, 0x35, 0xd7, 0x7d, 0x24, 0xb9, 0x0a, 0x92, 0x2c, 0xdb, 0x8b, 0xb9, 0xa3, 0x35,
	0x72, 0xfc, 0x91, 0x85, 0x16, 0xee, 0x07, 0xe5, 0xd5, 0xc7, 0xf6, 0x0d, 0x83, 0x48, 0xbd, 0x2a,
	0xab, 0x9d, 0xe1, 0x3e, 0x88, 0xbb, 0xf8, 0x15, 0x10, 0xf5, 0x45, 0xfb, 0x72, 0x2e, 0x6a, 0xb9,
	0x38, 0x9f, 0x58, 0xa8, 0xc6, 0xfd, 0x67, 0xa1, 0x12, 0xd9, 0x7e, 0xa5, 0xc4, 0x63, 0x9b, 0x6a,
	0x96, 0xfb, 0xe8, 0xef, 0x25, 0x10, 0xea, 0x05, 0xbc, 0xa4, 0xfa, 0xec, 0x22, 0x4f, 0x38, 0x3b,
	0xc8, 0xa5, 0x57, 0xa6, 0xb3, 0x83, 0x56, 0xa7, 0x39, 0xd8, 0xd9, 0xc1, 0xce, 0xcf, 0x0e, 0x4a,
	0xff, 0xdc, 0x73, 0x6a, 0x15, 0x5f, 0xc6, 0x35, 0x5b, 0x2c, 0x11, 0x75, 0x06, 0x21, 0x33, 0xbb,
	0x0e, 0x9d, 0x21, 0x0b, 0xd4, 0x0c, 0x65, 0x61, 0xa6, 0x40, 0xcd, 0x5c, 0x3d, 0x36, 0x74, 0xa0,
	0x66, 0xe2, 0x06, 0x33, 0x20, 0x97, 0x99, 0x99, 0x66, 0x40, 0x2b, 0x43, 0x1b, 0x7a, 0x06, 0x94,
	0xfe, 0x3b, 0xe8, 0xac, 0x1c, 0xb8, 0xd8, 0x4b, 0xbd, 0xe2, 0x1e, 0xca, 0xad, 0x37, 0x41, 0xdc,
	0xc5, 0xcf, 0x03, 0xc3, 0xe7, 0xec, 0x59, 0x43, 0x5c, 0xc4, 0x22, 0x51, 0xb5, 0x04, 0xcb, 0x14,
	0x89, 0x16, 0x2a, 0xbd, 0x9c, 0xfe, 0x44, 0x79, 0x24, 0x6a, 0xe7, 0x91, 0xa8, 0xc6, 0x2a, 0x46,
	0xe7, 0xef, 0x07, 0x4a, 0xfd, 0x95, 0x6d, 0x48, 0xfb, 0xe8, 0x05, 0x5a, 0x7d, 0x34, 0xbc, 0x08,
	0x5c, 0x6b, 0xf6, 0x7c, 0xee, 0xa4, 0x15, 0x0e, 0x30, 0x66, 0xad, 0xa6, 0xe9, 0x72, 0x19, 0x57,
	0x29, 0xc3, 0xee, 0xf4, 0x27, 0x32, 0x8e, 0x59, 0x63, 0xf5, 0x6d, 0x0b, 0xcd, 0x08, 0x64, 0x56,
	0x8d, 0x63, 0x5f, 0x29, 0xeb, 0x5b, 0x2e, 0x08, 0x72, 0x06, 0xa0, 0x32, 0x66, 0x5a, 0x74, 0x6e,
	0x6c, 0x9d, 0xeb, 0x15, 0x36, 0xa6, 0x75, 0x6e, 0x28, 0xdc, 0x71, 0x06, 0x21, 0x33, 0xae, 0xf3,
	0x02, 0xc3, 0xdf, 0xb6, 0xe8, 0x96, 0x59, 0x28, 0x3d, 0x31, 0x6d, 0x99, 0xa6, 0x72, 0x1d, 0x67,
	0x20, 0x3a, 0xe3, 0xe6, 0x59, 0xe4, 0x09, 0x79, 0x13, 0xb5, 0xe8, 0xc4, 0x78, 0x28, 0xd3, 0xcb,
	0x52, 0x06, 0xcb, 0x9b, 0x48, 0xf6, 0xa0, 0xf1, 0x80, 0x40, 0x45, 0xaa, 0xc4, 0x30, 0x05, 0x2a,
	0x6a, 0x61, 0x88, 0xd3, 0x87, 0xc2, 0x78, 0x18, 0x92, 0x39, 0xa4, 0xe0, 0xd6, 0xa4, 0x72, 0x08,
	0xa3, 0x5b, 0x53, 0x6b, 0x3b, 0x9c, 0x7e, 0x24, 0x66, 0xdf, 0x26, 0x33, 0x61, 0x96, 0xaf, 0x55,
	0x3e, 0x98, 0x2c, 0xbf, 0x58, 0x80, 0xe1, 0x0c, 0x40, 0x65, 0xb4, 0x7c, 0x9d, 0x9b, 0x24, 0x43,
	0x5e, 0xc2, 0x50, 0x2a, 0x83, 0x52, 0x44, 0xe1, 0x0c, 0x40, 0x55, 0x2e, 0x83, 0xc4, 0x8d, 0x59,
	0x7d, 0xa1, 0xf8, 0xc0, 0x36, 0x5f, 0xae, 0x15, 0x8a, 0x08, 0x9c, 0x81, 0xe8, 0x8c, 0x56, 0x5f,
	0xe4, 0xf9, 0xb1, 0x94, 0xa9, 0xd6, 0x9a, 0x5e, 0x2e, 0x3b, 0xff, 0x16, 0x25, 0x1a, 0xe8, 0x90,
	0x6a, 0x5f, 0xd2, 0x8e, 0xc9, 0x1a, 0xbf, 0x13, 0x3a, 0x33, 0x5a, 0x65, 0x83, 0x69, 0x66, 0x8a,
	0xc5, 0x0f, 0x7d, 0xf8, 0xf3, 0x19, 0xc1, 0x35, 0x2d, 0x29, 0x93, 0x73, 0x81, 0x2d, 0x41, 0x2d,
	0x27, 0x30, 0xad, 0xfd, 0x42, 0x1d, 0x84, 0xd3, 0x9f, 0xc8, 0x98, 0x90, 0xd1, 0x58, 0x11, 0x7a,
	0x2c, 0x16, 0x97, 0xf5, 0xa6, 0x63, 0xb1, 0x54, 0x92, 0xe0, 0xf4, 0x6a, 0x36, 0x9e, 0x8b, 0xb3,
	0x8e, 0xa5, 0x1c, 0x08, 0x43, 0x94, 0x66, 0x38, 0x32, 0x66, 0x7d, 0x28, 0x7a, 0xe4, 0x40, 0x18,
	0x87, 0xcc, 0xd4, 0xb5, 0x5b, 0xef, 0x3e, 0xf7, 0xc8, 0x59, 0x10, 0x37, 0x10, 0x9d, 0x31, 0xeb,
	0x54, 0xe4, 0xf9, 0x3d, 0x30, 0x75, 0xe3, 0x2d, 0xf4, 0xcb, 0x03, 0x5e, 0x6b, 0x93, 0x27, 0xce,
	0xa0, 0xa4, 0xc6, 0xe4, 0x8c, 0x91, 0xf9, 0x9f, 0x59, 0xe8, 0x12, 0x37, 0x09, 0xc3, 0x9d, 0x55,
	0x1a, 0x27, 0xa6, 0xb3, 0x5b, 0x19, 0xb9, 0x33, 0x30, 0x6d, 0xdc, 0xc5, 0x5f, 0x03, 0x01, 0xaf,
	0xe2, 0x2b, 0xaa, 0x61, 0x96, 0x48, 0xf1, 0xa7, 0x16, 0x5a, 0x14, 0x4b, 0x67, 0x70, 0x41, 0xcb,
	0xee, 0xe2, 0xfa, 0xac, 0xd9, 0x57, 0x41, 0xb4, 0x97, 0xf0, 0x8b, 0xda, 0x9a, 0x2d, 0x61, 0xfc,
	0x6d, 0x2b, 0xcf, 0x69, 0x4a, 0x17, 0x6e, 0xa6, 0xe3, 0x82, 0xf9, 0x5e, 0xee, 0x94, 0x59, 0x4d,
	0xa9, 0x93, 0xd5, 0x8b, 0x3f, 0xfe, 0xb7, 0xc5, 0xaf, 0xfc, 0xf8, 0xd3, 0x45, 0xeb, 0x1f, 0x3e,
	0x5d, 0xb4, 0xfe, 0xf5, 0xd3, 0x45, 0xeb, 0x4f, 0xfe, 0x7d, 0xf1, 0x2b, 0xdf, 0xa8, 0xb8, 0x5d,
	0x7f, 0x6f, 0x0c, 0xfe, 0x8d, 0xf3, 0xd6, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x35, 0xe5, 0x98,
	0xdc, 0xf9, 0x53, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorldClient is the client API for World service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorldClient interface {
	OnBaseUserInfoGet(ctx context.Context, in *BaseUserInfoReq, opts ...grpc.CallOption) (*BaseUserInfoRsp, error)
	OnEnterRoom(ctx context.Context, in *EnterRoomReq, opts ...grpc.CallOption) (*EnterRoomRsp, error)
	OnLeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnLeaveRoomLog(ctx context.Context, in *LeaveRoomLogReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnLeaveRoomLogDx(ctx context.Context, in *LeaveRoomLogDxReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnUpdatePreventCheat(ctx context.Context, in *UpdatePreventCheatReq, opts ...grpc.CallOption) (*UpdatePreventCheatRsp, error)
	OnRefreshUserMoney(ctx context.Context, in *RefreshUserMoneyReq, opts ...grpc.CallOption) (*RefreshUserMoneyRsp, error)
	OnCountPlayer(ctx context.Context, in *CountPlayerReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnUpdateAwardGoldPool(ctx context.Context, in *UpdateAwardGoldPoolReq, opts ...grpc.CallOption) (*UpdateAwardGoldPoolRsp, error)
	OnGetJackpotRecord(ctx context.Context, in *GetJackpotRecordReq, opts ...grpc.CallOption) (*GetJackpotRecordRsp, error)
	OnInsertJackpotRecord(ctx context.Context, in *InsertJackpotRecordReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnGetJackpotPool(ctx context.Context, in *GetJackpotPoolReq, opts ...grpc.CallOption) (*GetJackpotPoolRsp, error)
	OnUpdateJackpotPool(ctx context.Context, in *UpdateJackpotPoolReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnGetVipInfos(ctx context.Context, in *GetVipInfosReq, opts ...grpc.CallOption) (*GetVipInfosRsp, error)
	OnUpdateMoney(ctx context.Context, in *UpdateMoneyReq, opts ...grpc.CallOption) (*UpdateMoneyRsp, error)
	OnAwardGoldPoolUserLog(ctx context.Context, in *AwardGoldPoolUserLogReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnUpdatEextendCoin(ctx context.Context, in *UpdatEextendCoinReq, opts ...grpc.CallOption) (*UpdatEextendCoinRsp, error)
	OnShutDwon(ctx context.Context, in *ShutDwonReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnCreateCustomRoom(ctx context.Context, in *CreateCustomRoomReq, opts ...grpc.CallOption) (*CreateCustomRoomRsp, error)
	OnTableRecordUpdate(ctx context.Context, in *TableRecordUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnCustomGameResult(ctx context.Context, in *CustomGameResultReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnCommonUserLogAdd(ctx context.Context, in *CommonUserLogAddReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnPublishMail(ctx context.Context, in *PublishMailReq, opts ...grpc.CallOption) (*PublishMailRsp, error)
	OnNotifyLoginSucess(ctx context.Context, in *NotifyLoginSucessReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnGameLogReturnRatesAdd(ctx context.Context, in *GameLogReturnRatesAddReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnGiftTicketUserTicketUpdate(ctx context.Context, in *GiftTicketUserTicketUpdateReq, opts ...grpc.CallOption) (*GiftTicketUserTicketUpdateRsp, error)
	OnAwardUserTelephoneBill(ctx context.Context, in *AwardUserTelephoneBillReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnEveryGameLog(ctx context.Context, in *EveryGameLogReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnClubEveryGameLog(ctx context.Context, in *ClubEveryGameLogReq, opts ...grpc.CallOption) (*ClubEveryGameLogRsp, error)
	OnRemoveUserLastMoney(ctx context.Context, in *RemoveUserLastMoneyReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnSaveVipPoint(ctx context.Context, in *SaveVipPointReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnGetVipInfo(ctx context.Context, in *GetVipInfoReq, opts ...grpc.CallOption) (*GetVipInfoRsp, error)
	OnUserInfoVipGet(ctx context.Context, in *UserInfoVipGetReq, opts ...grpc.CallOption) (*UserInfoVipGetRsp, error)
	OnPlayerConsume(ctx context.Context, in *PlayerConsumeReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnPlayerGameInfo(ctx context.Context, in *PlayerGameInfoReq, opts ...grpc.CallOption) (*PlayerGameInfoRsp, error)
	OnPlayerArenaInfo(ctx context.Context, in *PlayerArenaInfoReq, opts ...grpc.CallOption) (*PlayerArenaInfoRsp, error)
	OnFrequentArgument(ctx context.Context, in *FrequentArgumentReq, opts ...grpc.CallOption) (*FrequentArgumentRsp, error)
	OnWebUpdateUserCash(ctx context.Context, in *WebUpdateUserCashReq, opts ...grpc.CallOption) (*WebUpdateUserCashRsp, error)
	OnGameCutCardLog(ctx context.Context, in *GameCutCardLogReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnAddMailInfo(ctx context.Context, in *AddMailInfoReq, opts ...grpc.CallOption) (*AddMailInfoRsp, error)
	OnSendMailInfo(ctx context.Context, in *SendMailInfoReq, opts ...grpc.CallOption) (*SendMailInfoRsp, error)
	OnCheckUserCharge(ctx context.Context, in *CheckUserChargeReq, opts ...grpc.CallOption) (*CheckUserChargeRsp, error)
	OnCheckChargeProp(ctx context.Context, in *CheckChargePropReq, opts ...grpc.CallOption) (*CheckChargePropRsp, error)
	OnGetUserBestResult(ctx context.Context, in *GetUserBestResultReq, opts ...grpc.CallOption) (*GetUserBestResultRsp, error)
	OnUpdateUserBestResult(ctx context.Context, in *UpdateUserBestResultReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnInsertCommonLog(ctx context.Context, in *InsertCommonLogReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnQueryCommonLog(ctx context.Context, in *QueryCommonLogReq, opts ...grpc.CallOption) (*QueryCommonLogRsp, error)
	OnGetRobot(ctx context.Context, in *GetRobotReq, opts ...grpc.CallOption) (*GetRobotRsp, error)
	OnUpdateRobot(ctx context.Context, in *UpdateRobotReq, opts ...grpc.CallOption) (*UpdateRobotRsp, error)
	OnGetMultiUserMoney(ctx context.Context, in *GetMultiUserMoneyReq, opts ...grpc.CallOption) (*GetMultiUserMoneyRsp, error)
	OnGetMultiUserGameInfo(ctx context.Context, in *GetMultiUserGameInfoReq, opts ...grpc.CallOption) (*GetMultiUserGameInfoRsp, error)
	OnQueryTridentWinRecordRequst(ctx context.Context, in *QueryTridentWinRecordReq, opts ...grpc.CallOption) (*QueryTridentWinRecordRsp, error)
	OnInsertTridentWinRecordRequst(ctx context.Context, in *InsetTridentWinRecordReq, opts ...grpc.CallOption) (*CommonResp, error)
	OnUpdateConsumeStat(ctx context.Context, in *OnUpdateConsumeStatReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type worldClient struct {
	cc *grpc.ClientConn
}

func NewWorldClient(cc *grpc.ClientConn) WorldClient {
	return &worldClient{cc}
}

func (c *worldClient) OnBaseUserInfoGet(ctx context.Context, in *BaseUserInfoReq, opts ...grpc.CallOption) (*BaseUserInfoRsp, error) {
	out := new(BaseUserInfoRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnBaseUserInfoGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnEnterRoom(ctx context.Context, in *EnterRoomReq, opts ...grpc.CallOption) (*EnterRoomRsp, error) {
	out := new(EnterRoomRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnEnterRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnLeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnLeaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnLeaveRoomLog(ctx context.Context, in *LeaveRoomLogReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnLeaveRoomLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnLeaveRoomLogDx(ctx context.Context, in *LeaveRoomLogDxReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnLeaveRoomLogDx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdatePreventCheat(ctx context.Context, in *UpdatePreventCheatReq, opts ...grpc.CallOption) (*UpdatePreventCheatRsp, error) {
	out := new(UpdatePreventCheatRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdatePreventCheat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnRefreshUserMoney(ctx context.Context, in *RefreshUserMoneyReq, opts ...grpc.CallOption) (*RefreshUserMoneyRsp, error) {
	out := new(RefreshUserMoneyRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnRefreshUserMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnCountPlayer(ctx context.Context, in *CountPlayerReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnCountPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdateAwardGoldPool(ctx context.Context, in *UpdateAwardGoldPoolReq, opts ...grpc.CallOption) (*UpdateAwardGoldPoolRsp, error) {
	out := new(UpdateAwardGoldPoolRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdateAwardGoldPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetJackpotRecord(ctx context.Context, in *GetJackpotRecordReq, opts ...grpc.CallOption) (*GetJackpotRecordRsp, error) {
	out := new(GetJackpotRecordRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetJackpotRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnInsertJackpotRecord(ctx context.Context, in *InsertJackpotRecordReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnInsertJackpotRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetJackpotPool(ctx context.Context, in *GetJackpotPoolReq, opts ...grpc.CallOption) (*GetJackpotPoolRsp, error) {
	out := new(GetJackpotPoolRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetJackpotPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdateJackpotPool(ctx context.Context, in *UpdateJackpotPoolReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdateJackpotPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetVipInfos(ctx context.Context, in *GetVipInfosReq, opts ...grpc.CallOption) (*GetVipInfosRsp, error) {
	out := new(GetVipInfosRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetVipInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdateMoney(ctx context.Context, in *UpdateMoneyReq, opts ...grpc.CallOption) (*UpdateMoneyRsp, error) {
	out := new(UpdateMoneyRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdateMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnAwardGoldPoolUserLog(ctx context.Context, in *AwardGoldPoolUserLogReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnAwardGoldPoolUserLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdatEextendCoin(ctx context.Context, in *UpdatEextendCoinReq, opts ...grpc.CallOption) (*UpdatEextendCoinRsp, error) {
	out := new(UpdatEextendCoinRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdatEextendCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnShutDwon(ctx context.Context, in *ShutDwonReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnShutDwon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnCreateCustomRoom(ctx context.Context, in *CreateCustomRoomReq, opts ...grpc.CallOption) (*CreateCustomRoomRsp, error) {
	out := new(CreateCustomRoomRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnCreateCustomRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnTableRecordUpdate(ctx context.Context, in *TableRecordUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnTableRecordUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnCustomGameResult(ctx context.Context, in *CustomGameResultReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnCustomGameResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnCommonUserLogAdd(ctx context.Context, in *CommonUserLogAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnCommonUserLogAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnPublishMail(ctx context.Context, in *PublishMailReq, opts ...grpc.CallOption) (*PublishMailRsp, error) {
	out := new(PublishMailRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnPublishMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnNotifyLoginSucess(ctx context.Context, in *NotifyLoginSucessReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnNotifyLoginSucess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGameLogReturnRatesAdd(ctx context.Context, in *GameLogReturnRatesAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGameLogReturnRatesAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGiftTicketUserTicketUpdate(ctx context.Context, in *GiftTicketUserTicketUpdateReq, opts ...grpc.CallOption) (*GiftTicketUserTicketUpdateRsp, error) {
	out := new(GiftTicketUserTicketUpdateRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGiftTicketUserTicketUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnAwardUserTelephoneBill(ctx context.Context, in *AwardUserTelephoneBillReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnAwardUserTelephoneBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnEveryGameLog(ctx context.Context, in *EveryGameLogReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnEveryGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnClubEveryGameLog(ctx context.Context, in *ClubEveryGameLogReq, opts ...grpc.CallOption) (*ClubEveryGameLogRsp, error) {
	out := new(ClubEveryGameLogRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnClubEveryGameLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnRemoveUserLastMoney(ctx context.Context, in *RemoveUserLastMoneyReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnRemoveUserLastMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnSaveVipPoint(ctx context.Context, in *SaveVipPointReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnSaveVipPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetVipInfo(ctx context.Context, in *GetVipInfoReq, opts ...grpc.CallOption) (*GetVipInfoRsp, error) {
	out := new(GetVipInfoRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetVipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUserInfoVipGet(ctx context.Context, in *UserInfoVipGetReq, opts ...grpc.CallOption) (*UserInfoVipGetRsp, error) {
	out := new(UserInfoVipGetRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUserInfoVipGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnPlayerConsume(ctx context.Context, in *PlayerConsumeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnPlayerConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnPlayerGameInfo(ctx context.Context, in *PlayerGameInfoReq, opts ...grpc.CallOption) (*PlayerGameInfoRsp, error) {
	out := new(PlayerGameInfoRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnPlayerGameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnPlayerArenaInfo(ctx context.Context, in *PlayerArenaInfoReq, opts ...grpc.CallOption) (*PlayerArenaInfoRsp, error) {
	out := new(PlayerArenaInfoRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnPlayerArenaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnFrequentArgument(ctx context.Context, in *FrequentArgumentReq, opts ...grpc.CallOption) (*FrequentArgumentRsp, error) {
	out := new(FrequentArgumentRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnFrequentArgument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnWebUpdateUserCash(ctx context.Context, in *WebUpdateUserCashReq, opts ...grpc.CallOption) (*WebUpdateUserCashRsp, error) {
	out := new(WebUpdateUserCashRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnWebUpdateUserCash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGameCutCardLog(ctx context.Context, in *GameCutCardLogReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGameCutCardLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnAddMailInfo(ctx context.Context, in *AddMailInfoReq, opts ...grpc.CallOption) (*AddMailInfoRsp, error) {
	out := new(AddMailInfoRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnAddMailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnSendMailInfo(ctx context.Context, in *SendMailInfoReq, opts ...grpc.CallOption) (*SendMailInfoRsp, error) {
	out := new(SendMailInfoRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnSendMailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnCheckUserCharge(ctx context.Context, in *CheckUserChargeReq, opts ...grpc.CallOption) (*CheckUserChargeRsp, error) {
	out := new(CheckUserChargeRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnCheckUserCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnCheckChargeProp(ctx context.Context, in *CheckChargePropReq, opts ...grpc.CallOption) (*CheckChargePropRsp, error) {
	out := new(CheckChargePropRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnCheckChargeProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetUserBestResult(ctx context.Context, in *GetUserBestResultReq, opts ...grpc.CallOption) (*GetUserBestResultRsp, error) {
	out := new(GetUserBestResultRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetUserBestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdateUserBestResult(ctx context.Context, in *UpdateUserBestResultReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdateUserBestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnInsertCommonLog(ctx context.Context, in *InsertCommonLogReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnInsertCommonLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnQueryCommonLog(ctx context.Context, in *QueryCommonLogReq, opts ...grpc.CallOption) (*QueryCommonLogRsp, error) {
	out := new(QueryCommonLogRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnQueryCommonLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetRobot(ctx context.Context, in *GetRobotReq, opts ...grpc.CallOption) (*GetRobotRsp, error) {
	out := new(GetRobotRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdateRobot(ctx context.Context, in *UpdateRobotReq, opts ...grpc.CallOption) (*UpdateRobotRsp, error) {
	out := new(UpdateRobotRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetMultiUserMoney(ctx context.Context, in *GetMultiUserMoneyReq, opts ...grpc.CallOption) (*GetMultiUserMoneyRsp, error) {
	out := new(GetMultiUserMoneyRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetMultiUserMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnGetMultiUserGameInfo(ctx context.Context, in *GetMultiUserGameInfoReq, opts ...grpc.CallOption) (*GetMultiUserGameInfoRsp, error) {
	out := new(GetMultiUserGameInfoRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnGetMultiUserGameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnQueryTridentWinRecordRequst(ctx context.Context, in *QueryTridentWinRecordReq, opts ...grpc.CallOption) (*QueryTridentWinRecordRsp, error) {
	out := new(QueryTridentWinRecordRsp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnQueryTridentWinRecordRequst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnInsertTridentWinRecordRequst(ctx context.Context, in *InsetTridentWinRecordReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnInsertTridentWinRecordRequst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldClient) OnUpdateConsumeStat(ctx context.Context, in *OnUpdateConsumeStatReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/world.service.v1.World/OnUpdateConsumeStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldServer is the server API for World service.
type WorldServer interface {
	OnBaseUserInfoGet(context.Context, *BaseUserInfoReq) (*BaseUserInfoRsp, error)
	OnEnterRoom(context.Context, *EnterRoomReq) (*EnterRoomRsp, error)
	OnLeaveRoom(context.Context, *LeaveRoomReq) (*CommonResp, error)
	OnLeaveRoomLog(context.Context, *LeaveRoomLogReq) (*CommonResp, error)
	OnLeaveRoomLogDx(context.Context, *LeaveRoomLogDxReq) (*CommonResp, error)
	OnUpdatePreventCheat(context.Context, *UpdatePreventCheatReq) (*UpdatePreventCheatRsp, error)
	OnRefreshUserMoney(context.Context, *RefreshUserMoneyReq) (*RefreshUserMoneyRsp, error)
	OnCountPlayer(context.Context, *CountPlayerReq) (*CommonResp, error)
	OnUpdateAwardGoldPool(context.Context, *UpdateAwardGoldPoolReq) (*UpdateAwardGoldPoolRsp, error)
	OnGetJackpotRecord(context.Context, *GetJackpotRecordReq) (*GetJackpotRecordRsp, error)
	OnInsertJackpotRecord(context.Context, *InsertJackpotRecordReq) (*CommonResp, error)
	OnGetJackpotPool(context.Context, *GetJackpotPoolReq) (*GetJackpotPoolRsp, error)
	OnUpdateJackpotPool(context.Context, *UpdateJackpotPoolReq) (*CommonResp, error)
	OnGetVipInfos(context.Context, *GetVipInfosReq) (*GetVipInfosRsp, error)
	OnUpdateMoney(context.Context, *UpdateMoneyReq) (*UpdateMoneyRsp, error)
	OnAwardGoldPoolUserLog(context.Context, *AwardGoldPoolUserLogReq) (*CommonResp, error)
	OnUpdatEextendCoin(context.Context, *UpdatEextendCoinReq) (*UpdatEextendCoinRsp, error)
	OnShutDwon(context.Context, *ShutDwonReq) (*CommonResp, error)
	OnCreateCustomRoom(context.Context, *CreateCustomRoomReq) (*CreateCustomRoomRsp, error)
	OnTableRecordUpdate(context.Context, *TableRecordUpdateReq) (*CommonResp, error)
	OnCustomGameResult(context.Context, *CustomGameResultReq) (*CommonResp, error)
	OnCommonUserLogAdd(context.Context, *CommonUserLogAddReq) (*CommonResp, error)
	OnPublishMail(context.Context, *PublishMailReq) (*PublishMailRsp, error)
	OnNotifyLoginSucess(context.Context, *NotifyLoginSucessReq) (*CommonResp, error)
	OnGameLogReturnRatesAdd(context.Context, *GameLogReturnRatesAddReq) (*CommonResp, error)
	OnGiftTicketUserTicketUpdate(context.Context, *GiftTicketUserTicketUpdateReq) (*GiftTicketUserTicketUpdateRsp, error)
	OnAwardUserTelephoneBill(context.Context, *AwardUserTelephoneBillReq) (*CommonResp, error)
	OnEveryGameLog(context.Context, *EveryGameLogReq) (*CommonResp, error)
	OnClubEveryGameLog(context.Context, *ClubEveryGameLogReq) (*ClubEveryGameLogRsp, error)
	OnRemoveUserLastMoney(context.Context, *RemoveUserLastMoneyReq) (*CommonResp, error)
	OnSaveVipPoint(context.Context, *SaveVipPointReq) (*CommonResp, error)
	OnGetVipInfo(context.Context, *GetVipInfoReq) (*GetVipInfoRsp, error)
	OnUserInfoVipGet(context.Context, *UserInfoVipGetReq) (*UserInfoVipGetRsp, error)
	OnPlayerConsume(context.Context, *PlayerConsumeReq) (*CommonResp, error)
	OnPlayerGameInfo(context.Context, *PlayerGameInfoReq) (*PlayerGameInfoRsp, error)
	OnPlayerArenaInfo(context.Context, *PlayerArenaInfoReq) (*PlayerArenaInfoRsp, error)
	OnFrequentArgument(context.Context, *FrequentArgumentReq) (*FrequentArgumentRsp, error)
	OnWebUpdateUserCash(context.Context, *WebUpdateUserCashReq) (*WebUpdateUserCashRsp, error)
	OnGameCutCardLog(context.Context, *GameCutCardLogReq) (*CommonResp, error)
	OnAddMailInfo(context.Context, *AddMailInfoReq) (*AddMailInfoRsp, error)
	OnSendMailInfo(context.Context, *SendMailInfoReq) (*SendMailInfoRsp, error)
	OnCheckUserCharge(context.Context, *CheckUserChargeReq) (*CheckUserChargeRsp, error)
	OnCheckChargeProp(context.Context, *CheckChargePropReq) (*CheckChargePropRsp, error)
	OnGetUserBestResult(context.Context, *GetUserBestResultReq) (*GetUserBestResultRsp, error)
	OnUpdateUserBestResult(context.Context, *UpdateUserBestResultReq) (*CommonResp, error)
	OnInsertCommonLog(context.Context, *InsertCommonLogReq) (*CommonResp, error)
	OnQueryCommonLog(context.Context, *QueryCommonLogReq) (*QueryCommonLogRsp, error)
	OnGetRobot(context.Context, *GetRobotReq) (*GetRobotRsp, error)
	OnUpdateRobot(context.Context, *UpdateRobotReq) (*UpdateRobotRsp, error)
	OnGetMultiUserMoney(context.Context, *GetMultiUserMoneyReq) (*GetMultiUserMoneyRsp, error)
	OnGetMultiUserGameInfo(context.Context, *GetMultiUserGameInfoReq) (*GetMultiUserGameInfoRsp, error)
	OnQueryTridentWinRecordRequst(context.Context, *QueryTridentWinRecordReq) (*QueryTridentWinRecordRsp, error)
	OnInsertTridentWinRecordRequst(context.Context, *InsetTridentWinRecordReq) (*CommonResp, error)
	OnUpdateConsumeStat(context.Context, *OnUpdateConsumeStatReq) (*CommonResp, error)
}

// UnimplementedWorldServer can be embedded to have forward compatible implementations.
type UnimplementedWorldServer struct {
}

func (*UnimplementedWorldServer) OnBaseUserInfoGet(ctx context.Context, req *BaseUserInfoReq) (*BaseUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBaseUserInfoGet not implemented")
}
func (*UnimplementedWorldServer) OnEnterRoom(ctx context.Context, req *EnterRoomReq) (*EnterRoomRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEnterRoom not implemented")
}
func (*UnimplementedWorldServer) OnLeaveRoom(ctx context.Context, req *LeaveRoomReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLeaveRoom not implemented")
}
func (*UnimplementedWorldServer) OnLeaveRoomLog(ctx context.Context, req *LeaveRoomLogReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLeaveRoomLog not implemented")
}
func (*UnimplementedWorldServer) OnLeaveRoomLogDx(ctx context.Context, req *LeaveRoomLogDxReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLeaveRoomLogDx not implemented")
}
func (*UnimplementedWorldServer) OnUpdatePreventCheat(ctx context.Context, req *UpdatePreventCheatReq) (*UpdatePreventCheatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdatePreventCheat not implemented")
}
func (*UnimplementedWorldServer) OnRefreshUserMoney(ctx context.Context, req *RefreshUserMoneyReq) (*RefreshUserMoneyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnRefreshUserMoney not implemented")
}
func (*UnimplementedWorldServer) OnCountPlayer(ctx context.Context, req *CountPlayerReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCountPlayer not implemented")
}
func (*UnimplementedWorldServer) OnUpdateAwardGoldPool(ctx context.Context, req *UpdateAwardGoldPoolReq) (*UpdateAwardGoldPoolRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdateAwardGoldPool not implemented")
}
func (*UnimplementedWorldServer) OnGetJackpotRecord(ctx context.Context, req *GetJackpotRecordReq) (*GetJackpotRecordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetJackpotRecord not implemented")
}
func (*UnimplementedWorldServer) OnInsertJackpotRecord(ctx context.Context, req *InsertJackpotRecordReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnInsertJackpotRecord not implemented")
}
func (*UnimplementedWorldServer) OnGetJackpotPool(ctx context.Context, req *GetJackpotPoolReq) (*GetJackpotPoolRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetJackpotPool not implemented")
}
func (*UnimplementedWorldServer) OnUpdateJackpotPool(ctx context.Context, req *UpdateJackpotPoolReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdateJackpotPool not implemented")
}
func (*UnimplementedWorldServer) OnGetVipInfos(ctx context.Context, req *GetVipInfosReq) (*GetVipInfosRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetVipInfos not implemented")
}
func (*UnimplementedWorldServer) OnUpdateMoney(ctx context.Context, req *UpdateMoneyReq) (*UpdateMoneyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdateMoney not implemented")
}
func (*UnimplementedWorldServer) OnAwardGoldPoolUserLog(ctx context.Context, req *AwardGoldPoolUserLogReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAwardGoldPoolUserLog not implemented")
}
func (*UnimplementedWorldServer) OnUpdatEextendCoin(ctx context.Context, req *UpdatEextendCoinReq) (*UpdatEextendCoinRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdatEextendCoin not implemented")
}
func (*UnimplementedWorldServer) OnShutDwon(ctx context.Context, req *ShutDwonReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnShutDwon not implemented")
}
func (*UnimplementedWorldServer) OnCreateCustomRoom(ctx context.Context, req *CreateCustomRoomReq) (*CreateCustomRoomRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCreateCustomRoom not implemented")
}
func (*UnimplementedWorldServer) OnTableRecordUpdate(ctx context.Context, req *TableRecordUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTableRecordUpdate not implemented")
}
func (*UnimplementedWorldServer) OnCustomGameResult(ctx context.Context, req *CustomGameResultReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCustomGameResult not implemented")
}
func (*UnimplementedWorldServer) OnCommonUserLogAdd(ctx context.Context, req *CommonUserLogAddReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCommonUserLogAdd not implemented")
}
func (*UnimplementedWorldServer) OnPublishMail(ctx context.Context, req *PublishMailReq) (*PublishMailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPublishMail not implemented")
}
func (*UnimplementedWorldServer) OnNotifyLoginSucess(ctx context.Context, req *NotifyLoginSucessReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNotifyLoginSucess not implemented")
}
func (*UnimplementedWorldServer) OnGameLogReturnRatesAdd(ctx context.Context, req *GameLogReturnRatesAddReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGameLogReturnRatesAdd not implemented")
}
func (*UnimplementedWorldServer) OnGiftTicketUserTicketUpdate(ctx context.Context, req *GiftTicketUserTicketUpdateReq) (*GiftTicketUserTicketUpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGiftTicketUserTicketUpdate not implemented")
}
func (*UnimplementedWorldServer) OnAwardUserTelephoneBill(ctx context.Context, req *AwardUserTelephoneBillReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAwardUserTelephoneBill not implemented")
}
func (*UnimplementedWorldServer) OnEveryGameLog(ctx context.Context, req *EveryGameLogReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEveryGameLog not implemented")
}
func (*UnimplementedWorldServer) OnClubEveryGameLog(ctx context.Context, req *ClubEveryGameLogReq) (*ClubEveryGameLogRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnClubEveryGameLog not implemented")
}
func (*UnimplementedWorldServer) OnRemoveUserLastMoney(ctx context.Context, req *RemoveUserLastMoneyReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnRemoveUserLastMoney not implemented")
}
func (*UnimplementedWorldServer) OnSaveVipPoint(ctx context.Context, req *SaveVipPointReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSaveVipPoint not implemented")
}
func (*UnimplementedWorldServer) OnGetVipInfo(ctx context.Context, req *GetVipInfoReq) (*GetVipInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetVipInfo not implemented")
}
func (*UnimplementedWorldServer) OnUserInfoVipGet(ctx context.Context, req *UserInfoVipGetReq) (*UserInfoVipGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUserInfoVipGet not implemented")
}
func (*UnimplementedWorldServer) OnPlayerConsume(ctx context.Context, req *PlayerConsumeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPlayerConsume not implemented")
}
func (*UnimplementedWorldServer) OnPlayerGameInfo(ctx context.Context, req *PlayerGameInfoReq) (*PlayerGameInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPlayerGameInfo not implemented")
}
func (*UnimplementedWorldServer) OnPlayerArenaInfo(ctx context.Context, req *PlayerArenaInfoReq) (*PlayerArenaInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPlayerArenaInfo not implemented")
}
func (*UnimplementedWorldServer) OnFrequentArgument(ctx context.Context, req *FrequentArgumentReq) (*FrequentArgumentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnFrequentArgument not implemented")
}
func (*UnimplementedWorldServer) OnWebUpdateUserCash(ctx context.Context, req *WebUpdateUserCashReq) (*WebUpdateUserCashRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnWebUpdateUserCash not implemented")
}
func (*UnimplementedWorldServer) OnGameCutCardLog(ctx context.Context, req *GameCutCardLogReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGameCutCardLog not implemented")
}
func (*UnimplementedWorldServer) OnAddMailInfo(ctx context.Context, req *AddMailInfoReq) (*AddMailInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAddMailInfo not implemented")
}
func (*UnimplementedWorldServer) OnSendMailInfo(ctx context.Context, req *SendMailInfoReq) (*SendMailInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSendMailInfo not implemented")
}
func (*UnimplementedWorldServer) OnCheckUserCharge(ctx context.Context, req *CheckUserChargeReq) (*CheckUserChargeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCheckUserCharge not implemented")
}
func (*UnimplementedWorldServer) OnCheckChargeProp(ctx context.Context, req *CheckChargePropReq) (*CheckChargePropRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCheckChargeProp not implemented")
}
func (*UnimplementedWorldServer) OnGetUserBestResult(ctx context.Context, req *GetUserBestResultReq) (*GetUserBestResultRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetUserBestResult not implemented")
}
func (*UnimplementedWorldServer) OnUpdateUserBestResult(ctx context.Context, req *UpdateUserBestResultReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdateUserBestResult not implemented")
}
func (*UnimplementedWorldServer) OnInsertCommonLog(ctx context.Context, req *InsertCommonLogReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnInsertCommonLog not implemented")
}
func (*UnimplementedWorldServer) OnQueryCommonLog(ctx context.Context, req *QueryCommonLogReq) (*QueryCommonLogRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnQueryCommonLog not implemented")
}
func (*UnimplementedWorldServer) OnGetRobot(ctx context.Context, req *GetRobotReq) (*GetRobotRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetRobot not implemented")
}
func (*UnimplementedWorldServer) OnUpdateRobot(ctx context.Context, req *UpdateRobotReq) (*UpdateRobotRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdateRobot not implemented")
}
func (*UnimplementedWorldServer) OnGetMultiUserMoney(ctx context.Context, req *GetMultiUserMoneyReq) (*GetMultiUserMoneyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetMultiUserMoney not implemented")
}
func (*UnimplementedWorldServer) OnGetMultiUserGameInfo(ctx context.Context, req *GetMultiUserGameInfoReq) (*GetMultiUserGameInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnGetMultiUserGameInfo not implemented")
}
func (*UnimplementedWorldServer) OnQueryTridentWinRecordRequst(ctx context.Context, req *QueryTridentWinRecordReq) (*QueryTridentWinRecordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnQueryTridentWinRecordRequst not implemented")
}
func (*UnimplementedWorldServer) OnInsertTridentWinRecordRequst(ctx context.Context, req *InsetTridentWinRecordReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnInsertTridentWinRecordRequst not implemented")
}
func (*UnimplementedWorldServer) OnUpdateConsumeStat(ctx context.Context, req *OnUpdateConsumeStatReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdateConsumeStat not implemented")
}

func RegisterWorldServer(s *grpc.Server, srv WorldServer) {
	s.RegisterService(&_World_serviceDesc, srv)
}

func _World_OnBaseUserInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnBaseUserInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnBaseUserInfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnBaseUserInfoGet(ctx, req.(*BaseUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnEnterRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnEnterRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnEnterRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnEnterRoom(ctx, req.(*EnterRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnLeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnLeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnLeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnLeaveRoom(ctx, req.(*LeaveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnLeaveRoomLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnLeaveRoomLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnLeaveRoomLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnLeaveRoomLog(ctx, req.(*LeaveRoomLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnLeaveRoomLogDx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomLogDxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnLeaveRoomLogDx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnLeaveRoomLogDx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnLeaveRoomLogDx(ctx, req.(*LeaveRoomLogDxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdatePreventCheat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreventCheatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdatePreventCheat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdatePreventCheat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdatePreventCheat(ctx, req.(*UpdatePreventCheatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnRefreshUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnRefreshUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnRefreshUserMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnRefreshUserMoney(ctx, req.(*RefreshUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnCountPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnCountPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnCountPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnCountPlayer(ctx, req.(*CountPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdateAwardGoldPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwardGoldPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdateAwardGoldPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdateAwardGoldPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdateAwardGoldPool(ctx, req.(*UpdateAwardGoldPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetJackpotRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJackpotRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetJackpotRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetJackpotRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetJackpotRecord(ctx, req.(*GetJackpotRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnInsertJackpotRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertJackpotRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnInsertJackpotRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnInsertJackpotRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnInsertJackpotRecord(ctx, req.(*InsertJackpotRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetJackpotPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJackpotPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetJackpotPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetJackpotPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetJackpotPool(ctx, req.(*GetJackpotPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdateJackpotPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJackpotPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdateJackpotPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdateJackpotPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdateJackpotPool(ctx, req.(*UpdateJackpotPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetVipInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetVipInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetVipInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetVipInfos(ctx, req.(*GetVipInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdateMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdateMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdateMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdateMoney(ctx, req.(*UpdateMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnAwardGoldPoolUserLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardGoldPoolUserLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnAwardGoldPoolUserLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnAwardGoldPoolUserLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnAwardGoldPoolUserLog(ctx, req.(*AwardGoldPoolUserLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdatEextendCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatEextendCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdatEextendCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdatEextendCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdatEextendCoin(ctx, req.(*UpdatEextendCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnShutDwon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutDwonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnShutDwon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnShutDwon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnShutDwon(ctx, req.(*ShutDwonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnCreateCustomRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnCreateCustomRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnCreateCustomRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnCreateCustomRoom(ctx, req.(*CreateCustomRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnTableRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRecordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnTableRecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnTableRecordUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnTableRecordUpdate(ctx, req.(*TableRecordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnCustomGameResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomGameResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnCustomGameResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnCustomGameResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnCustomGameResult(ctx, req.(*CustomGameResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnCommonUserLogAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonUserLogAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnCommonUserLogAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnCommonUserLogAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnCommonUserLogAdd(ctx, req.(*CommonUserLogAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnPublishMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnPublishMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnPublishMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnPublishMail(ctx, req.(*PublishMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnNotifyLoginSucess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyLoginSucessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnNotifyLoginSucess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnNotifyLoginSucess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnNotifyLoginSucess(ctx, req.(*NotifyLoginSucessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGameLogReturnRatesAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameLogReturnRatesAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGameLogReturnRatesAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGameLogReturnRatesAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGameLogReturnRatesAdd(ctx, req.(*GameLogReturnRatesAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGiftTicketUserTicketUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftTicketUserTicketUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGiftTicketUserTicketUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGiftTicketUserTicketUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGiftTicketUserTicketUpdate(ctx, req.(*GiftTicketUserTicketUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnAwardUserTelephoneBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardUserTelephoneBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnAwardUserTelephoneBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnAwardUserTelephoneBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnAwardUserTelephoneBill(ctx, req.(*AwardUserTelephoneBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnEveryGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EveryGameLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnEveryGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnEveryGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnEveryGameLog(ctx, req.(*EveryGameLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnClubEveryGameLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubEveryGameLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnClubEveryGameLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnClubEveryGameLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnClubEveryGameLog(ctx, req.(*ClubEveryGameLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnRemoveUserLastMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserLastMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnRemoveUserLastMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnRemoveUserLastMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnRemoveUserLastMoney(ctx, req.(*RemoveUserLastMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnSaveVipPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVipPointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnSaveVipPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnSaveVipPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnSaveVipPoint(ctx, req.(*SaveVipPointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetVipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetVipInfo(ctx, req.(*GetVipInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUserInfoVipGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoVipGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUserInfoVipGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUserInfoVipGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUserInfoVipGet(ctx, req.(*UserInfoVipGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnPlayerConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerConsumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnPlayerConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnPlayerConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnPlayerConsume(ctx, req.(*PlayerConsumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnPlayerGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerGameInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnPlayerGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnPlayerGameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnPlayerGameInfo(ctx, req.(*PlayerGameInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnPlayerArenaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerArenaInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnPlayerArenaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnPlayerArenaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnPlayerArenaInfo(ctx, req.(*PlayerArenaInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnFrequentArgument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequentArgumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnFrequentArgument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnFrequentArgument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnFrequentArgument(ctx, req.(*FrequentArgumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnWebUpdateUserCash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebUpdateUserCashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnWebUpdateUserCash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnWebUpdateUserCash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnWebUpdateUserCash(ctx, req.(*WebUpdateUserCashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGameCutCardLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameCutCardLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGameCutCardLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGameCutCardLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGameCutCardLog(ctx, req.(*GameCutCardLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnAddMailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMailInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnAddMailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnAddMailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnAddMailInfo(ctx, req.(*AddMailInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnSendMailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnSendMailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnSendMailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnSendMailInfo(ctx, req.(*SendMailInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnCheckUserCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnCheckUserCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnCheckUserCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnCheckUserCharge(ctx, req.(*CheckUserChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnCheckChargeProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChargePropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnCheckChargeProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnCheckChargeProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnCheckChargeProp(ctx, req.(*CheckChargePropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetUserBestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBestResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetUserBestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetUserBestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetUserBestResult(ctx, req.(*GetUserBestResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdateUserBestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBestResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdateUserBestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdateUserBestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdateUserBestResult(ctx, req.(*UpdateUserBestResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnInsertCommonLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCommonLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnInsertCommonLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnInsertCommonLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnInsertCommonLog(ctx, req.(*InsertCommonLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnQueryCommonLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommonLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnQueryCommonLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnQueryCommonLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnQueryCommonLog(ctx, req.(*QueryCommonLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRobotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetRobot(ctx, req.(*GetRobotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRobotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdateRobot(ctx, req.(*UpdateRobotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetMultiUserMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiUserMoneyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetMultiUserMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetMultiUserMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetMultiUserMoney(ctx, req.(*GetMultiUserMoneyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnGetMultiUserGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiUserGameInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnGetMultiUserGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnGetMultiUserGameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnGetMultiUserGameInfo(ctx, req.(*GetMultiUserGameInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnQueryTridentWinRecordRequst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTridentWinRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnQueryTridentWinRecordRequst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnQueryTridentWinRecordRequst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnQueryTridentWinRecordRequst(ctx, req.(*QueryTridentWinRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnInsertTridentWinRecordRequst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsetTridentWinRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnInsertTridentWinRecordRequst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnInsertTridentWinRecordRequst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnInsertTridentWinRecordRequst(ctx, req.(*InsetTridentWinRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _World_OnUpdateConsumeStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnUpdateConsumeStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).OnUpdateConsumeStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.service.v1.World/OnUpdateConsumeStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).OnUpdateConsumeStat(ctx, req.(*OnUpdateConsumeStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _World_serviceDesc = grpc.ServiceDesc{
	ServiceName: "world.service.v1.World",
	HandlerType: (*WorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnBaseUserInfoGet",
			Handler:    _World_OnBaseUserInfoGet_Handler,
		},
		{
			MethodName: "OnEnterRoom",
			Handler:    _World_OnEnterRoom_Handler,
		},
		{
			MethodName: "OnLeaveRoom",
			Handler:    _World_OnLeaveRoom_Handler,
		},
		{
			MethodName: "OnLeaveRoomLog",
			Handler:    _World_OnLeaveRoomLog_Handler,
		},
		{
			MethodName: "OnLeaveRoomLogDx",
			Handler:    _World_OnLeaveRoomLogDx_Handler,
		},
		{
			MethodName: "OnUpdatePreventCheat",
			Handler:    _World_OnUpdatePreventCheat_Handler,
		},
		{
			MethodName: "OnRefreshUserMoney",
			Handler:    _World_OnRefreshUserMoney_Handler,
		},
		{
			MethodName: "OnCountPlayer",
			Handler:    _World_OnCountPlayer_Handler,
		},
		{
			MethodName: "OnUpdateAwardGoldPool",
			Handler:    _World_OnUpdateAwardGoldPool_Handler,
		},
		{
			MethodName: "OnGetJackpotRecord",
			Handler:    _World_OnGetJackpotRecord_Handler,
		},
		{
			MethodName: "OnInsertJackpotRecord",
			Handler:    _World_OnInsertJackpotRecord_Handler,
		},
		{
			MethodName: "OnGetJackpotPool",
			Handler:    _World_OnGetJackpotPool_Handler,
		},
		{
			MethodName: "OnUpdateJackpotPool",
			Handler:    _World_OnUpdateJackpotPool_Handler,
		},
		{
			MethodName: "OnGetVipInfos",
			Handler:    _World_OnGetVipInfos_Handler,
		},
		{
			MethodName: "OnUpdateMoney",
			Handler:    _World_OnUpdateMoney_Handler,
		},
		{
			MethodName: "OnAwardGoldPoolUserLog",
			Handler:    _World_OnAwardGoldPoolUserLog_Handler,
		},
		{
			MethodName: "OnUpdatEextendCoin",
			Handler:    _World_OnUpdatEextendCoin_Handler,
		},
		{
			MethodName: "OnShutDwon",
			Handler:    _World_OnShutDwon_Handler,
		},
		{
			MethodName: "OnCreateCustomRoom",
			Handler:    _World_OnCreateCustomRoom_Handler,
		},
		{
			MethodName: "OnTableRecordUpdate",
			Handler:    _World_OnTableRecordUpdate_Handler,
		},
		{
			MethodName: "OnCustomGameResult",
			Handler:    _World_OnCustomGameResult_Handler,
		},
		{
			MethodName: "OnCommonUserLogAdd",
			Handler:    _World_OnCommonUserLogAdd_Handler,
		},
		{
			MethodName: "OnPublishMail",
			Handler:    _World_OnPublishMail_Handler,
		},
		{
			MethodName: "OnNotifyLoginSucess",
			Handler:    _World_OnNotifyLoginSucess_Handler,
		},
		{
			MethodName: "OnGameLogReturnRatesAdd",
			Handler:    _World_OnGameLogReturnRatesAdd_Handler,
		},
		{
			MethodName: "OnGiftTicketUserTicketUpdate",
			Handler:    _World_OnGiftTicketUserTicketUpdate_Handler,
		},
		{
			MethodName: "OnAwardUserTelephoneBill",
			Handler:    _World_OnAwardUserTelephoneBill_Handler,
		},
		{
			MethodName: "OnEveryGameLog",
			Handler:    _World_OnEveryGameLog_Handler,
		},
		{
			MethodName: "OnClubEveryGameLog",
			Handler:    _World_OnClubEveryGameLog_Handler,
		},
		{
			MethodName: "OnRemoveUserLastMoney",
			Handler:    _World_OnRemoveUserLastMoney_Handler,
		},
		{
			MethodName: "OnSaveVipPoint",
			Handler:    _World_OnSaveVipPoint_Handler,
		},
		{
			MethodName: "OnGetVipInfo",
			Handler:    _World_OnGetVipInfo_Handler,
		},
		{
			MethodName: "OnUserInfoVipGet",
			Handler:    _World_OnUserInfoVipGet_Handler,
		},
		{
			MethodName: "OnPlayerConsume",
			Handler:    _World_OnPlayerConsume_Handler,
		},
		{
			MethodName: "OnPlayerGameInfo",
			Handler:    _World_OnPlayerGameInfo_Handler,
		},
		{
			MethodName: "OnPlayerArenaInfo",
			Handler:    _World_OnPlayerArenaInfo_Handler,
		},
		{
			MethodName: "OnFrequentArgument",
			Handler:    _World_OnFrequentArgument_Handler,
		},
		{
			MethodName: "OnWebUpdateUserCash",
			Handler:    _World_OnWebUpdateUserCash_Handler,
		},
		{
			MethodName: "OnGameCutCardLog",
			Handler:    _World_OnGameCutCardLog_Handler,
		},
		{
			MethodName: "OnAddMailInfo",
			Handler:    _World_OnAddMailInfo_Handler,
		},
		{
			MethodName: "OnSendMailInfo",
			Handler:    _World_OnSendMailInfo_Handler,
		},
		{
			MethodName: "OnCheckUserCharge",
			Handler:    _World_OnCheckUserCharge_Handler,
		},
		{
			MethodName: "OnCheckChargeProp",
			Handler:    _World_OnCheckChargeProp_Handler,
		},
		{
			MethodName: "OnGetUserBestResult",
			Handler:    _World_OnGetUserBestResult_Handler,
		},
		{
			MethodName: "OnUpdateUserBestResult",
			Handler:    _World_OnUpdateUserBestResult_Handler,
		},
		{
			MethodName: "OnInsertCommonLog",
			Handler:    _World_OnInsertCommonLog_Handler,
		},
		{
			MethodName: "OnQueryCommonLog",
			Handler:    _World_OnQueryCommonLog_Handler,
		},
		{
			MethodName: "OnGetRobot",
			Handler:    _World_OnGetRobot_Handler,
		},
		{
			MethodName: "OnUpdateRobot",
			Handler:    _World_OnUpdateRobot_Handler,
		},
		{
			MethodName: "OnGetMultiUserMoney",
			Handler:    _World_OnGetMultiUserMoney_Handler,
		},
		{
			MethodName: "OnGetMultiUserGameInfo",
			Handler:    _World_OnGetMultiUserGameInfo_Handler,
		},
		{
			MethodName: "OnQueryTridentWinRecordRequst",
			Handler:    _World_OnQueryTridentWinRecordRequst_Handler,
		},
		{
			MethodName: "OnInsertTridentWinRecordRequst",
			Handler:    _World_OnInsertTridentWinRecordRequst_Handler,
		},
		{
			MethodName: "OnUpdateConsumeStat",
			Handler:    _World_OnUpdateConsumeStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseUserInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseUserInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseUserInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseUserInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Baseuserinfoget) > 0 {
		i -= len(m.Baseuserinfoget)
		copy(dAtA[i:], m.Baseuserinfoget)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Baseuserinfoget)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnterRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnterRoomRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterRoomRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterRoomRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dbserverid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dbserverid))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeaveRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TiSysType) > 0 {
		i -= len(m.TiSysType)
		copy(dAtA[i:], m.TiSysType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TiSysType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Tax) > 0 {
		i -= len(m.Tax)
		copy(dAtA[i:], m.Tax)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tax)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Ticket) > 0 {
		i -= len(m.Ticket)
		copy(dAtA[i:], m.Ticket)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ticket)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.WantedMoney) > 0 {
		i -= len(m.WantedMoney)
		copy(dAtA[i:], m.WantedMoney)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WantedMoney)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LoginMoney) > 0 {
		i -= len(m.LoginMoney)
		copy(dAtA[i:], m.LoginMoney)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoginMoney)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaveRoomLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveRoomLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveRoomLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameTime) > 0 {
		i -= len(m.GameTime)
		copy(dAtA[i:], m.GameTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameTime)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LoginTime) > 0 {
		i -= len(m.LoginTime)
		copy(dAtA[i:], m.LoginTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoginTime)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FleeCount) > 0 {
		i -= len(m.FleeCount)
		copy(dAtA[i:], m.FleeCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FleeCount)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DrawCount) > 0 {
		i -= len(m.DrawCount)
		copy(dAtA[i:], m.DrawCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DrawCount)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LoseCount) > 0 {
		i -= len(m.LoseCount)
		copy(dAtA[i:], m.LoseCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoseCount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.WinCount) > 0 {
		i -= len(m.WinCount)
		copy(dAtA[i:], m.WinCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WinCount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaveRoomLogDxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveRoomLogDxReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveRoomLogDxReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClineType) > 0 {
		i -= len(m.ClineType)
		copy(dAtA[i:], m.ClineType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClineType)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.IsTrusteeship) > 0 {
		i -= len(m.IsTrusteeship)
		copy(dAtA[i:], m.IsTrusteeship)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IsTrusteeship)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.GameTime) > 0 {
		i -= len(m.GameTime)
		copy(dAtA[i:], m.GameTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameTime)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LoginTime) > 0 {
		i -= len(m.LoginTime)
		copy(dAtA[i:], m.LoginTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoginTime)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FleeCount) > 0 {
		i -= len(m.FleeCount)
		copy(dAtA[i:], m.FleeCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FleeCount)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DrawCount) > 0 {
		i -= len(m.DrawCount)
		copy(dAtA[i:], m.DrawCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DrawCount)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LoseCount) > 0 {
		i -= len(m.LoseCount)
		copy(dAtA[i:], m.LoseCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LoseCount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.WinCount) > 0 {
		i -= len(m.WinCount)
		copy(dAtA[i:], m.WinCount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WinCount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePreventCheatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePreventCheatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePreventCheatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoldNUM) > 0 {
		i -= len(m.GoldNUM)
		copy(dAtA[i:], m.GoldNUM)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldNUM)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePreventCheatRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePreventCheatRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePreventCheatRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoldNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshUserMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshUserMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshUserMoneyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TiSysType) > 0 {
		i -= len(m.TiSysType)
		copy(dAtA[i:], m.TiSysType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TiSysType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefreshUserMoneyRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshUserMoneyRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshUserMoneyRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtCoin) > 0 {
		i -= len(m.ExtCoin)
		copy(dAtA[i:], m.ExtCoin)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExtCoin)))
		i--
		dAtA[i] = 0x32
	}
	if m.Ticket != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ticket))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountPlayerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountPlayerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountPlayerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Num) > 0 {
		i -= len(m.Num)
		copy(dAtA[i:], m.Num)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Num)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAwardGoldPoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAwardGoldPoolReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAwardGoldPoolReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoldNum5) > 0 {
		i -= len(m.GoldNum5)
		copy(dAtA[i:], m.GoldNum5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldNum5)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GoldNum4) > 0 {
		i -= len(m.GoldNum4)
		copy(dAtA[i:], m.GoldNum4)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldNum4)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GoldNum3) > 0 {
		i -= len(m.GoldNum3)
		copy(dAtA[i:], m.GoldNum3)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldNum3)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GoldNum2) > 0 {
		i -= len(m.GoldNum2)
		copy(dAtA[i:], m.GoldNum2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldNum2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GoldNum1) > 0 {
		i -= len(m.GoldNum1)
		copy(dAtA[i:], m.GoldNum1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldNum1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GoldType) > 0 {
		i -= len(m.GoldType)
		copy(dAtA[i:], m.GoldType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAwardGoldPoolRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAwardGoldPoolRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAwardGoldPoolRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GoldSumNum5 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldSumNum5))
		i--
		dAtA[i] = 0x60
	}
	if m.GoldSumNum4 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldSumNum4))
		i--
		dAtA[i] = 0x58
	}
	if m.GoldSumNum3 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldSumNum3))
		i--
		dAtA[i] = 0x50
	}
	if m.GoldSumNum2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldSumNum2))
		i--
		dAtA[i] = 0x48
	}
	if m.GoldSumNum1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldSumNum1))
		i--
		dAtA[i] = 0x40
	}
	if m.GoldNum5 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldNum5))
		i--
		dAtA[i] = 0x38
	}
	if m.GoldNum4 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldNum4))
		i--
		dAtA[i] = 0x30
	}
	if m.GoldNum3 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldNum3))
		i--
		dAtA[i] = 0x28
	}
	if m.GoldNum2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldNum2))
		i--
		dAtA[i] = 0x20
	}
	if m.GoldNum1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoldNum1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetJackpotRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJackpotRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJackpotRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Jtype) > 0 {
		i -= len(m.Jtype)
		copy(dAtA[i:], m.Jtype)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Jtype)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x38
	}
	if m.Robot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Robot))
		i--
		dAtA[i] = 0x30
	}
	if m.Value != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x28
	}
	if m.Arenaid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Arenaid))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetJackpotRecordRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJackpotRecordRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJackpotRecordRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InsertJackpotRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertJackpotRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertJackpotRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Jtype) > 0 {
		i -= len(m.Jtype)
		copy(dAtA[i:], m.Jtype)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Jtype)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJackpotPoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJackpotPoolReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJackpotPoolReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Jtype) > 0 {
		i -= len(m.Jtype)
		copy(dAtA[i:], m.Jtype)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Jtype)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJackpotPoolRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJackpotPoolRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJackpotPoolRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateJackpotPoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJackpotPoolReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJackpotPoolReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Add) > 0 {
		i -= len(m.Add)
		copy(dAtA[i:], m.Add)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Add)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Detal) > 0 {
		i -= len(m.Detal)
		copy(dAtA[i:], m.Detal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Detal)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Jtype) > 0 {
		i -= len(m.Jtype)
		copy(dAtA[i:], m.Jtype)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Jtype)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVipInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVipInfosReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVipInfosReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVipInfosRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVipInfosRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVipInfosRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ispermanentvip != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ispermanentvip))
		i--
		dAtA[i] = 0x20
	}
	if m.Isvip != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Isvip))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMoneyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SysType) > 0 {
		i -= len(m.SysType)
		copy(dAtA[i:], m.SysType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SysType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IsCheckInRoom) > 0 {
		i -= len(m.IsCheckInRoom)
		copy(dAtA[i:], m.IsCheckInRoom)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IsCheckInRoom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TaxAmount) > 0 {
		i -= len(m.TaxAmount)
		copy(dAtA[i:], m.TaxAmount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TaxAmount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UpdateAmount) > 0 {
		i -= len(m.UpdateAmount)
		copy(dAtA[i:], m.UpdateAmount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMoneyRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMoneyRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMoneyRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Delta != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Delta))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AwardGoldPoolUserLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardGoldPoolUserLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwardGoldPoolUserLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoldType) > 0 {
		i -= len(m.GoldType)
		copy(dAtA[i:], m.GoldType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PlayerName) > 0 {
		i -= len(m.PlayerName)
		copy(dAtA[i:], m.PlayerName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GoldNum) > 0 {
		i -= len(m.GoldNum)
		copy(dAtA[i:], m.GoldNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoldNum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolID) > 0 {
		i -= len(m.PoolID)
		copy(dAtA[i:], m.PoolID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PoolID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatEextendCoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatEextendCoinReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatEextendCoinReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcType) > 0 {
		i -= len(m.SrcType)
		copy(dAtA[i:], m.SrcType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SrcType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UpdateAmount) > 0 {
		i -= len(m.UpdateAmount)
		copy(dAtA[i:], m.UpdateAmount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoinType) > 0 {
		i -= len(m.CoinType)
		copy(dAtA[i:], m.CoinType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoinType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatEextendCoinRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatEextendCoinRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatEextendCoinRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShutDwonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutDwonReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutDwonReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCustomRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCustomRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCustomRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoomPassword) > 0 {
		i -= len(m.RoomPassword)
		copy(dAtA[i:], m.RoomPassword)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomPassword)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCustomRoomRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCustomRoomRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCustomRoomRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Roomnum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Roomnum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableRecordUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableRecordUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableRecordUpdateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AddNew) > 0 {
		i -= len(m.AddNew)
		copy(dAtA[i:], m.AddNew)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AddNew)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RoomNum) > 0 {
		i -= len(m.RoomNum)
		copy(dAtA[i:], m.RoomNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomNum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaId) > 0 {
		i -= len(m.ArenaId)
		copy(dAtA[i:], m.ArenaId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomGameResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomGameResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomGameResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResultData) > 0 {
		i -= len(m.ResultData)
		copy(dAtA[i:], m.ResultData)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResultData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserIDs) > 0 {
		i -= len(m.UserIDs)
		copy(dAtA[i:], m.UserIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIDs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TypeID) > 0 {
		i -= len(m.TypeID)
		copy(dAtA[i:], m.TypeID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonUserLogAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonUserLogAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonUserLogAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LogType))
		i--
		dAtA[i] = 0x18
	}
	if m.ArenaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishMailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishMailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishMailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RewordInfo) > 0 {
		i -= len(m.RewordInfo)
		copy(dAtA[i:], m.RewordInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RewordInfo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UserIDS) > 0 {
		i -= len(m.UserIDS)
		copy(dAtA[i:], m.UserIDS)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIDS)))
		i--
		dAtA[i] = 0x42
	}
	if m.SendType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SendType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishMailRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishMailRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishMailRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyLoginSucessReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyLoginSucessReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyLoginSucessReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x22
	}
	if m.ArenaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameLogReturnRatesAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameLogReturnRatesAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameLogReturnRatesAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SavgGain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SavgGain))
		i--
		dAtA[i] = 0x28
	}
	if m.Consume != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Consume))
		i--
		dAtA[i] = 0x20
	}
	if m.TheoryReRates != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TheoryReRates))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.PlayType) > 0 {
		i -= len(m.PlayType)
		copy(dAtA[i:], m.PlayType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayType)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiftTicketUserTicketUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftTicketUserTicketUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftTicketUserTicketUpdateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x30
	}
	if m.SourceType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiftTicketUserTicketUpdateRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftTicketUserTicketUpdateRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftTicketUserTicketUpdateRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DBMsg) > 0 {
		i -= len(m.DBMsg)
		copy(dAtA[i:], m.DBMsg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DBMsg)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CurrentTicket != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurrentTicket))
		i--
		dAtA[i] = 0x20
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AwardUserTelephoneBillReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardUserTelephoneBillReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwardUserTelephoneBillReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sign != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sign))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Par != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Par))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EveryGameLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EveryGameLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EveryGameLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BIsTrusteeship) > 0 {
		i -= len(m.BIsTrusteeship)
		copy(dAtA[i:], m.BIsTrusteeship)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BIsTrusteeship)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Iscoingame) > 0 {
		i -= len(m.Iscoingame)
		copy(dAtA[i:], m.Iscoingame)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Iscoingame)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Tax) > 0 {
		i -= len(m.Tax)
		copy(dAtA[i:], m.Tax)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tax)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Chairno) > 0 {
		i -= len(m.Chairno)
		copy(dAtA[i:], m.Chairno)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Chairno)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Gameno) > 0 {
		i -= len(m.Gameno)
		copy(dAtA[i:], m.Gameno)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gameno)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Money) > 0 {
		i -= len(m.Money)
		copy(dAtA[i:], m.Money)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Money)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TableID) > 0 {
		i -= len(m.TableID)
		copy(dAtA[i:], m.TableID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TableID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClubEveryGameLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClubEveryGameLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClubEveryGameLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerMaxNum) > 0 {
		i -= len(m.PlayerMaxNum)
		copy(dAtA[i:], m.PlayerMaxNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerMaxNum)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.PaymentUserNickName) > 0 {
		i -= len(m.PaymentUserNickName)
		copy(dAtA[i:], m.PaymentUserNickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentUserNickName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.RoomUserNickName) > 0 {
		i -= len(m.RoomUserNickName)
		copy(dAtA[i:], m.RoomUserNickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomUserNickName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.UserNickName) > 0 {
		i -= len(m.UserNickName)
		copy(dAtA[i:], m.UserNickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserNickName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.TakeInType) > 0 {
		i -= len(m.TakeInType)
		copy(dAtA[i:], m.TakeInType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TakeInType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.TakeInLimitNum) > 0 {
		i -= len(m.TakeInLimitNum)
		copy(dAtA[i:], m.TakeInLimitNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TakeInLimitNum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.PiecrustNum) > 0 {
		i -= len(m.PiecrustNum)
		copy(dAtA[i:], m.PiecrustNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PiecrustNum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.PayRoomCardNum) > 0 {
		i -= len(m.PayRoomCardNum)
		copy(dAtA[i:], m.PayRoomCardNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayRoomCardNum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.IsAutoCreateRoom) > 0 {
		i -= len(m.IsAutoCreateRoom)
		copy(dAtA[i:], m.IsAutoCreateRoom)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IsAutoCreateRoom)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.BeginTime) > 0 {
		i -= len(m.BeginTime)
		copy(dAtA[i:], m.BeginTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BeginTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.RoomUserId) > 0 {
		i -= len(m.RoomUserId)
		copy(dAtA[i:], m.RoomUserId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomUserId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.LittleGameNo) > 0 {
		i -= len(m.LittleGameNo)
		copy(dAtA[i:], m.LittleGameNo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LittleGameNo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.RoomNum) > 0 {
		i -= len(m.RoomNum)
		copy(dAtA[i:], m.RoomNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomNum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ClientSource) > 0 {
		i -= len(m.ClientSource)
		copy(dAtA[i:], m.ClientSource)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientSource)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ClubID) > 0 {
		i -= len(m.ClubID)
		copy(dAtA[i:], m.ClubID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClubID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.IsTrusteeship) > 0 {
		i -= len(m.IsTrusteeship)
		copy(dAtA[i:], m.IsTrusteeship)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IsTrusteeship)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PaymentUserId) > 0 {
		i -= len(m.PaymentUserId)
		copy(dAtA[i:], m.PaymentUserId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentUserId)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DeductType) > 0 {
		i -= len(m.DeductType)
		copy(dAtA[i:], m.DeductType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeductType)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Tax) > 0 {
		i -= len(m.Tax)
		copy(dAtA[i:], m.Tax)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tax)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Money) > 0 {
		i -= len(m.Money)
		copy(dAtA[i:], m.Money)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Money)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CurrentRound) > 0 {
		i -= len(m.CurrentRound)
		copy(dAtA[i:], m.CurrentRound)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CurrentRound)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TotalRound) > 0 {
		i -= len(m.TotalRound)
		copy(dAtA[i:], m.TotalRound)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TotalRound)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Gameno) > 0 {
		i -= len(m.Gameno)
		copy(dAtA[i:], m.Gameno)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gameno)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Chairno) > 0 {
		i -= len(m.Chairno)
		copy(dAtA[i:], m.Chairno)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Chairno)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TableID) > 0 {
		i -= len(m.TableID)
		copy(dAtA[i:], m.TableID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TableID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PlayID) > 0 {
		i -= len(m.PlayID)
		copy(dAtA[i:], m.PlayID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClubEveryGameLogRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClubEveryGameLogRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClubEveryGameLogRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameLogID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameLogID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveUserLastMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserLastMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveUserLastMoneyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveVipPointReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveVipPointReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveVipPointReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVipInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVipInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVipInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerID) > 0 {
		i -= len(m.PlayerID)
		copy(dAtA[i:], m.PlayerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVipInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVipInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVipInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdvDays != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AdvDays))
		i--
		dAtA[i] = 0x30
	}
	if m.FrequenterScore != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FrequenterScore))))
		i--
		dAtA[i] = 0x29
	}
	if m.Score != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i--
		dAtA[i] = 0x21
	}
	if m.Grade != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Grade))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserInfoVipGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoVipGetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfoVipGetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInfoVipGetRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoVipGetRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfoVipGetRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SupsuserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SupsuserID))
		i--
		dAtA[i] = 0x20
	}
	if m.SupuserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SupuserID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerConsumeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerConsumeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerConsumeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Round) > 0 {
		i -= len(m.Round)
		copy(dAtA[i:], m.Round)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Round)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CoinCnt) > 0 {
		i -= len(m.CoinCnt)
		copy(dAtA[i:], m.CoinCnt)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoinCnt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RoomSN) > 0 {
		i -= len(m.RoomSN)
		copy(dAtA[i:], m.RoomSN)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomSN)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoinValue) > 0 {
		i -= len(m.CoinValue)
		copy(dAtA[i:], m.CoinValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoinValue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoinType) > 0 {
		i -= len(m.CoinType)
		copy(dAtA[i:], m.CoinType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoinType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerGameInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerGameInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerGameInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserIDs) > 0 {
		i -= len(m.UserIDs)
		copy(dAtA[i:], m.UserIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIDs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TagPlayerGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagPlayerGameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagPlayerGameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score2))
		i--
		dAtA[i] = 0x40
	}
	if m.RightID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RightID))
		i--
		dAtA[i] = 0x38
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x30
	}
	if m.FleeCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FleeCount))
		i--
		dAtA[i] = 0x28
	}
	if m.DrawCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DrawCount))
		i--
		dAtA[i] = 0x20
	}
	if m.LoseCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoseCount))
		i--
		dAtA[i] = 0x18
	}
	if m.WinCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WinCount))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerGameInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerGameInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerGameInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerArenaInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerArenaInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerArenaInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerArenaInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerArenaInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerArenaInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrequentArgumentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequentArgumentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrequentArgumentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SnGameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SnGameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrequentArgumentRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequentArgumentRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrequentArgumentRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.N2NdFreqArgu != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.N2NdFreqArgu))
		i--
		dAtA[i] = 0x10
	}
	if m.N1StFreqArgu != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.N1StFreqArgu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WebUpdateUserCashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebUpdateUserCashReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebUpdateUserCashReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IsWriteLog) > 0 {
		i -= len(m.IsWriteLog)
		copy(dAtA[i:], m.IsWriteLog)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IsWriteLog)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MachineNumber) > 0 {
		i -= len(m.MachineNumber)
		copy(dAtA[i:], m.MachineNumber)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MachineNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TaxAmount) > 0 {
		i -= len(m.TaxAmount)
		copy(dAtA[i:], m.TaxAmount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TaxAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IPAddress) > 0 {
		i -= len(m.IPAddress)
		copy(dAtA[i:], m.IPAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IPAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WantedAmount) > 0 {
		i -= len(m.WantedAmount)
		copy(dAtA[i:], m.WantedAmount)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WantedAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebUpdateUserCashRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebUpdateUserCashRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebUpdateUserCashRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModifyAmount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModifyAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrentAmount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurrentAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameCutCardLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameCutCardLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameCutCardLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CutCoinNum) > 0 {
		i -= len(m.CutCoinNum)
		copy(dAtA[i:], m.CutCoinNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CutCoinNum)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CoinType) > 0 {
		i -= len(m.CoinType)
		copy(dAtA[i:], m.CoinType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoinType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CutNum) > 0 {
		i -= len(m.CutNum)
		copy(dAtA[i:], m.CutNum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CutNum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ArenaID) > 0 {
		i -= len(m.ArenaID)
		copy(dAtA[i:], m.ArenaID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArenaID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameID) > 0 {
		i -= len(m.GameID)
		copy(dAtA[i:], m.GameID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMailInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMailInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMailInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Users) > 0 {
		i -= len(m.Users)
		copy(dAtA[i:], m.Users)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Users)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMailInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMailInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMailInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Users) > 0 {
		i -= len(m.Users)
		copy(dAtA[i:], m.Users)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Users)))
		i--
		dAtA[i] = 0x12
	}
	if m.MailID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MailID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendMailInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMailInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Users) > 0 {
		i -= len(m.Users)
		copy(dAtA[i:], m.Users)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Users)))
		i--
		dAtA[i] = 0x32
	}
	if m.SendType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SendType))
		i--
		dAtA[i] = 0x28
	}
	if m.EndTIme != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EndTIme))))
		i--
		dAtA[i] = 0x21
	}
	if m.StartTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StartTime))))
		i--
		dAtA[i] = 0x19
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.MailID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MailID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendMailInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMailInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMailInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Users) > 0 {
		i -= len(m.Users)
		copy(dAtA[i:], m.Users)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Users)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckUserChargeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserChargeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckUserChargeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CheckType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CheckType))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckUserChargeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserChargeRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckUserChargeRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckChargePropReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChargePropReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckChargePropReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PropID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckChargePropRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckChargePropRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckChargePropRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LastBuyTime) > 0 {
		i -= len(m.LastBuyTime)
		copy(dAtA[i:], m.LastBuyTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LastBuyTime)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsBYFlay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsBYFlay))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserBestResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserBestResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserBestResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserBestResultRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserBestResultRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserBestResultRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserBestResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserBestResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserBestResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InsertCommonLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertCommonLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertCommonLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.AreanID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AreanID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommonLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommonLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommonLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LogType))
		i--
		dAtA[i] = 0x18
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommonLogRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommonLogRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommonLogRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Logs[iNdEx])
			copy(dAtA[i:], m.Logs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Logs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRobotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRobotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRobotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.INum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.INum))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxCoin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MaxCoin))
		i--
		dAtA[i] = 0x18
	}
	if m.MinCoin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MinCoin))
		i--
		dAtA[i] = 0x10
	}
	if m.IsVisitorRoom {
		i--
		if m.IsVisitorRoom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRobotRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRobotRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRobotRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRobotsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRobotsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRobotsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HeadUrl) > 0 {
		i -= len(m.HeadUrl)
		copy(dAtA[i:], m.HeadUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HeadUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ceritification) > 0 {
		i -= len(m.Ceritification)
		copy(dAtA[i:], m.Ceritification)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ceritification)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRobotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRobotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRobotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRobotRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRobotRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRobotRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMultiUserMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiUserMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMultiUserMoneyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserIDs) > 0 {
		i -= len(m.UserIDs)
		copy(dAtA[i:], m.UserIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIDs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMultiUserMoneyRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiUserMoneyRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMultiUserMoneyRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserMoneyInfos) > 0 {
		for iNdEx := len(m.UserMoneyInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserMoneyInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MultiUserMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiUserMoney) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiUserMoney) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMultiUserGameInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiUserGameInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMultiUserGameInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserIDs) > 0 {
		i -= len(m.UserIDs)
		copy(dAtA[i:], m.UserIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIDs)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMultiUserGameInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiUserGameInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMultiUserGameInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MultiUserInfos) > 0 {
		for iNdEx := len(m.MultiUserInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiUserInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetMultiUserGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiUserGameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMultiUserGameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RightID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RightID))
		i--
		dAtA[i] = 0x30
	}
	if m.FleeCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FleeCount))
		i--
		dAtA[i] = 0x28
	}
	if m.DrawCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DrawCount))
		i--
		dAtA[i] = 0x20
	}
	if m.LoseCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoseCount))
		i--
		dAtA[i] = 0x18
	}
	if m.WinCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WinCount))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RobotInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobotInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobotInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RightID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RightID))
		i--
		dAtA[i] = 0x50
	}
	if m.FleeCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FleeCount))
		i--
		dAtA[i] = 0x48
	}
	if m.DrawCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DrawCount))
		i--
		dAtA[i] = 0x40
	}
	if m.LoseCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoseCount))
		i--
		dAtA[i] = 0x38
	}
	if m.WinCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WinCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Money != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x28
	}
	if len(m.HeadUrl) > 0 {
		i -= len(m.HeadUrl)
		copy(dAtA[i:], m.HeadUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HeadUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ceritification) > 0 {
		i -= len(m.Ceritification)
		copy(dAtA[i:], m.Ceritification)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ceritification)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTridentWinRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTridentWinRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTridentWinRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndDate) > 0 {
		i -= len(m.EndDate)
		copy(dAtA[i:], m.EndDate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BeginDate) > 0 {
		i -= len(m.BeginDate)
		copy(dAtA[i:], m.BeginDate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BeginDate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TopNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TopNum))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TridentWinRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TridentWinRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TridentWinRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LlTick != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LlTick))
		i--
		dAtA[i] = 0x28
	}
	if m.NNewRecord != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NNewRecord))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SzDateTime) > 0 {
		i -= len(m.SzDateTime)
		copy(dAtA[i:], m.SzDateTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SzDateTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SzNickName) > 0 {
		i -= len(m.SzNickName)
		copy(dAtA[i:], m.SzNickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SzNickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.NDBID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NDBID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTridentWinRecordRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTridentWinRecordRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTridentWinRecordRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TridentWinRecords) > 0 {
		for iNdEx := len(m.TridentWinRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TridentWinRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InsetTridentWinRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsetTridentWinRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsetTridentWinRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x22
	}
	if m.WinNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WinNum))
		i--
		dAtA[i] = 0x18
	}
	if m.UserDBID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserDBID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OnUpdateConsumeStatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnUpdateConsumeStatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnUpdateConsumeStatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Consume != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Consume))
		i--
		dAtA[i] = 0x30
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PlayerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerID))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x18
	}
	if m.ArenaID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArenaID))
		i--
		dAtA[i] = 0x10
	}
	if m.GameID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseUserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseUserInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Baseuserinfoget)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnterRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnterRoomRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if m.Dbserverid != 0 {
		n += 1 + sovApi(uint64(m.Dbserverid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaveRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LoginMoney)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WantedMoney)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ticket)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tax)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TiSysType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaveRoomLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WinCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LoseCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DrawCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FleeCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LoginTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaveRoomLogDxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WinCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LoseCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DrawCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FleeCount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LoginTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IsTrusteeship)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ClineType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePreventCheatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldNUM)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePreventCheatRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GoldNum != 0 {
		n += 1 + sovApi(uint64(m.GoldNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshUserMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TiSysType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshUserMoneyRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if m.Ticket != 0 {
		n += 1 + sovApi(uint64(m.Ticket))
	}
	l = len(m.ExtCoin)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountPlayerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Num)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAwardGoldPoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldNum1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldNum2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldNum3)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldNum4)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldNum5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAwardGoldPoolRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GoldNum1 != 0 {
		n += 1 + sovApi(uint64(m.GoldNum1))
	}
	if m.GoldNum2 != 0 {
		n += 1 + sovApi(uint64(m.GoldNum2))
	}
	if m.GoldNum3 != 0 {
		n += 1 + sovApi(uint64(m.GoldNum3))
	}
	if m.GoldNum4 != 0 {
		n += 1 + sovApi(uint64(m.GoldNum4))
	}
	if m.GoldNum5 != 0 {
		n += 1 + sovApi(uint64(m.GoldNum5))
	}
	if m.GoldSumNum1 != 0 {
		n += 1 + sovApi(uint64(m.GoldSumNum1))
	}
	if m.GoldSumNum2 != 0 {
		n += 1 + sovApi(uint64(m.GoldSumNum2))
	}
	if m.GoldSumNum3 != 0 {
		n += 1 + sovApi(uint64(m.GoldSumNum3))
	}
	if m.GoldSumNum4 != 0 {
		n += 1 + sovApi(uint64(m.GoldSumNum4))
	}
	if m.GoldSumNum5 != 0 {
		n += 1 + sovApi(uint64(m.GoldSumNum5))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJackpotRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Jtype)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Arenaid != 0 {
		n += 1 + sovApi(uint64(m.Arenaid))
	}
	if m.Value != 0 {
		n += 1 + sovApi(uint64(m.Value))
	}
	if m.Robot != 0 {
		n += 1 + sovApi(uint64(m.Robot))
	}
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJackpotRecordRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsertJackpotRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Jtype)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJackpotPoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Jtype)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetJackpotPoolRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateJackpotPoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Jtype)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Detal)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Add)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVipInfosReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVipInfosRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Isvip != 0 {
		n += 1 + sovApi(uint64(m.Isvip))
	}
	if m.Ispermanentvip != 0 {
		n += 1 + sovApi(uint64(m.Ispermanentvip))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UpdateAmount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TaxAmount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IsCheckInRoom)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SysType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMoneyRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if m.Delta != 0 {
		n += 1 + sovApi(uint64(m.Delta))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AwardGoldPoolUserLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PoolID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoldType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatEextendCoinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoinType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UpdateAmount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SrcType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatEextendCoinRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShutDwonReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCustomRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RoomPassword)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCustomRoomRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Roomnum != 0 {
		n += 1 + sovApi(uint64(m.Roomnum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableRecordUpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RoomNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AddNew)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomGameResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TypeID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ResultData)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonUserLogAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.LogType != 0 {
		n += 1 + sovApi(uint64(m.LogType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishMailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SendType != 0 {
		n += 1 + sovApi(uint64(m.SendType))
	}
	l = len(m.UserIDS)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RewordInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishMailRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MsgID != 0 {
		n += 1 + sovApi(uint64(m.MsgID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyLoginSucessReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameLogReturnRatesAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	l = len(m.PlayType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TheoryReRates != 0 {
		n += 9
	}
	if m.Consume != 0 {
		n += 1 + sovApi(uint64(m.Consume))
	}
	if m.SavgGain != 0 {
		n += 1 + sovApi(uint64(m.SavgGain))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftTicketUserTicketUpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.Amount != 0 {
		n += 1 + sovApi(uint64(m.Amount))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SourceType != 0 {
		n += 1 + sovApi(uint64(m.SourceType))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftTicketUserTicketUpdateRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.CurrentTicket != 0 {
		n += 1 + sovApi(uint64(m.CurrentTicket))
	}
	l = len(m.DBMsg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AwardUserTelephoneBillReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Par != 0 {
		n += 1 + sovApi(uint64(m.Par))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Sign != 0 {
		n += 1 + sovApi(uint64(m.Sign))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EveryGameLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TableID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Money)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gameno)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Chairno)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tax)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Iscoingame)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BIsTrusteeship)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClubEveryGameLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TableID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Chairno)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gameno)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TotalRound)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CurrentRound)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Money)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tax)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeductType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentUserId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IsTrusteeship)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ClubID)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ClientSource)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.RoomNum)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LittleGameNo)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.RoomUserId)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BeginTime)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.IsAutoCreateRoom)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.PayRoomCardNum)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.PiecrustNum)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.TakeInLimitNum)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.TakeInType)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.UserNickName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.RoomUserNickName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentUserNickName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerMaxNum)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClubEveryGameLogRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameLogID != 0 {
		n += 1 + sovApi(uint64(m.GameLogID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveUserLastMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveVipPointReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVipInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVipInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Grade != 0 {
		n += 1 + sovApi(uint64(m.Grade))
	}
	if m.Score != 0 {
		n += 9
	}
	if m.FrequenterScore != 0 {
		n += 9
	}
	if m.AdvDays != 0 {
		n += 1 + sovApi(uint64(m.AdvDays))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoVipGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoVipGetRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SupuserID != 0 {
		n += 1 + sovApi(uint64(m.SupuserID))
	}
	if m.SupsuserID != 0 {
		n += 1 + sovApi(uint64(m.SupsuserID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerConsumeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoinType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoinValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RoomSN)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoinCnt)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Round)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerGameInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagPlayerGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.WinCount != 0 {
		n += 1 + sovApi(uint64(m.WinCount))
	}
	if m.LoseCount != 0 {
		n += 1 + sovApi(uint64(m.LoseCount))
	}
	if m.DrawCount != 0 {
		n += 1 + sovApi(uint64(m.DrawCount))
	}
	if m.FleeCount != 0 {
		n += 1 + sovApi(uint64(m.FleeCount))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.RightID != 0 {
		n += 1 + sovApi(uint64(m.RightID))
	}
	if m.Score2 != 0 {
		n += 1 + sovApi(uint64(m.Score2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerGameInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerArenaInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerArenaInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FrequentArgumentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnGameId != 0 {
		n += 1 + sovApi(uint64(m.SnGameId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FrequentArgumentRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.N1StFreqArgu != 0 {
		n += 1 + sovApi(uint64(m.N1StFreqArgu))
	}
	if m.N2NdFreqArgu != 0 {
		n += 1 + sovApi(uint64(m.N2NdFreqArgu))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebUpdateUserCashReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WantedAmount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TaxAmount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MachineNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IsWriteLog)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebUpdateUserCashRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CurrentAmount != 0 {
		n += 1 + sovApi(uint64(m.CurrentAmount))
	}
	if m.ModifyAmount != 0 {
		n += 1 + sovApi(uint64(m.ModifyAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameCutCardLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArenaID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CutNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoinType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CutCoinNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddMailInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddMailInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailID != 0 {
		n += 1 + sovApi(uint64(m.MailID))
	}
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendMailInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailID != 0 {
		n += 1 + sovApi(uint64(m.MailID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.StartTime != 0 {
		n += 9
	}
	if m.EndTIme != 0 {
		n += 9
	}
	if m.SendType != 0 {
		n += 1 + sovApi(uint64(m.SendType))
	}
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendMailInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Users)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckUserChargeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.CheckType != 0 {
		n += 1 + sovApi(uint64(m.CheckType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckUserChargeRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckChargePropReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.PropID != 0 {
		n += 1 + sovApi(uint64(m.PropID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckChargePropRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsBYFlay != 0 {
		n += 1 + sovApi(uint64(m.IsBYFlay))
	}
	l = len(m.LastBuyTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserBestResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserBestResultRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserBestResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsertCommonLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.AreanID != 0 {
		n += 1 + sovApi(uint64(m.AreanID))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryCommonLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovApi(uint64(m.UserID))
	}
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.LogType != 0 {
		n += 1 + sovApi(uint64(m.LogType))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryCommonLogRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, s := range m.Logs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRobotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsVisitorRoom {
		n += 2
	}
	if m.MinCoin != 0 {
		n += 1 + sovApi(uint64(m.MinCoin))
	}
	if m.MaxCoin != 0 {
		n += 1 + sovApi(uint64(m.MaxCoin))
	}
	if m.INum != 0 {
		n += 1 + sovApi(uint64(m.INum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRobotRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRobotsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ceritification)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HeadUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRobotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRobotRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiUserMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiUserMoneyRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserMoneyInfos) > 0 {
		for _, e := range m.UserMoneyInfos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiUserMoney) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiUserGameInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	l = len(m.UserIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiUserGameInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MultiUserInfos) > 0 {
		for _, e := range m.MultiUserInfos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiUserGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.WinCount != 0 {
		n += 1 + sovApi(uint64(m.WinCount))
	}
	if m.LoseCount != 0 {
		n += 1 + sovApi(uint64(m.LoseCount))
	}
	if m.DrawCount != 0 {
		n += 1 + sovApi(uint64(m.DrawCount))
	}
	if m.FleeCount != 0 {
		n += 1 + sovApi(uint64(m.FleeCount))
	}
	if m.RightID != 0 {
		n += 1 + sovApi(uint64(m.RightID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobotInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ceritification)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HeadUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.WinCount != 0 {
		n += 1 + sovApi(uint64(m.WinCount))
	}
	if m.LoseCount != 0 {
		n += 1 + sovApi(uint64(m.LoseCount))
	}
	if m.DrawCount != 0 {
		n += 1 + sovApi(uint64(m.DrawCount))
	}
	if m.FleeCount != 0 {
		n += 1 + sovApi(uint64(m.FleeCount))
	}
	if m.RightID != 0 {
		n += 1 + sovApi(uint64(m.RightID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryTridentWinRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.TopNum != 0 {
		n += 1 + sovApi(uint64(m.TopNum))
	}
	l = len(m.BeginDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TridentWinRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NDBID != 0 {
		n += 1 + sovApi(uint64(m.NDBID))
	}
	l = len(m.SzNickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SzDateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NNewRecord != 0 {
		n += 1 + sovApi(uint64(m.NNewRecord))
	}
	if m.LlTick != 0 {
		n += 1 + sovApi(uint64(m.LlTick))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryTridentWinRecordRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.TridentWinRecords) > 0 {
		for _, e := range m.TridentWinRecords {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsetTridentWinRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.UserDBID != 0 {
		n += 1 + sovApi(uint64(m.UserDBID))
	}
	if m.WinNum != 0 {
		n += 1 + sovApi(uint64(m.WinNum))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnUpdateConsumeStatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovApi(uint64(m.GameID))
	}
	if m.ArenaID != 0 {
		n += 1 + sovApi(uint64(m.ArenaID))
	}
	if m.ServerID != 0 {
		n += 1 + sovApi(uint64(m.ServerID))
	}
	if m.PlayerID != 0 {
		n += 1 + sovApi(uint64(m.PlayerID))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Consume != 0 {
		n += 1 + sovApi(uint64(m.Consume))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseUserInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseUserInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseUserInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseuserinfoget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Baseuserinfoget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterRoomRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterRoomRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterRoomRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbserverid", wireType)
			}
			m.Dbserverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dbserverid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginMoney", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginMoney = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantedMoney", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WantedMoney = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TiSysType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TiSysType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveRoomLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveRoomLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveRoomLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoseCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrawCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleeCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleeCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveRoomLogDxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveRoomLogDxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveRoomLogDxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoseCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrawCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleeCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleeCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTrusteeship", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsTrusteeship = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePreventCheatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePreventCheatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePreventCheatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNUM", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldNUM = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePreventCheatRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePreventCheatRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePreventCheatRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum", wireType)
			}
			m.GoldNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshUserMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshUserMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshUserMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TiSysType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TiSysType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshUserMoneyRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshUserMoneyRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshUserMoneyRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountPlayerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountPlayerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountPlayerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Num = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAwardGoldPoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAwardGoldPoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAwardGoldPoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldNum1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldNum2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldNum3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldNum4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldNum5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAwardGoldPoolRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAwardGoldPoolRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAwardGoldPoolRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum1", wireType)
			}
			m.GoldNum1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldNum1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum2", wireType)
			}
			m.GoldNum2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldNum2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum3", wireType)
			}
			m.GoldNum3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldNum3 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum4", wireType)
			}
			m.GoldNum4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldNum4 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum5", wireType)
			}
			m.GoldNum5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldNum5 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldSumNum1", wireType)
			}
			m.GoldSumNum1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldSumNum1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldSumNum2", wireType)
			}
			m.GoldSumNum2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldSumNum2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldSumNum3", wireType)
			}
			m.GoldSumNum3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldSumNum3 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldSumNum4", wireType)
			}
			m.GoldSumNum4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldSumNum4 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldSumNum5", wireType)
			}
			m.GoldSumNum5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldSumNum5 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJackpotRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJackpotRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJackpotRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arenaid", wireType)
			}
			m.Arenaid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arenaid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			m.Robot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Robot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJackpotRecordRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJackpotRecordRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJackpotRecordRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertJackpotRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertJackpotRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertJackpotRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJackpotPoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJackpotPoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJackpotPoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJackpotPoolRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJackpotPoolRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJackpotPoolRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJackpotPoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJackpotPoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJackpotPoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Add = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVipInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVipInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVipInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVipInfosRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVipInfosRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVipInfosRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isvip", wireType)
			}
			m.Isvip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Isvip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ispermanentvip", wireType)
			}
			m.Ispermanentvip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ispermanentvip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheckInRoom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsCheckInRoom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMoneyRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMoneyRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMoneyRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardGoldPoolUserLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardGoldPoolUserLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardGoldPoolUserLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatEextendCoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatEextendCoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatEextendCoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatEextendCoinRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatEextendCoinRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatEextendCoinRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutDwonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutDwonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutDwonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCustomRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCustomRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCustomRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCustomRoomRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCustomRoomRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCustomRoomRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomnum", wireType)
			}
			m.Roomnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomnum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableRecordUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableRecordUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableRecordUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNew", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddNew = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomGameResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomGameResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomGameResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonUserLogAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonUserLogAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonUserLogAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			m.LogType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishMailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishMailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishMailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendType", wireType)
			}
			m.SendType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewordInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewordInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishMailRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishMailRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishMailRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyLoginSucessReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyLoginSucessReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyLoginSucessReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameLogReturnRatesAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameLogReturnRatesAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameLogReturnRatesAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoryReRates", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TheoryReRates = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consume", wireType)
			}
			m.Consume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavgGain", wireType)
			}
			m.SavgGain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SavgGain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftTicketUserTicketUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftTicketUserTicketUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftTicketUserTicketUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			m.SourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftTicketUserTicketUpdateRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftTicketUserTicketUpdateRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftTicketUserTicketUpdateRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTicket", wireType)
			}
			m.CurrentTicket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTicket |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DBMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardUserTelephoneBillReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardUserTelephoneBillReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardUserTelephoneBillReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Par", wireType)
			}
			m.Par = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Par |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			m.Sign = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sign |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EveryGameLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EveryGameLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EveryGameLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Money = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gameno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chairno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chairno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscoingame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iscoingame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BIsTrusteeship", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BIsTrusteeship = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClubEveryGameLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClubEveryGameLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClubEveryGameLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chairno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chairno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gameno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Money = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeductType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeductType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTrusteeship", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsTrusteeship = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LittleGameNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LittleGameNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoCreateRoom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsAutoCreateRoom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayRoomCardNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayRoomCardNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiecrustNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PiecrustNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeInLimitNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakeInLimitNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeInType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakeInType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserNickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomUserNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomUserNickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentUserNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentUserNickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerMaxNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerMaxNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClubEveryGameLogRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClubEveryGameLogRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClubEveryGameLogRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameLogID", wireType)
			}
			m.GameLogID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameLogID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserLastMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserLastMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserLastMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveVipPointReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveVipPointReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveVipPointReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVipInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVipInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVipInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVipInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVipInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVipInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequenterScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FrequenterScore = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvDays", wireType)
			}
			m.AdvDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdvDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoVipGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoVipGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoVipGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoVipGetRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoVipGetRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoVipGetRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupuserID", wireType)
			}
			m.SupuserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupuserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupsuserID", wireType)
			}
			m.SupsuserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupsuserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerConsumeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerConsumeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerConsumeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinCnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerGameInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerGameInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerGameInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagPlayerGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tagPlayerGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tagPlayerGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			m.WinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseCount", wireType)
			}
			m.LoseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			m.DrawCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleeCount", wireType)
			}
			m.FleeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FleeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightID", wireType)
			}
			m.RightID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score2", wireType)
			}
			m.Score2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerGameInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerGameInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerGameInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &TagPlayerGameInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerArenaInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerArenaInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerArenaInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerArenaInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerArenaInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerArenaInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &TagPlayerGameInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequentArgumentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequentArgumentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequentArgumentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnGameId", wireType)
			}
			m.SnGameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnGameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequentArgumentRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequentArgumentRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequentArgumentRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N1StFreqArgu", wireType)
			}
			m.N1StFreqArgu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N1StFreqArgu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N2NdFreqArgu", wireType)
			}
			m.N2NdFreqArgu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N2NdFreqArgu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebUpdateUserCashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebUpdateUserCashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebUpdateUserCashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WantedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWriteLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsWriteLog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebUpdateUserCashRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebUpdateUserCashRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebUpdateUserCashRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAmount", wireType)
			}
			m.CurrentAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifyAmount", wireType)
			}
			m.ModifyAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifyAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameCutCardLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameCutCardLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameCutCardLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CutNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutCoinNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CutCoinNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMailInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMailInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMailInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMailInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMailInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMailInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailID", wireType)
			}
			m.MailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailID", wireType)
			}
			m.MailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StartTime = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTIme", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EndTIme = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendType", wireType)
			}
			m.SendType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMailInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMailInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMailInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserChargeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserChargeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserChargeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckType", wireType)
			}
			m.CheckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserChargeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserChargeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserChargeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChargePropReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChargePropReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChargePropReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckChargePropRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckChargePropRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckChargePropRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBYFlay", wireType)
			}
			m.IsBYFlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBYFlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBuyTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBuyTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserBestResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserBestResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserBestResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserBestResultRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserBestResultRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserBestResultRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserBestResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserBestResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserBestResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertCommonLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertCommonLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertCommonLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreanID", wireType)
			}
			m.AreanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreanID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommonLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommonLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommonLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			m.LogType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommonLogRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommonLogRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommonLogRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRobotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRobotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRobotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVisitorRoom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVisitorRoom = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCoin", wireType)
			}
			m.MinCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCoin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCoin", wireType)
			}
			m.MaxCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCoin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field INum", wireType)
			}
			m.INum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.INum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRobotRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRobotRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRobotRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &GetRobotsRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRobotsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRobotsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRobotsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ceritification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ceritification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRobotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRobotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRobotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRobotRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRobotRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRobotRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiUserMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiUserMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiUserMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiUserMoneyRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiUserMoneyRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiUserMoneyRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMoneyInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserMoneyInfos = append(m.UserMoneyInfos, &MultiUserMoney{})
			if err := m.UserMoneyInfos[len(m.UserMoneyInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiUserMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiUserMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiUserMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiUserGameInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiUserGameInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiUserGameInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiUserGameInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiUserGameInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiUserGameInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiUserInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiUserInfos = append(m.MultiUserInfos, &GetMultiUserGameInfo{})
			if err := m.MultiUserInfos[len(m.MultiUserInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiUserGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiUserGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiUserGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			m.WinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseCount", wireType)
			}
			m.LoseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			m.DrawCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleeCount", wireType)
			}
			m.FleeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FleeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightID", wireType)
			}
			m.RightID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobotInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobotInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobotInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ceritification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ceritification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinCount", wireType)
			}
			m.WinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseCount", wireType)
			}
			m.LoseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCount", wireType)
			}
			m.DrawCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleeCount", wireType)
			}
			m.FleeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FleeCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightID", wireType)
			}
			m.RightID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTridentWinRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTridentWinRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTridentWinRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopNum", wireType)
			}
			m.TopNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TridentWinRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TridentWinRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TridentWinRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NDBID", wireType)
			}
			m.NDBID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NDBID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SzNickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SzNickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SzDateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SzDateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NNewRecord", wireType)
			}
			m.NNewRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NNewRecord |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LlTick", wireType)
			}
			m.LlTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LlTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTridentWinRecordRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTridentWinRecordRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTridentWinRecordRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TridentWinRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TridentWinRecords = append(m.TridentWinRecords, &TridentWinRecord{})
			if err := m.TridentWinRecords[len(m.TridentWinRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsetTridentWinRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsetTridentWinRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsetTridentWinRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDBID", wireType)
			}
			m.UserDBID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDBID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinNum", wireType)
			}
			m.WinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnUpdateConsumeStatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnUpdateConsumeStatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnUpdateConsumeStatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaID", wireType)
			}
			m.ArenaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consume", wireType)
			}
			m.Consume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
