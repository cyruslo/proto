// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathWorldOnBaseUserInfoGet = "/world/OnBaseUserInfoGet"
var PathWorldOnEnterRoom = "/world/OnEnterRoom"
var PathWorldOnLeaveRoom = "/world/OnLeaveRoom"
var PathWorldOnLeaveRoomLog = "/world/OnLeaveRoomLog"
var PathWorldOnLeaveRoomLogDx = "/world/OnLeaveRoomLogDx"
var PathWorldOnUpdatePreventCheat = "/world/OnUpdatePreventCheat"
var PathWorldOnRefreshUserMoney = "/world/OnRefreshUserMoney"
var PathWorldOnCountPlayer = "/world/OnCountPlayer"
var PathWorldOnUpdateAwardGoldPool = "/world/OnUpdateAwardGoldPool"
var PathWorldOnGetJackpotRecord = "/world/OnGetJackpotRecord"
var PathWorldOnInsertJackpotRecord = "/world/OnInsertJackpotRecord"
var PathWorldOnGetJackpotPool = "/world/OnGetJackpotPool"
var PathWorldOnUpdateJackpotPool = "/world/OnUpdateJackpotPool"
var PathWorldOnGetVipInfos = "/world/OnGetVipInfos"
var PathWorldOnUpdateMoney = "/world/OnUpdateMoney"
var PathWorldOnAwardGoldPoolUserLog = "/world/OnAwardGoldPoolUserLog"
var PathWorldOnUpdatEextendCoin = "/world/OnUpdatEextendCoin"
var PathWorldOnShutDwon = "/world/OnShutDwon"
var PathWorldOnCreateCustomRoom = "/world/OnCreateCustomRoom"
var PathWorldOnTableRecordUpdate = "/world/OnTableRecordUpdate"
var PathWorldOnCustomGameResult = "/world/OnCustomGameResult"
var PathWorldOnCommonUserLogAdd = "/world/OnCommonUserLogAdd"
var PathWorldOnPublishMail = "/world/OnPublishMail"
var PathWorldOnNotifyLoginSucess = "/world/OnNotifyLoginSucess"
var PathWorldOnGameLogReturnRatesAdd = "/world/OnGameLogReturnRatesAdd"
var PathWorldOnGiftTicketUserTicketUpdate = "/world/OnGiftTicketUserTicketUpdate"
var PathWorldOnAwardUserTelephoneBill = "/world/OnAwardUserTelephoneBill"
var PathWorldOnEveryGameLog = "/world/OnEveryGameLog"
var PathWorldOnClubEveryGameLog = "/world/OnClubEveryGameLog"
var PathWorldOnRemoveUserLastMoney = "/world/OnRemoveUserLastMoney"
var PathWorldOnSaveVipPoint = "/world/OnSaveVipPoint"
var PathWorldOnGetVipInfo = "/world/OnGetVipInfo"
var PathWorldOnUserInfoVipGet = "/world/OnUserInfoVipGet"
var PathWorldOnPlayerConsume = "/world/OnPlayerConsume"
var PathWorldOnPlayerGameInfo = "/world/OnPlayerGameInfo"
var PathWorldOnPlayerArenaInfo = "/world/OnPlayerArenaInfo"
var PathWorldOnFrequentArgument = "/world/OnFrequentArgument"
var PathWorldOnWebUpdateUserCash = "/world/OnWebUpdateUserCash"
var PathWorldOnGameCutCardLog = "/world/OnGameCutCardLog"
var PathWorldOnAddMailInfo = "/world/OnAddMailInfo"
var PathWorldOnSendMailInfo = "/world/OnSendMailInfo"
var PathWorldOnCheckUserCharge = "/world/OnCheckUserCharge"
var PathWorldOnCheckChargeProp = "/world/OnCheckChargeProp"
var PathWorldOnGetUserBestResult = "/world/OnGetUserBestResult"
var PathWorldOnUpdateUserBestResult = "/world/OnUpdateUserBestResult"
var PathWorldOnInsertCommonLog = "/world/OnInsertCommonLog"
var PathWorldOnQueryCommonLog = "/world/OnQueryCommonLog"
var PathWorldOnGetRobot = "/world/OnGetRobot"
var PathWorldOnUpdateRobot = "/world/OnUpdateRobot"
var PathWorldOnGetMultiUserMoney = "/world/OnGetMultiUserMoney"
var PathWorldOnGetMultiUserGameInfo = "/world/OnGetMultiUserGameInfo"
var PathWorldOnQueryTridentWinRecordRequst = "/world/OnQueryTridentWinRecordRequst"
var PathWorldOnInsertTridentWinRecordRequst = "/world/OnInsertTridentWinRecordRequst"
var PathWorldOnUpdateConsumeStat = "/world/OnUpdateConsumeStat"

// WorldBMServer is the server API for World service.
type WorldBMServer interface {
	OnBaseUserInfoGet(ctx context.Context, req *BaseUserInfoReq) (resp *BaseUserInfoRsp, err error)

	OnEnterRoom(ctx context.Context, req *EnterRoomReq) (resp *EnterRoomRsp, err error)

	OnLeaveRoom(ctx context.Context, req *LeaveRoomReq) (resp *CommonResp, err error)

	OnLeaveRoomLog(ctx context.Context, req *LeaveRoomLogReq) (resp *CommonResp, err error)

	OnLeaveRoomLogDx(ctx context.Context, req *LeaveRoomLogDxReq) (resp *CommonResp, err error)

	OnUpdatePreventCheat(ctx context.Context, req *UpdatePreventCheatReq) (resp *UpdatePreventCheatRsp, err error)

	OnRefreshUserMoney(ctx context.Context, req *RefreshUserMoneyReq) (resp *RefreshUserMoneyRsp, err error)

	OnCountPlayer(ctx context.Context, req *CountPlayerReq) (resp *CommonResp, err error)

	OnUpdateAwardGoldPool(ctx context.Context, req *UpdateAwardGoldPoolReq) (resp *UpdateAwardGoldPoolRsp, err error)

	OnGetJackpotRecord(ctx context.Context, req *GetJackpotRecordReq) (resp *GetJackpotRecordRsp, err error)

	OnInsertJackpotRecord(ctx context.Context, req *InsertJackpotRecordReq) (resp *CommonResp, err error)

	OnGetJackpotPool(ctx context.Context, req *GetJackpotPoolReq) (resp *GetJackpotPoolRsp, err error)

	OnUpdateJackpotPool(ctx context.Context, req *UpdateJackpotPoolReq) (resp *CommonResp, err error)

	OnGetVipInfos(ctx context.Context, req *GetVipInfosReq) (resp *GetVipInfosRsp, err error)

	OnUpdateMoney(ctx context.Context, req *UpdateMoneyReq) (resp *UpdateMoneyRsp, err error)

	OnAwardGoldPoolUserLog(ctx context.Context, req *AwardGoldPoolUserLogReq) (resp *CommonResp, err error)

	OnUpdatEextendCoin(ctx context.Context, req *UpdatEextendCoinReq) (resp *UpdatEextendCoinRsp, err error)

	OnShutDwon(ctx context.Context, req *ShutDwonReq) (resp *CommonResp, err error)

	OnCreateCustomRoom(ctx context.Context, req *CreateCustomRoomReq) (resp *CreateCustomRoomRsp, err error)

	OnTableRecordUpdate(ctx context.Context, req *TableRecordUpdateReq) (resp *CommonResp, err error)

	OnCustomGameResult(ctx context.Context, req *CustomGameResultReq) (resp *CommonResp, err error)

	OnCommonUserLogAdd(ctx context.Context, req *CommonUserLogAddReq) (resp *CommonResp, err error)

	OnPublishMail(ctx context.Context, req *PublishMailReq) (resp *PublishMailRsp, err error)

	OnNotifyLoginSucess(ctx context.Context, req *NotifyLoginSucessReq) (resp *CommonResp, err error)

	OnGameLogReturnRatesAdd(ctx context.Context, req *GameLogReturnRatesAddReq) (resp *CommonResp, err error)

	OnGiftTicketUserTicketUpdate(ctx context.Context, req *GiftTicketUserTicketUpdateReq) (resp *GiftTicketUserTicketUpdateRsp, err error)

	OnAwardUserTelephoneBill(ctx context.Context, req *AwardUserTelephoneBillReq) (resp *CommonResp, err error)

	OnEveryGameLog(ctx context.Context, req *EveryGameLogReq) (resp *CommonResp, err error)

	OnClubEveryGameLog(ctx context.Context, req *ClubEveryGameLogReq) (resp *ClubEveryGameLogRsp, err error)

	OnRemoveUserLastMoney(ctx context.Context, req *RemoveUserLastMoneyReq) (resp *CommonResp, err error)

	OnSaveVipPoint(ctx context.Context, req *SaveVipPointReq) (resp *CommonResp, err error)

	OnGetVipInfo(ctx context.Context, req *GetVipInfoReq) (resp *GetVipInfoRsp, err error)

	OnUserInfoVipGet(ctx context.Context, req *UserInfoVipGetReq) (resp *UserInfoVipGetRsp, err error)

	OnPlayerConsume(ctx context.Context, req *PlayerConsumeReq) (resp *CommonResp, err error)

	OnPlayerGameInfo(ctx context.Context, req *PlayerGameInfoReq) (resp *PlayerGameInfoRsp, err error)

	OnPlayerArenaInfo(ctx context.Context, req *PlayerArenaInfoReq) (resp *PlayerArenaInfoRsp, err error)

	OnFrequentArgument(ctx context.Context, req *FrequentArgumentReq) (resp *FrequentArgumentRsp, err error)

	OnWebUpdateUserCash(ctx context.Context, req *WebUpdateUserCashReq) (resp *WebUpdateUserCashRsp, err error)

	OnGameCutCardLog(ctx context.Context, req *GameCutCardLogReq) (resp *CommonResp, err error)

	OnAddMailInfo(ctx context.Context, req *AddMailInfoReq) (resp *AddMailInfoRsp, err error)

	OnSendMailInfo(ctx context.Context, req *SendMailInfoReq) (resp *SendMailInfoRsp, err error)

	OnCheckUserCharge(ctx context.Context, req *CheckUserChargeReq) (resp *CheckUserChargeRsp, err error)

	OnCheckChargeProp(ctx context.Context, req *CheckChargePropReq) (resp *CheckChargePropRsp, err error)

	OnGetUserBestResult(ctx context.Context, req *GetUserBestResultReq) (resp *GetUserBestResultRsp, err error)

	OnUpdateUserBestResult(ctx context.Context, req *UpdateUserBestResultReq) (resp *CommonResp, err error)

	OnInsertCommonLog(ctx context.Context, req *InsertCommonLogReq) (resp *CommonResp, err error)

	OnQueryCommonLog(ctx context.Context, req *QueryCommonLogReq) (resp *QueryCommonLogRsp, err error)

	OnGetRobot(ctx context.Context, req *GetRobotReq) (resp *GetRobotRsp, err error)

	OnUpdateRobot(ctx context.Context, req *UpdateRobotReq) (resp *UpdateRobotRsp, err error)

	OnGetMultiUserMoney(ctx context.Context, req *GetMultiUserMoneyReq) (resp *GetMultiUserMoneyRsp, err error)

	OnGetMultiUserGameInfo(ctx context.Context, req *GetMultiUserGameInfoReq) (resp *GetMultiUserGameInfoRsp, err error)

	OnQueryTridentWinRecordRequst(ctx context.Context, req *QueryTridentWinRecordReq) (resp *QueryTridentWinRecordRsp, err error)

	OnInsertTridentWinRecordRequst(ctx context.Context, req *InsetTridentWinRecordReq) (resp *CommonResp, err error)

	OnUpdateConsumeStat(ctx context.Context, req *OnUpdateConsumeStatReq) (resp *CommonResp, err error)
}

var WorldSvc WorldBMServer

func worldOnBaseUserInfoGet(c *bm.Context) {
	p := new(BaseUserInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnBaseUserInfoGet(c, p)
	c.JSON(resp, err)
}

func worldOnEnterRoom(c *bm.Context) {
	p := new(EnterRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnEnterRoom(c, p)
	c.JSON(resp, err)
}

func worldOnLeaveRoom(c *bm.Context) {
	p := new(LeaveRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnLeaveRoom(c, p)
	c.JSON(resp, err)
}

func worldOnLeaveRoomLog(c *bm.Context) {
	p := new(LeaveRoomLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnLeaveRoomLog(c, p)
	c.JSON(resp, err)
}

func worldOnLeaveRoomLogDx(c *bm.Context) {
	p := new(LeaveRoomLogDxReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnLeaveRoomLogDx(c, p)
	c.JSON(resp, err)
}

func worldOnUpdatePreventCheat(c *bm.Context) {
	p := new(UpdatePreventCheatReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdatePreventCheat(c, p)
	c.JSON(resp, err)
}

func worldOnRefreshUserMoney(c *bm.Context) {
	p := new(RefreshUserMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnRefreshUserMoney(c, p)
	c.JSON(resp, err)
}

func worldOnCountPlayer(c *bm.Context) {
	p := new(CountPlayerReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCountPlayer(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateAwardGoldPool(c *bm.Context) {
	p := new(UpdateAwardGoldPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateAwardGoldPool(c, p)
	c.JSON(resp, err)
}

func worldOnGetJackpotRecord(c *bm.Context) {
	p := new(GetJackpotRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetJackpotRecord(c, p)
	c.JSON(resp, err)
}

func worldOnInsertJackpotRecord(c *bm.Context) {
	p := new(InsertJackpotRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnInsertJackpotRecord(c, p)
	c.JSON(resp, err)
}

func worldOnGetJackpotPool(c *bm.Context) {
	p := new(GetJackpotPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetJackpotPool(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateJackpotPool(c *bm.Context) {
	p := new(UpdateJackpotPoolReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateJackpotPool(c, p)
	c.JSON(resp, err)
}

func worldOnGetVipInfos(c *bm.Context) {
	p := new(GetVipInfosReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetVipInfos(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateMoney(c *bm.Context) {
	p := new(UpdateMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateMoney(c, p)
	c.JSON(resp, err)
}

func worldOnAwardGoldPoolUserLog(c *bm.Context) {
	p := new(AwardGoldPoolUserLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnAwardGoldPoolUserLog(c, p)
	c.JSON(resp, err)
}

func worldOnUpdatEextendCoin(c *bm.Context) {
	p := new(UpdatEextendCoinReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdatEextendCoin(c, p)
	c.JSON(resp, err)
}

func worldOnShutDwon(c *bm.Context) {
	p := new(ShutDwonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnShutDwon(c, p)
	c.JSON(resp, err)
}

func worldOnCreateCustomRoom(c *bm.Context) {
	p := new(CreateCustomRoomReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCreateCustomRoom(c, p)
	c.JSON(resp, err)
}

func worldOnTableRecordUpdate(c *bm.Context) {
	p := new(TableRecordUpdateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnTableRecordUpdate(c, p)
	c.JSON(resp, err)
}

func worldOnCustomGameResult(c *bm.Context) {
	p := new(CustomGameResultReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCustomGameResult(c, p)
	c.JSON(resp, err)
}

func worldOnCommonUserLogAdd(c *bm.Context) {
	p := new(CommonUserLogAddReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCommonUserLogAdd(c, p)
	c.JSON(resp, err)
}

func worldOnPublishMail(c *bm.Context) {
	p := new(PublishMailReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnPublishMail(c, p)
	c.JSON(resp, err)
}

func worldOnNotifyLoginSucess(c *bm.Context) {
	p := new(NotifyLoginSucessReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnNotifyLoginSucess(c, p)
	c.JSON(resp, err)
}

func worldOnGameLogReturnRatesAdd(c *bm.Context) {
	p := new(GameLogReturnRatesAddReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGameLogReturnRatesAdd(c, p)
	c.JSON(resp, err)
}

func worldOnGiftTicketUserTicketUpdate(c *bm.Context) {
	p := new(GiftTicketUserTicketUpdateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGiftTicketUserTicketUpdate(c, p)
	c.JSON(resp, err)
}

func worldOnAwardUserTelephoneBill(c *bm.Context) {
	p := new(AwardUserTelephoneBillReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnAwardUserTelephoneBill(c, p)
	c.JSON(resp, err)
}

func worldOnEveryGameLog(c *bm.Context) {
	p := new(EveryGameLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnEveryGameLog(c, p)
	c.JSON(resp, err)
}

func worldOnClubEveryGameLog(c *bm.Context) {
	p := new(ClubEveryGameLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnClubEveryGameLog(c, p)
	c.JSON(resp, err)
}

func worldOnRemoveUserLastMoney(c *bm.Context) {
	p := new(RemoveUserLastMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnRemoveUserLastMoney(c, p)
	c.JSON(resp, err)
}

func worldOnSaveVipPoint(c *bm.Context) {
	p := new(SaveVipPointReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnSaveVipPoint(c, p)
	c.JSON(resp, err)
}

func worldOnGetVipInfo(c *bm.Context) {
	p := new(GetVipInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetVipInfo(c, p)
	c.JSON(resp, err)
}

func worldOnUserInfoVipGet(c *bm.Context) {
	p := new(UserInfoVipGetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUserInfoVipGet(c, p)
	c.JSON(resp, err)
}

func worldOnPlayerConsume(c *bm.Context) {
	p := new(PlayerConsumeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnPlayerConsume(c, p)
	c.JSON(resp, err)
}

func worldOnPlayerGameInfo(c *bm.Context) {
	p := new(PlayerGameInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnPlayerGameInfo(c, p)
	c.JSON(resp, err)
}

func worldOnPlayerArenaInfo(c *bm.Context) {
	p := new(PlayerArenaInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnPlayerArenaInfo(c, p)
	c.JSON(resp, err)
}

func worldOnFrequentArgument(c *bm.Context) {
	p := new(FrequentArgumentReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnFrequentArgument(c, p)
	c.JSON(resp, err)
}

func worldOnWebUpdateUserCash(c *bm.Context) {
	p := new(WebUpdateUserCashReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnWebUpdateUserCash(c, p)
	c.JSON(resp, err)
}

func worldOnGameCutCardLog(c *bm.Context) {
	p := new(GameCutCardLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGameCutCardLog(c, p)
	c.JSON(resp, err)
}

func worldOnAddMailInfo(c *bm.Context) {
	p := new(AddMailInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnAddMailInfo(c, p)
	c.JSON(resp, err)
}

func worldOnSendMailInfo(c *bm.Context) {
	p := new(SendMailInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnSendMailInfo(c, p)
	c.JSON(resp, err)
}

func worldOnCheckUserCharge(c *bm.Context) {
	p := new(CheckUserChargeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCheckUserCharge(c, p)
	c.JSON(resp, err)
}

func worldOnCheckChargeProp(c *bm.Context) {
	p := new(CheckChargePropReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnCheckChargeProp(c, p)
	c.JSON(resp, err)
}

func worldOnGetUserBestResult(c *bm.Context) {
	p := new(GetUserBestResultReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetUserBestResult(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateUserBestResult(c *bm.Context) {
	p := new(UpdateUserBestResultReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateUserBestResult(c, p)
	c.JSON(resp, err)
}

func worldOnInsertCommonLog(c *bm.Context) {
	p := new(InsertCommonLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnInsertCommonLog(c, p)
	c.JSON(resp, err)
}

func worldOnQueryCommonLog(c *bm.Context) {
	p := new(QueryCommonLogReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnQueryCommonLog(c, p)
	c.JSON(resp, err)
}

func worldOnGetRobot(c *bm.Context) {
	p := new(GetRobotReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetRobot(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateRobot(c *bm.Context) {
	p := new(UpdateRobotReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateRobot(c, p)
	c.JSON(resp, err)
}

func worldOnGetMultiUserMoney(c *bm.Context) {
	p := new(GetMultiUserMoneyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetMultiUserMoney(c, p)
	c.JSON(resp, err)
}

func worldOnGetMultiUserGameInfo(c *bm.Context) {
	p := new(GetMultiUserGameInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnGetMultiUserGameInfo(c, p)
	c.JSON(resp, err)
}

func worldOnQueryTridentWinRecordRequst(c *bm.Context) {
	p := new(QueryTridentWinRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnQueryTridentWinRecordRequst(c, p)
	c.JSON(resp, err)
}

func worldOnInsertTridentWinRecordRequst(c *bm.Context) {
	p := new(InsetTridentWinRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnInsertTridentWinRecordRequst(c, p)
	c.JSON(resp, err)
}

func worldOnUpdateConsumeStat(c *bm.Context) {
	p := new(OnUpdateConsumeStatReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WorldSvc.OnUpdateConsumeStat(c, p)
	c.JSON(resp, err)
}

// RegisterWorldBMServer Register the blademaster route
func RegisterWorldBMServer(e *bm.Engine, server WorldBMServer) {
	WorldSvc = server
	e.GET("/world/OnBaseUserInfoGet", worldOnBaseUserInfoGet)
	e.GET("/world/OnEnterRoom", worldOnEnterRoom)
	e.POST("/world/OnLeaveRoom", worldOnLeaveRoom)
	e.POST("/world/OnLeaveRoomLog", worldOnLeaveRoomLog)
	e.POST("/world/OnLeaveRoomLogDx", worldOnLeaveRoomLogDx)
	e.GET("/world/OnUpdatePreventCheat", worldOnUpdatePreventCheat)
	e.POST("/world/OnRefreshUserMoney", worldOnRefreshUserMoney)
	e.GET("/world/OnCountPlayer", worldOnCountPlayer)
	e.POST("/world/OnUpdateAwardGoldPool", worldOnUpdateAwardGoldPool)
	e.POST("/world/OnGetJackpotRecord", worldOnGetJackpotRecord)
	e.POST("/world/OnInsertJackpotRecord", worldOnInsertJackpotRecord)
	e.POST("/world/OnGetJackpotPool", worldOnGetJackpotPool)
	e.POST("/world/OnUpdateJackpotPool", worldOnUpdateJackpotPool)
	e.GET("/world/OnGetVipInfos", worldOnGetVipInfos)
	e.POST("/world/OnUpdateMoney", worldOnUpdateMoney)
	e.POST("/world/OnAwardGoldPoolUserLog", worldOnAwardGoldPoolUserLog)
	e.POST("/world/OnUpdatEextendCoin", worldOnUpdatEextendCoin)
	e.POST("/world/OnShutDwon", worldOnShutDwon)
	e.POST("/world/OnCreateCustomRoom", worldOnCreateCustomRoom)
	e.GET("/world/OnTableRecordUpdate", worldOnTableRecordUpdate)
	e.GET("/world/OnCustomGameResult", worldOnCustomGameResult)
	e.POST("/world/OnCommonUserLogAdd", worldOnCommonUserLogAdd)
	e.POST("/world/OnPublishMail", worldOnPublishMail)
	e.GET("/world/OnNotifyLoginSucess", worldOnNotifyLoginSucess)
	e.GET("/world/OnGameLogReturnRatesAdd", worldOnGameLogReturnRatesAdd)
	e.GET("/world/OnGiftTicketUserTicketUpdate", worldOnGiftTicketUserTicketUpdate)
	e.POST("/world/OnAwardUserTelephoneBill", worldOnAwardUserTelephoneBill)
	e.GET("/world/OnEveryGameLog", worldOnEveryGameLog)
	e.GET("/world/OnClubEveryGameLog", worldOnClubEveryGameLog)
	e.POST("/world/OnRemoveUserLastMoney", worldOnRemoveUserLastMoney)
	e.GET("/world/OnSaveVipPoint", worldOnSaveVipPoint)
	e.GET("/world/OnGetVipInfo", worldOnGetVipInfo)
	e.GET("/world/OnUserInfoVipGet", worldOnUserInfoVipGet)
	e.GET("/world/OnPlayerConsume", worldOnPlayerConsume)
	e.GET("/world/OnPlayerGameInfo", worldOnPlayerGameInfo)
	e.GET("/world/OnPlayerArenaInfo", worldOnPlayerArenaInfo)
	e.GET("/world/OnFrequentArgument", worldOnFrequentArgument)
	e.GET("/world/OnWebUpdateUserCash", worldOnWebUpdateUserCash)
	e.GET("/world/OnGameCutCardLog", worldOnGameCutCardLog)
	e.GET("/world/OnAddMailInfo", worldOnAddMailInfo)
	e.GET("/world/OnSendMailInfo", worldOnSendMailInfo)
	e.GET("/world/OnCheckUserCharge", worldOnCheckUserCharge)
	e.GET("/world/OnCheckChargeProp", worldOnCheckChargeProp)
	e.GET("/world/OnGetUserBestResult", worldOnGetUserBestResult)
	e.GET("/world/OnUpdateUserBestResult", worldOnUpdateUserBestResult)
	e.POST("/world/OnInsertCommonLog", worldOnInsertCommonLog)
	e.POST("/world/OnQueryCommonLog", worldOnQueryCommonLog)
	e.POST("/world/OnGetRobot", worldOnGetRobot)
	e.POST("/world/OnUpdateRobot", worldOnUpdateRobot)
	e.POST("/world/OnGetMultiUserMoney", worldOnGetMultiUserMoney)
	e.POST("/world/OnGetMultiUserGameInfo", worldOnGetMultiUserGameInfo)
	e.POST("/world/OnQueryTridentWinRecordRequst", worldOnQueryTridentWinRecordRequst)
	e.POST("/world/OnInsertTridentWinRecordRequst", worldOnInsertTridentWinRecordRequst)
	e.POST("/world/OnUpdateConsumeStat", worldOnUpdateConsumeStat)
}
