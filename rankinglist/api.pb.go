// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//排行榜类型
type RankType int32

const (
	RankType_Undefined     RankType = 0
	RankType_EarnRank      RankType = 1
	RankType_KillLoongRank RankType = 2
	RankType_StageRank     RankType = 3
	RankType_MonthlyRank   RankType = 4
	RankType_Maquee        RankType = 5
)

var RankType_name = map[int32]string{
	0: "Undefined",
	1: "EarnRank",
	2: "KillLoongRank",
	3: "StageRank",
	4: "MonthlyRank",
	5: "Maquee",
}

var RankType_value = map[string]int32{
	"Undefined":     0,
	"EarnRank":      1,
	"KillLoongRank": 2,
	"StageRank":     3,
	"MonthlyRank":   4,
	"Maquee":        5,
}

func (x RankType) String() string {
	return proto.EnumName(RankType_name, int32(x))
}

func (RankType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type RLErrCode int32

const (
	RLErrCode_UndefinedCode              RLErrCode = 0
	RLErrCode_ConfigsNotFound            RLErrCode = 100300
	RLErrCode_SetRankingListFailed       RLErrCode = 100301
	RLErrCode_GetRankingListFailed       RLErrCode = 100302
	RLErrCode_GetTopStatDataFromDBFailed RLErrCode = 100303
	RLErrCode_UpdateCacheFailed          RLErrCode = 100304
	RLErrCode_GetPublicUserFromDBFailed  RLErrCode = 100305
)

var RLErrCode_name = map[int32]string{
	0:      "UndefinedCode",
	100300: "ConfigsNotFound",
	100301: "SetRankingListFailed",
	100302: "GetRankingListFailed",
	100303: "GetTopStatDataFromDBFailed",
	100304: "UpdateCacheFailed",
	100305: "GetPublicUserFromDBFailed",
}

var RLErrCode_value = map[string]int32{
	"UndefinedCode":              0,
	"ConfigsNotFound":            100300,
	"SetRankingListFailed":       100301,
	"GetRankingListFailed":       100302,
	"GetTopStatDataFromDBFailed": 100303,
	"UpdateCacheFailed":          100304,
	"GetPublicUserFromDBFailed":  100305,
}

func (x RLErrCode) String() string {
	return proto.EnumName(RLErrCode_name, int32(x))
}

func (RLErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type UpdateRankingListReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId" form:"GameId" validate:"required"`
	RankType             RankType `protobuf:"varint,2,opt,name=RankType,proto3,enum=rankinglist.service.v1.RankType" json:"RankType" form:"RankType" validate:"required"`
	UserId               int64    `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId" form:"UserId"`
	Rank                 int64    `protobuf:"varint,4,opt,name=Rank,proto3" json:"Rank" form:"Rank" validate:"required"`
	RankKey              int64    `protobuf:"varint,5,opt,name=RankKey,proto3" json:"RankKey" form:"RankKey"`
	UserName             string   `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName" form:"UserName" validate:"required"`
	UpdateTime           string   `protobuf:"bytes,7,opt,name=UpdateTime,proto3" json:"UpdateTime" form:"UpdateTime"`
	Content              string   `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content" form:"Content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRankingListReq) Reset()         { *m = UpdateRankingListReq{} }
func (m *UpdateRankingListReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRankingListReq) ProtoMessage()    {}
func (*UpdateRankingListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *UpdateRankingListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRankingListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRankingListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRankingListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRankingListReq.Merge(m, src)
}
func (m *UpdateRankingListReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRankingListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRankingListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRankingListReq proto.InternalMessageInfo

type UpdateRankingListRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRankingListRsp) Reset()         { *m = UpdateRankingListRsp{} }
func (m *UpdateRankingListRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateRankingListRsp) ProtoMessage()    {}
func (*UpdateRankingListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *UpdateRankingListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRankingListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRankingListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRankingListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRankingListRsp.Merge(m, src)
}
func (m *UpdateRankingListRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRankingListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRankingListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRankingListRsp proto.InternalMessageInfo

type GetRankingListReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId" form:"GameId" validate:"required"`
	RankType             RankType `protobuf:"varint,2,opt,name=RankType,proto3,enum=rankinglist.service.v1.RankType" json:"RankType" form:"RankType" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRankingListReq) Reset()         { *m = GetRankingListReq{} }
func (m *GetRankingListReq) String() string { return proto.CompactTextString(m) }
func (*GetRankingListReq) ProtoMessage()    {}
func (*GetRankingListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetRankingListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRankingListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRankingListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRankingListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRankingListReq.Merge(m, src)
}
func (m *GetRankingListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRankingListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRankingListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRankingListReq proto.InternalMessageInfo

type GetRankingListRsp struct {
	Code                 int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Message              string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	RankInfoSize         int32       `protobuf:"varint,3,opt,name=RankInfoSize,proto3" json:"RankInfoSize"`
	RankInfoList         []*RankInfo `protobuf:"bytes,4,rep,name=RankInfoList,proto3" json:"RankInfoList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetRankingListRsp) Reset()         { *m = GetRankingListRsp{} }
func (m *GetRankingListRsp) String() string { return proto.CompactTextString(m) }
func (*GetRankingListRsp) ProtoMessage()    {}
func (*GetRankingListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GetRankingListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRankingListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRankingListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRankingListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRankingListRsp.Merge(m, src)
}
func (m *GetRankingListRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetRankingListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRankingListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRankingListRsp proto.InternalMessageInfo

type RankInfo struct {
	UserName             string   `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName"`
	UserId               int64    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId"`
	UpdateTime           string   `protobuf:"bytes,3,opt,name=UpdateTime,proto3" json:"UpdateTime"`
	Content              string   `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content"`
	Rank                 int64    `protobuf:"varint,5,opt,name=Rank,proto3" json:"Rank"`
	RankKey              int64    `protobuf:"varint,6,opt,name=RankKey,proto3" json:"RankKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankInfo) Reset()         { *m = RankInfo{} }
func (m *RankInfo) String() string { return proto.CompactTextString(m) }
func (*RankInfo) ProtoMessage()    {}
func (*RankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *RankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankInfo.Merge(m, src)
}
func (m *RankInfo) XXX_Size() int {
	return m.Size()
}
func (m *RankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RankInfo proto.InternalMessageInfo

type GetHallRankingListReq struct {
	GameId               int32    `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId" form:"GameId" validate:"required"`
	StatTypeId           int32    `protobuf:"varint,2,opt,name=StatTypeId,proto3" json:"StatTypeId" form:"StatTypeId" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHallRankingListReq) Reset()         { *m = GetHallRankingListReq{} }
func (m *GetHallRankingListReq) String() string { return proto.CompactTextString(m) }
func (*GetHallRankingListReq) ProtoMessage()    {}
func (*GetHallRankingListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetHallRankingListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHallRankingListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHallRankingListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHallRankingListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHallRankingListReq.Merge(m, src)
}
func (m *GetHallRankingListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetHallRankingListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHallRankingListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetHallRankingListReq proto.InternalMessageInfo

type GetHallRankingListRsp struct {
	Code                 int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	TopStatData          []*TopStatData `protobuf:"bytes,3,rep,name=TopStatData,proto3" json:"TopStatData"`
	LastStatTime         string         `protobuf:"bytes,4,opt,name=LastStatTime,proto3" json:"LastStatTime"`
	IsDisplay            bool           `protobuf:"varint,5,opt,name=IsDisplay,proto3" json:"IsDisplay"`
	IsDisplayAvatar      bool           `protobuf:"varint,6,opt,name=IsDisplayAvatar,proto3" json:"IsDisplayAvatar"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetHallRankingListRsp) Reset()         { *m = GetHallRankingListRsp{} }
func (m *GetHallRankingListRsp) String() string { return proto.CompactTextString(m) }
func (*GetHallRankingListRsp) ProtoMessage()    {}
func (*GetHallRankingListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *GetHallRankingListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHallRankingListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHallRankingListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHallRankingListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHallRankingListRsp.Merge(m, src)
}
func (m *GetHallRankingListRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetHallRankingListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHallRankingListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetHallRankingListRsp proto.InternalMessageInfo

type TopStatData struct {
	UserId               int32    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId"`
	NickName             string   `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName"`
	StatTypeId           int32    `protobuf:"varint,3,opt,name=StatTypeId,proto3" json:"StatTypeId"`
	StatValue            int64    `protobuf:"varint,4,opt,name=StatValue,proto3" json:"StatValue"`
	Rank                 int32    `protobuf:"varint,5,opt,name=Rank,proto3" json:"Rank"`
	IsPublic             bool     `protobuf:"varint,6,opt,name=IsPublic,proto3" json:"IsPublic"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopStatData) Reset()         { *m = TopStatData{} }
func (m *TopStatData) String() string { return proto.CompactTextString(m) }
func (*TopStatData) ProtoMessage()    {}
func (*TopStatData) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *TopStatData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopStatData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopStatData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopStatData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopStatData.Merge(m, src)
}
func (m *TopStatData) XXX_Size() int {
	return m.Size()
}
func (m *TopStatData) XXX_DiscardUnknown() {
	xxx_messageInfo_TopStatData.DiscardUnknown(m)
}

var xxx_messageInfo_TopStatData proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("rankinglist.service.v1.RankType", RankType_name, RankType_value)
	proto.RegisterEnum("rankinglist.service.v1.RLErrCode", RLErrCode_name, RLErrCode_value)
	proto.RegisterType((*UpdateRankingListReq)(nil), "rankinglist.service.v1.UpdateRankingListReq")
	proto.RegisterType((*UpdateRankingListRsp)(nil), "rankinglist.service.v1.UpdateRankingListRsp")
	proto.RegisterType((*GetRankingListReq)(nil), "rankinglist.service.v1.GetRankingListReq")
	proto.RegisterType((*GetRankingListRsp)(nil), "rankinglist.service.v1.GetRankingListRsp")
	proto.RegisterType((*RankInfo)(nil), "rankinglist.service.v1.RankInfo")
	proto.RegisterType((*GetHallRankingListReq)(nil), "rankinglist.service.v1.GetHallRankingListReq")
	proto.RegisterType((*GetHallRankingListRsp)(nil), "rankinglist.service.v1.GetHallRankingListRsp")
	proto.RegisterType((*TopStatData)(nil), "rankinglist.service.v1.TopStatData")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1b, 0xcf, 0xfa, 0x65, 0x6b, 0x8f, 0xf3, 0xe2, 0xcc, 0xbf, 0xfd, 0xe3, 0xba, 0xad, 0xd7, 0x9d,
	0x28, 0x60, 0x5a, 0x6a, 0x8b, 0x06, 0xa9, 0x52, 0x25, 0x84, 0xd8, 0xa4, 0x31, 0x51, 0xd2, 0x80,
	0x36, 0x2f, 0x48, 0x70, 0x9a, 0xd8, 0x63, 0x67, 0xd5, 0xf5, 0xce, 0x66, 0x77, 0x1c, 0x29, 0x9c,
	0x10, 0x57, 0x0e, 0x39, 0x70, 0x00, 0x89, 0x4f, 0xc2, 0x37, 0x28, 0x12, 0xd0, 0xa0, 0x4a, 0x1c,
	0x57, 0x10, 0x10, 0x07, 0x1f, 0x2d, 0x3e, 0x00, 0x9a, 0x99, 0x7d, 0x8d, 0x9d, 0x8a, 0x4a, 0xe5,
	0xc2, 0x25, 0x99, 0xe7, 0xf7, 0x3c, 0xf3, 0xbc, 0xcd, 0xef, 0x79, 0xbc, 0xa0, 0x88, 0x1d, 0xb3,
	0xe9, 0xb8, 0x94, 0x51, 0xf8, 0x7f, 0x17, 0xdb, 0x4f, 0x4c, 0xbb, 0x6f, 0x99, 0x1e, 0x6b, 0x7a,
	0xc4, 0x3d, 0x36, 0x3b, 0xa4, 0x79, 0xfc, 0x76, 0xf5, 0x5e, 0xdf, 0x64, 0x87, 0xc3, 0x83, 0x66,
	0x87, 0x0e, 0x5a, 0x7d, 0xda, 0xa7, 0x2d, 0x61, 0x7e, 0x30, 0xec, 0x09, 0x49, 0x08, 0xe2, 0x24,
	0xdd, 0x54, 0x6f, 0xf6, 0x29, 0xed, 0x5b, 0xa4, 0x85, 0x1d, 0xb3, 0x85, 0x6d, 0x9b, 0x32, 0xcc,
	0x4c, 0x6a, 0x7b, 0x52, 0x8b, 0xce, 0x72, 0xe0, 0xea, 0x9e, 0xd3, 0xc5, 0x8c, 0x18, 0x32, 0xda,
	0x96, 0xe9, 0x31, 0x83, 0x1c, 0xc1, 0x36, 0x50, 0xdb, 0x78, 0x40, 0x36, 0xba, 0x15, 0xa5, 0xae,
	0x34, 0xf2, 0x7a, 0x6b, 0xe4, 0x6b, 0x01, 0x32, 0xf6, 0xb5, 0xdb, 0x3d, 0xea, 0x0e, 0x1e, 0x22,
	0x29, 0xa3, 0xfa, 0x31, 0xb6, 0x4c, 0xee, 0xe3, 0x21, 0x72, 0xc9, 0xd1, 0xd0, 0x74, 0x49, 0x17,
	0x19, 0x81, 0x31, 0x3c, 0x02, 0x05, 0xee, 0x7a, 0xf7, 0xc4, 0x21, 0x95, 0x4c, 0x5d, 0x69, 0xcc,
	0xdf, 0xaf, 0x37, 0xa7, 0x57, 0xd6, 0x0c, 0xed, 0xf4, 0x95, 0x91, 0xaf, 0x45, 0xb7, 0xc6, 0xbe,
	0xb6, 0x24, 0xc3, 0x85, 0xc8, 0xf4, 0x80, 0xd1, 0x05, 0xb8, 0x02, 0xd4, 0x3d, 0x8f, 0xb8, 0x1b,
	0xdd, 0x4a, 0xb6, 0xae, 0x34, 0xb2, 0xfa, 0x0d, 0x9e, 0xbb, 0x44, 0xc6, 0xbe, 0x36, 0x27, 0x9d,
	0x49, 0x19, 0x19, 0x81, 0x02, 0xbe, 0x07, 0x72, 0xdc, 0x41, 0x25, 0x27, 0xae, 0xdc, 0x1d, 0xf9,
	0x9a, 0x90, 0xc7, 0xbe, 0xa6, 0xc5, 0xd1, 0xa7, 0x47, 0x16, 0x86, 0xf0, 0x01, 0xb8, 0xc2, 0xff,
	0x6f, 0x92, 0x93, 0x4a, 0x5e, 0xf8, 0xb8, 0x35, 0xf2, 0xb5, 0x10, 0x1a, 0xfb, 0xda, 0x7c, 0xec,
	0x66, 0x93, 0x9c, 0x20, 0x23, 0x54, 0xc1, 0x0f, 0x41, 0x81, 0xe7, 0xb0, 0x8d, 0x07, 0xa4, 0xa2,
	0xd6, 0x95, 0x46, 0x51, 0xd6, 0x1f, 0x62, 0x71, 0xfd, 0x21, 0x72, 0x49, 0xfd, 0xa1, 0x1a, 0xae,
	0x02, 0x20, 0xdf, 0x74, 0xd7, 0x1c, 0x90, 0xca, 0x15, 0xe1, 0x72, 0x69, 0xe4, 0x6b, 0x09, 0x74,
	0xec, 0x6b, 0x8b, 0x81, 0xd3, 0x08, 0x43, 0x46, 0xc2, 0x80, 0x97, 0xb3, 0x4a, 0x6d, 0x46, 0x6c,
	0x56, 0x29, 0x08, 0x0f, 0xa2, 0x9c, 0x00, 0x8a, 0xcb, 0x09, 0x00, 0x64, 0x84, 0x2a, 0xf4, 0xe9,
	0x34, 0x46, 0x79, 0x0e, 0xbc, 0x09, 0x72, 0x1d, 0xda, 0x25, 0x01, 0x9f, 0x0a, 0xbc, 0xc1, 0x5c,
	0x36, 0xc4, 0x5f, 0xb8, 0x0c, 0xae, 0x0c, 0x88, 0xe7, 0xe1, 0xbe, 0x64, 0x49, 0x51, 0x2f, 0xf1,
	0x70, 0x01, 0x64, 0x84, 0x07, 0xf4, 0x4c, 0x01, 0x8b, 0x6d, 0xc2, 0xfe, 0x3b, 0x64, 0x45, 0x7f,
	0x4e, 0x56, 0xf4, 0x8a, 0x9a, 0x05, 0xdf, 0x01, 0xb3, 0xdc, 0xed, 0x86, 0xdd, 0xa3, 0x3b, 0xe6,
	0x67, 0x44, 0x4c, 0x43, 0x5e, 0x2f, 0x8f, 0x7c, 0x2d, 0x85, 0x1b, 0x29, 0x09, 0xee, 0xc7, 0xb7,
	0x78, 0x36, 0x95, 0x5c, 0x3d, 0xdb, 0x28, 0xbd, 0xb8, 0x0f, 0xdc, 0x36, 0xed, 0x57, 0xd4, 0x91,
	0x92, 0xd0, 0x5f, 0x8a, 0x6c, 0x2e, 0x07, 0x60, 0x23, 0xc1, 0x79, 0x45, 0x94, 0x30, 0x9b, 0xe4,
	0x7c, 0x82, 0xcc, 0x28, 0x1a, 0xe6, 0x8c, 0x98, 0x2a, 0x10, 0x0f, 0x73, 0x34, 0xbb, 0xcd, 0x14,
	0xe1, 0xb3, 0xc2, 0xdf, 0x7c, 0x9a, 0xf0, 0x29, 0x6e, 0x2f, 0xc7, 0xdc, 0xce, 0xc5, 0xfd, 0x0b,
	0xa0, 0x88, 0xc9, 0xfc, 0x11, 0xc4, 0x4a, 0x90, 0xe3, 0x5c, 0x08, 0x57, 0x42, 0x30, 0xef, 0xcb,
	0xf1, 0xbc, 0xab, 0xc2, 0xa0, 0x94, 0x98, 0xf7, 0x68, 0xba, 0xd1, 0x77, 0x0a, 0xb8, 0xd6, 0x26,
	0xec, 0x03, 0x6c, 0x59, 0xff, 0x16, 0x6b, 0x3f, 0x06, 0x60, 0x87, 0x61, 0xc6, 0xe9, 0x14, 0xb4,
	0x29, 0xaf, 0x3f, 0xe0, 0xe5, 0xc7, 0xe8, 0xd8, 0xd7, 0x96, 0xa5, 0xc3, 0x18, 0x9b, 0xee, 0x34,
	0x71, 0x09, 0xfd, 0x92, 0x99, 0x9a, 0xfb, 0xab, 0xe2, 0xe7, 0x3e, 0x28, 0xed, 0x52, 0x87, 0xc7,
	0x5b, 0xc3, 0x0c, 0x57, 0xb2, 0x82, 0x68, 0x4b, 0x97, 0x11, 0x2d, 0x61, 0xaa, 0x2f, 0x8c, 0x7c,
	0x2d, 0x79, 0xd7, 0x48, 0x0a, 0x9c, 0xf7, 0x5b, 0xd8, 0x63, 0xa2, 0x10, 0x4e, 0x08, 0xf9, 0xc6,
	0x82, 0x9f, 0x49, 0xdc, 0x48, 0x49, 0xf0, 0x2e, 0x28, 0x6e, 0x78, 0x6b, 0xa6, 0xe7, 0x58, 0x58,
	0x6e, 0xf0, 0x82, 0x3e, 0x37, 0xf2, 0xb5, 0x18, 0x34, 0xe2, 0x23, 0x7c, 0x17, 0x2c, 0x44, 0xc2,
	0xfb, 0xc7, 0x98, 0x61, 0x57, 0x90, 0xa0, 0xa0, 0xff, 0x6f, 0xe4, 0x6b, 0x17, 0x55, 0xc6, 0x45,
	0x00, 0x7d, 0x9e, 0x49, 0x95, 0x9e, 0x20, 0xb9, 0x6c, 0xe8, 0x34, 0x92, 0x37, 0x40, 0x61, 0xdb,
	0xec, 0x3c, 0x11, 0x23, 0x93, 0x89, 0x47, 0x26, 0xc4, 0x8c, 0xe8, 0xc4, 0xc7, 0x21, 0xc1, 0x07,
	0x39, 0xf5, 0xf3, 0x69, 0x3e, 0x24, 0x9f, 0x99, 0x57, 0xce, 0xa5, 0x7d, 0x6c, 0x0d, 0x49, 0xf0,
	0xfb, 0x27, 0x2a, 0x8f, 0x40, 0x23, 0x3e, 0xa6, 0x86, 0x22, 0x3f, 0x31, 0x14, 0x0d, 0x50, 0xd8,
	0xf0, 0x3e, 0x1a, 0x1e, 0x58, 0x66, 0x27, 0x68, 0x88, 0x48, 0x32, 0xc4, 0x8c, 0xe8, 0x74, 0xa7,
	0x17, 0xaf, 0x5a, 0x38, 0x07, 0x8a, 0x7b, 0x76, 0x97, 0xf4, 0x4c, 0x9b, 0x74, 0xcb, 0x33, 0x70,
	0x16, 0x14, 0x1e, 0x61, 0xd7, 0xe6, 0xea, 0xb2, 0x02, 0x17, 0xc1, 0xdc, 0xa6, 0x69, 0x59, 0x5b,
	0x94, 0xda, 0x7d, 0x01, 0x65, 0xb8, 0xfd, 0x0e, 0xe3, 0x54, 0xe2, 0x62, 0x16, 0x2e, 0x80, 0xd2,
	0x63, 0x6a, 0xb3, 0x43, 0xeb, 0x44, 0x00, 0x39, 0x08, 0x80, 0xfa, 0x18, 0x1f, 0x0d, 0x09, 0x29,
	0xe7, 0xef, 0x7c, 0xaf, 0x80, 0xa2, 0xb1, 0xf5, 0xc8, 0x75, 0x57, 0x39, 0x33, 0x17, 0xc1, 0x5c,
	0x14, 0x89, 0x03, 0xe5, 0x19, 0x78, 0x0d, 0x2c, 0xac, 0x52, 0xbb, 0x67, 0xf6, 0xbd, 0x6d, 0xca,
	0xd6, 0xe9, 0xd0, 0xee, 0x96, 0x7f, 0x38, 0x55, 0x61, 0x15, 0x5c, 0xdd, 0x49, 0xad, 0xe5, 0x75,
	0x6c, 0x5a, 0xa4, 0x5b, 0xfe, 0x51, 0xea, 0xda, 0xd3, 0x74, 0x3f, 0x9d, 0xaa, 0xb0, 0x0e, 0xaa,
	0x6d, 0xc2, 0x12, 0x8f, 0xbb, 0xee, 0xd2, 0xc1, 0x9a, 0x1e, 0x58, 0x3c, 0x3b, 0x55, 0xe1, 0x6b,
	0x60, 0x51, 0xee, 0xa2, 0x55, 0xdc, 0x39, 0x24, 0x81, 0xe2, 0xec, 0x54, 0x85, 0x1a, 0xb8, 0xde,
	0x26, 0x4c, 0xf6, 0x87, 0x3f, 0x7a, 0xea, 0xe6, 0xcf, 0xa7, 0xea, 0xfd, 0xe7, 0x59, 0x50, 0x4a,
	0x44, 0x85, 0x5f, 0x2b, 0xa1, 0xab, 0x24, 0xfa, 0xd6, 0x65, 0x13, 0x34, 0xed, 0x43, 0xaf, 0xfa,
	0x12, 0xd6, 0x9e, 0x83, 0x5e, 0xff, 0xe2, 0xf9, 0x1f, 0x5f, 0x65, 0xea, 0xa8, 0xd6, 0x4a, 0x28,
	0x5a, 0x93, 0x39, 0x7c, 0xa9, 0x80, 0xf9, 0x74, 0x8b, 0xe0, 0x9b, 0x97, 0x05, 0x9a, 0xf8, 0x3d,
	0xaf, 0xfe, 0x53, 0x53, 0xcf, 0x41, 0x4b, 0x22, 0xa1, 0x5b, 0xe8, 0x46, 0x2a, 0xa1, 0x0b, 0xa1,
	0xbf, 0x55, 0x00, 0x9c, 0xdc, 0x63, 0xf0, 0xde, 0x0b, 0xc2, 0x4c, 0xee, 0xeb, 0xea, 0xcb, 0x98,
	0x7b, 0x0e, 0x7a, 0x43, 0x64, 0x76, 0x1b, 0x69, 0x17, 0x33, 0xbb, 0x60, 0xab, 0x5f, 0x7f, 0xfa,
	0x5b, 0x6d, 0xe6, 0xe9, 0x79, 0x4d, 0x39, 0x3b, 0xaf, 0x29, 0xbf, 0x9e, 0xd7, 0x94, 0x6f, 0x7e,
	0xaf, 0xcd, 0x7c, 0x92, 0xc5, 0x8e, 0x79, 0xa0, 0x8a, 0xaf, 0xf4, 0x95, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0x5b, 0x66, 0xe8, 0x17, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RankingListClient is the client API for RankingList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RankingListClient interface {
	UpdateRankingList(ctx context.Context, in *UpdateRankingListReq, opts ...grpc.CallOption) (*UpdateRankingListRsp, error)
	GetRankingList(ctx context.Context, in *GetRankingListReq, opts ...grpc.CallOption) (*GetRankingListRsp, error)
	GetHallRankingList(ctx context.Context, in *GetHallRankingListReq, opts ...grpc.CallOption) (*GetHallRankingListRsp, error)
}

type rankingListClient struct {
	cc *grpc.ClientConn
}

func NewRankingListClient(cc *grpc.ClientConn) RankingListClient {
	return &rankingListClient{cc}
}

func (c *rankingListClient) UpdateRankingList(ctx context.Context, in *UpdateRankingListReq, opts ...grpc.CallOption) (*UpdateRankingListRsp, error) {
	out := new(UpdateRankingListRsp)
	err := c.cc.Invoke(ctx, "/rankinglist.service.v1.RankingList/UpdateRankingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingListClient) GetRankingList(ctx context.Context, in *GetRankingListReq, opts ...grpc.CallOption) (*GetRankingListRsp, error) {
	out := new(GetRankingListRsp)
	err := c.cc.Invoke(ctx, "/rankinglist.service.v1.RankingList/GetRankingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingListClient) GetHallRankingList(ctx context.Context, in *GetHallRankingListReq, opts ...grpc.CallOption) (*GetHallRankingListRsp, error) {
	out := new(GetHallRankingListRsp)
	err := c.cc.Invoke(ctx, "/rankinglist.service.v1.RankingList/GetHallRankingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankingListServer is the server API for RankingList service.
type RankingListServer interface {
	UpdateRankingList(context.Context, *UpdateRankingListReq) (*UpdateRankingListRsp, error)
	GetRankingList(context.Context, *GetRankingListReq) (*GetRankingListRsp, error)
	GetHallRankingList(context.Context, *GetHallRankingListReq) (*GetHallRankingListRsp, error)
}

// UnimplementedRankingListServer can be embedded to have forward compatible implementations.
type UnimplementedRankingListServer struct {
}

func (*UnimplementedRankingListServer) UpdateRankingList(ctx context.Context, req *UpdateRankingListReq) (*UpdateRankingListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRankingList not implemented")
}
func (*UnimplementedRankingListServer) GetRankingList(ctx context.Context, req *GetRankingListReq) (*GetRankingListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankingList not implemented")
}
func (*UnimplementedRankingListServer) GetHallRankingList(ctx context.Context, req *GetHallRankingListReq) (*GetHallRankingListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHallRankingList not implemented")
}

func RegisterRankingListServer(s *grpc.Server, srv RankingListServer) {
	s.RegisterService(&_RankingList_serviceDesc, srv)
}

func _RankingList_UpdateRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRankingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingListServer).UpdateRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rankinglist.service.v1.RankingList/UpdateRankingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingListServer).UpdateRankingList(ctx, req.(*UpdateRankingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingList_GetRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingListServer).GetRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rankinglist.service.v1.RankingList/GetRankingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingListServer).GetRankingList(ctx, req.(*GetRankingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingList_GetHallRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHallRankingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingListServer).GetHallRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rankinglist.service.v1.RankingList/GetHallRankingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingListServer).GetHallRankingList(ctx, req.(*GetHallRankingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RankingList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rankinglist.service.v1.RankingList",
	HandlerType: (*RankingListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRankingList",
			Handler:    _RankingList_UpdateRankingList_Handler,
		},
		{
			MethodName: "GetRankingList",
			Handler:    _RankingList_GetRankingList_Handler,
		},
		{
			MethodName: "GetHallRankingList",
			Handler:    _RankingList_GetHallRankingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *UpdateRankingListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRankingListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRankingListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x32
	}
	if m.RankKey != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RankKey))
		i--
		dAtA[i] = 0x28
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.RankType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RankType))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRankingListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRankingListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRankingListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRankingListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRankingListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRankingListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RankType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RankType))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRankingListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRankingListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRankingListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankInfoList) > 0 {
		for iNdEx := len(m.RankInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RankInfoSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RankInfoSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RankKey != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RankKey))
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHallRankingListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHallRankingListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHallRankingListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatTypeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatTypeId))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHallRankingListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHallRankingListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHallRankingListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDisplayAvatar {
		i--
		if m.IsDisplayAvatar {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsDisplay {
		i--
		if m.IsDisplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.LastStatTime) > 0 {
		i -= len(m.LastStatTime)
		copy(dAtA[i:], m.LastStatTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LastStatTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TopStatData) > 0 {
		for iNdEx := len(m.TopStatData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopStatData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopStatData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopStatData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopStatData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.StatValue != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatValue))
		i--
		dAtA[i] = 0x20
	}
	if m.StatTypeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatTypeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateRankingListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.RankType != 0 {
		n += 1 + sovApi(uint64(m.RankType))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.RankKey != 0 {
		n += 1 + sovApi(uint64(m.RankKey))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRankingListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRankingListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.RankType != 0 {
		n += 1 + sovApi(uint64(m.RankType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRankingListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RankInfoSize != 0 {
		n += 1 + sovApi(uint64(m.RankInfoSize))
	}
	if len(m.RankInfoList) > 0 {
		for _, e := range m.RankInfoList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.RankKey != 0 {
		n += 1 + sovApi(uint64(m.RankKey))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHallRankingListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.StatTypeId != 0 {
		n += 1 + sovApi(uint64(m.StatTypeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHallRankingListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.TopStatData) > 0 {
		for _, e := range m.TopStatData {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.LastStatTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsDisplay {
		n += 2
	}
	if m.IsDisplayAvatar {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopStatData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovApi(uint64(m.UserId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StatTypeId != 0 {
		n += 1 + sovApi(uint64(m.StatTypeId))
	}
	if m.StatValue != 0 {
		n += 1 + sovApi(uint64(m.StatValue))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.IsPublic {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateRankingListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRankingListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRankingListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankType", wireType)
			}
			m.RankType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankType |= RankType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankKey", wireType)
			}
			m.RankKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankKey |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRankingListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRankingListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRankingListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRankingListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRankingListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRankingListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankType", wireType)
			}
			m.RankType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankType |= RankType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRankingListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRankingListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRankingListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfoSize", wireType)
			}
			m.RankInfoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankInfoSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankInfoList = append(m.RankInfoList, &RankInfo{})
			if err := m.RankInfoList[len(m.RankInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankKey", wireType)
			}
			m.RankKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankKey |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHallRankingListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHallRankingListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHallRankingListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatTypeId", wireType)
			}
			m.StatTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatTypeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHallRankingListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHallRankingListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHallRankingListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopStatData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopStatData = append(m.TopStatData, &TopStatData{})
			if err := m.TopStatData[len(m.TopStatData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastStatTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDisplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDisplay = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDisplayAvatar", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDisplayAvatar = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopStatData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopStatData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopStatData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatTypeId", wireType)
			}
			m.StatTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatTypeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatValue", wireType)
			}
			m.StatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
