// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathPropAddProp = "/prop/AddProp"
var PathPropExpendProp = "/prop/ExpendProp"
var PathPropQueryProp = "/prop/QueryProp"
var PathPropAppearExpendPropInfo = "/prop/AppearExpendPropInfo"
var PathPropGetExpendPropInfo = "/prop/GetExpendPropInfo"

// PropBMServer is the server API for Prop service.
type PropBMServer interface {
	AddProp(ctx context.Context, req *AddPropReq) (resp *AddPropRsp, err error)

	ExpendProp(ctx context.Context, req *ExpendPropReq) (resp *ExpendPropRsp, err error)

	QueryProp(ctx context.Context, req *QueryPropReq) (resp *QueryPropRsp, err error)

	AppearExpendPropInfo(ctx context.Context, req *AppearExpendPropInfoReq) (resp *AppearExpendPropInfoRsp, err error)

	GetExpendPropInfo(ctx context.Context, req *GetExpendPropInfoReq) (resp *GetExpendPropInfoRsp, err error)
}

var PropSvc PropBMServer

func propAddProp(c *bm.Context) {
	p := new(AddPropReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PropSvc.AddProp(c, p)
	c.JSON(resp, err)
}

func propExpendProp(c *bm.Context) {
	p := new(ExpendPropReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PropSvc.ExpendProp(c, p)
	c.JSON(resp, err)
}

func propQueryProp(c *bm.Context) {
	p := new(QueryPropReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PropSvc.QueryProp(c, p)
	c.JSON(resp, err)
}

func propAppearExpendPropInfo(c *bm.Context) {
	p := new(AppearExpendPropInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PropSvc.AppearExpendPropInfo(c, p)
	c.JSON(resp, err)
}

func propGetExpendPropInfo(c *bm.Context) {
	p := new(GetExpendPropInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PropSvc.GetExpendPropInfo(c, p)
	c.JSON(resp, err)
}

// RegisterPropBMServer Register the blademaster route
func RegisterPropBMServer(e *bm.Engine, server PropBMServer) {
	PropSvc = server
	e.POST("/prop/AddProp", propAddProp)
	e.POST("/prop/ExpendProp", propExpendProp)
	e.POST("/prop/QueryProp", propQueryProp)
	e.POST("/prop/AppearExpendPropInfo", propAppearExpendPropInfo)
	e.POST("/prop/GetExpendPropInfo", propGetExpendPropInfo)
}
