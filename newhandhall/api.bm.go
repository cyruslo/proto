// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathNewhandhallOnGetConfig = "/newhandhall/OnGetConfig"
var PathNewhandhallOnGetGuideData = "/newhandhall/OnGetGuideData"
var PathNewhandhallOnCompleteGuide = "/newhandhall/OnCompleteGuide"
var PathNewhandhallOnGetNextGiftTime = "/newhandhall/OnGetNextGiftTime"
var PathNewhandhallOnReceiveGift = "/newhandhall/OnReceiveGift"
var PathNewhandhallOnGetGoldConsumeAndEarned = "/newhandhall/OnGetGoldConsumeAndEarned"
var PathNewhandhallOnUnlockHall = "/newhandhall/OnUnlockHall"
var PathNewhandhallOnGetHallIsLock = "/newhandhall/OnGetHallIsLock"
var PathNewhandhallOnUnlockGame = "/newhandhall/OnUnlockGame"
var PathNewhandhallOnGetGameInfo = "/newhandhall/OnGetGameInfo"

// NewhandhallBMServer is the server API for Newhandhall service.
type NewhandhallBMServer interface {
	// /////////////////////////////////客户端的http请求/////////////////////////////////////////////////////////////////
	// 获取服务器配置
	OnGetConfig(ctx context.Context, req *GetConfigReq) (resp *GetConfigRsp, err error)

	// 获取引导步骤信息
	OnGetGuideData(ctx context.Context, req *GetGuideDataReq) (resp *GetGuideDataRsp, err error)

	// 完成引导步骤
	OnCompleteGuide(ctx context.Context, req *CompleteGuideReq) (resp *CommonRsp, err error)

	// 获取下次免费礼包时间
	OnGetNextGiftTime(ctx context.Context, req *GetNextGiftTimeReq) (resp *GetNextGiftTimeRsp, err error)

	// 获取免费礼包
	OnReceiveGift(ctx context.Context, req *ReceiveGiftReq) (resp *CommonRsp, err error)

	// 获取累计消耗获得货币数据
	OnGetGoldConsumeAndEarned(ctx context.Context, req *GetGoldConsumeAndEarnedReq) (resp *GetGoldConsumeAndEarnedRsp, err error)

	// 解锁大厅
	OnUnlockHall(ctx context.Context, req *UnlockHallReq) (resp *CommonRsp, err error)

	// 获取大厅解锁情况
	OnGetHallIsLock(ctx context.Context, req *GetHallIsLockReq) (resp *GetHallIsLockRsp, err error)

	// 解锁游戏
	OnUnlockGame(ctx context.Context, req *UnlockGameReq) (resp *CommonRsp, err error)

	// 获取游戏列表
	OnGetGameInfo(ctx context.Context, req *GetGameInfoReq) (resp *GetGameInfoRsp, err error)
}

var NewhandhallSvc NewhandhallBMServer

func newhandhallOnGetConfig(c *bm.Context) {
	p := new(GetConfigReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnGetConfig(c, p)
	c.JSON(resp, err)
}

func newhandhallOnGetGuideData(c *bm.Context) {
	p := new(GetGuideDataReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnGetGuideData(c, p)
	c.JSON(resp, err)
}

func newhandhallOnCompleteGuide(c *bm.Context) {
	p := new(CompleteGuideReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnCompleteGuide(c, p)
	c.JSON(resp, err)
}

func newhandhallOnGetNextGiftTime(c *bm.Context) {
	p := new(GetNextGiftTimeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnGetNextGiftTime(c, p)
	c.JSON(resp, err)
}

func newhandhallOnReceiveGift(c *bm.Context) {
	p := new(ReceiveGiftReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnReceiveGift(c, p)
	c.JSON(resp, err)
}

func newhandhallOnGetGoldConsumeAndEarned(c *bm.Context) {
	p := new(GetGoldConsumeAndEarnedReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnGetGoldConsumeAndEarned(c, p)
	c.JSON(resp, err)
}

func newhandhallOnUnlockHall(c *bm.Context) {
	p := new(UnlockHallReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnUnlockHall(c, p)
	c.JSON(resp, err)
}

func newhandhallOnGetHallIsLock(c *bm.Context) {
	p := new(GetHallIsLockReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnGetHallIsLock(c, p)
	c.JSON(resp, err)
}

func newhandhallOnUnlockGame(c *bm.Context) {
	p := new(UnlockGameReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnUnlockGame(c, p)
	c.JSON(resp, err)
}

func newhandhallOnGetGameInfo(c *bm.Context) {
	p := new(GetGameInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := NewhandhallSvc.OnGetGameInfo(c, p)
	c.JSON(resp, err)
}

// RegisterNewhandhallBMServer Register the blademaster route
func RegisterNewhandhallBMServer(e *bm.Engine, server NewhandhallBMServer) {
	NewhandhallSvc = server
	e.POST("/newhandhall/OnGetConfig", newhandhallOnGetConfig)
	e.POST("/newhandhall/OnGetGuideData", newhandhallOnGetGuideData)
	e.POST("/newhandhall/OnCompleteGuide", newhandhallOnCompleteGuide)
	e.POST("/newhandhall/OnGetNextGiftTime", newhandhallOnGetNextGiftTime)
	e.POST("/newhandhall/OnReceiveGift", newhandhallOnReceiveGift)
	e.POST("/newhandhall/OnGetGoldConsumeAndEarned", newhandhallOnGetGoldConsumeAndEarned)
	e.POST("/newhandhall/OnUnlockHall", newhandhallOnUnlockHall)
	e.POST("/newhandhall/OnGetHallIsLock", newhandhallOnGetHallIsLock)
	e.POST("/newhandhall/OnUnlockGame", newhandhallOnUnlockGame)
	e.POST("/newhandhall/OnGetGameInfo", newhandhallOnGetGameInfo)
}
